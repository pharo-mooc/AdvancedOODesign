1
00:00:03,630 --> 00:00:06,050
Hello and welcome to this lecture.

2
00:00:06,310 --> 00:00:10,710
In this lecture, we are going to
study the difference between having

3
00:00:10,910 --> 00:00:12,870
objects and having data structures.

4
00:00:13,850 --> 00:00:21,310
Yes, we are going to see how the
API exposed by a class and its instances

5
00:00:21,510 --> 00:00:26,670
affects how the client uses them
and how our code is structured.

6
00:00:28,580 --> 00:00:32,340
The goals for this lecture are to
see clearly the difference between

7
00:00:32,540 --> 00:00:34,460
having an object and a data structure.

8
00:00:35,460 --> 00:00:40,280
Because if you have an object,
you will have an API,

9
00:00:40,500 --> 00:00:44,700
you will expose an API and we will
see the difference of having a poor

10
00:00:44,900 --> 00:00:46,000
and a good API.

11
00:00:47,820 --> 00:00:55,300
APIs are an important element in
object design and it encapsulates

12
00:00:55,500 --> 00:00:59,960
how the objects are used and how
the client interacts with them.

13
00:01:00,160 --> 00:01:03,840
And what are the responsibilities
that we can delegate to the objects

14
00:01:04,040 --> 00:01:06,940
and what are the responsibilities
that remain in the client,

15
00:01:07,140 --> 00:01:08,440
in the users of this object.

16
00:01:09,240 --> 00:01:12,200
We are going to look at two concrete
examples.

17
00:01:13,160 --> 00:01:16,260
We are going to analyze the
implementation of `Point` in Java

18
00:01:16,460 --> 00:01:23,200
and in Pharo and how the difference
in their APIs, how it affects the

19
00:01:23,400 --> 00:01:27,700
final user and the code that uses
these objects.

20
00:01:28,280 --> 00:01:32,640
First, let's start seeing what we
have in the Java `Points`.

21
00:01:32,940 --> 00:01:37,020
If we get this information from
the documentation of Java,

22
00:01:37,540 --> 00:01:41,980
we see that `Points` understand
a series of messages.

23
00:01:42,680 --> 00:01:46,340
Basically, they have a way of getting
a location.

24
00:01:47,120 --> 00:01:52,220
Basically, a `Point` will return
itself as the location of a `Point`

25
00:01:52,420 --> 00:01:55,200
is just a `Point`, so it returns itself.

26
00:01:56,160 --> 00:02:01,620
There has a way of setting this
location, Java being a strong type

27
00:02:01,820 --> 00:02:06,640
of language, we have different
implementations of this method,

28
00:02:07,060 --> 00:02:11,060
depending on the type of the arguments,
but basically, we have a way of

29
00:02:11,260 --> 00:02:16,160
setting the coordinates of the `Point`
using `doubles` or `int` or another

30
00:02:16,360 --> 00:02:17,120
`Point`.

31
00:02:17,320 --> 00:02:21,480
And also we have a way of accessing
these two coordinates.

32
00:02:22,840 --> 00:02:27,740
If we see a little more of what
we have in the API, we see that

33
00:02:27,940 --> 00:02:33,880
we can compare two `Points` to see
if they are equals and we can move

34
00:02:34,080 --> 00:02:36,620
a "Point" to a given position.

35
00:02:36,820 --> 00:02:41,560
We can set a new position to this
"Point" in the coordinate space,

36
00:02:41,960 --> 00:02:45,500
and we can translate it by a distance.

37
00:02:46,100 --> 00:02:53,420
Translate it will modify its x and
y coordinate, adding them the distance

38
00:02:53,620 --> 00:02:55,940
in x and y that we passed as a
parameter.

39
00:02:56,940 --> 00:03:01,800
Also we have implemented,
because we inherited it from the

40
00:03:02,000 --> 00:03:06,640
superclass `Point2D`,
the `distance` and `clone` methods.

41
00:03:07,000 --> 00:03:13,620
The distance tells us the distance
from a `Point` to another given `Point`.

42
00:03:13,960 --> 00:03:20,420
As we can see, the implementations
of `Points` in Java is a super poor

43
00:03:20,620 --> 00:03:21,380
data structure.

44
00:03:21,580 --> 00:03:26,400
We have only method to access to
their contents, in this case,

45
00:03:26,600 --> 00:03:31,660
the instance variable x and y,
and it only works to hold true integers.

46
00:03:32,680 --> 00:03:37,320
It is super limited, the interface,
or what we can do with a `Point`.

47
00:03:37,680 --> 00:03:40,920
What are the messages we can send
to a `Point` and what are the operations

48
00:03:41,120 --> 00:03:43,100
that we can do with them?

49
00:03:45,000 --> 00:03:49,720
Basically, Java `Points` are data
structures.

50
00:03:50,080 --> 00:03:54,280
Let's see another example,
the `Points`, the implementations

51
00:03:54,480 --> 00:03:55,800
of `Points` in Pharo.

52
00:03:56,760 --> 00:04:00,400
We will see that it has a really
rich API.

53
00:04:00,780 --> 00:04:06,680
We have selected some of the messages
that we can send to a `Point`,

54
00:04:07,120 --> 00:04:15,920
but we can see that we have a selection
to operate on them, to normalize,

55
00:04:16,120 --> 00:04:21,380
transpose or reflect about another
`Point`, different ways of calculating

56
00:04:21,580 --> 00:04:22,340
distances.

57
00:04:22,880 --> 00:04:25,300
We have the `crossProduct`and the
`dotProduct`.

58
00:04:26,060 --> 00:04:30,260
We have a lot of mathematical operations
on top of `Points`.

59
00:04:30,600 --> 00:04:34,840
We can `sum` to `Points`,
we can multiply a `Point` by a `scalar`

60
00:04:35,040 --> 00:04:41,740
and we can calculate the `division`
between a `Point` and a `scalar`

61
00:04:41,940 --> 00:04:43,980
so it will change its size.

62
00:04:44,300 --> 00:04:51,400
And we have comparison messages,
so we can compare a `Point` to another

63
00:04:51,600 --> 00:04:53,960
`Point` and we can compare `Points`.

64
00:04:55,580 --> 00:05:01,600
Also, not only using absolute values,
but also using `closeTo` and different

65
00:05:01,800 --> 00:05:02,660
levels of `precision`.

66
00:05:03,420 --> 00:05:09,340
And we have a lot of operations
related with geometrical operations,

67
00:05:09,540 --> 00:05:16,500
like calculating the `triangleArea`
or obtaining a rectangle from a

68
00:05:16,700 --> 00:05:18,600
given `Point` or for a given pair
of `Points`.

69
00:05:19,180 --> 00:05:21,540
So we have a really rich API.

70
00:05:21,820 --> 00:05:25,520
And if we continue seeing,
this continues, they have operations

71
00:05:25,720 --> 00:05:31,920
to calculate the angles that these
`Points` have with the origin,

72
00:05:32,520 --> 00:05:37,660
or we calculate neighbor `Points`

73
00:05:37,860 --> 00:05:42,900
or the directions or vectors in
the different directions from this

74
00:05:43,100 --> 00:05:43,860
`Point`.

75
00:05:44,060 --> 00:05:48,500
So we can see that we have a really
rich API that the client can use

76
00:05:48,700 --> 00:05:50,020
and operate on `Points`.

77
00:05:50,540 --> 00:05:56,200
Let's see a simple example that
shows why we want this great API

78
00:05:56,400 --> 00:05:59,160
and rich operations from the client
`Point`.

79
00:05:59,900 --> 00:06:02,840
Let's imagine we want to implement
the `crossProduct`.

80
00:06:03,380 --> 00:06:06,840
It's quite easy, as we can see,
the implementation in Pharo,

81
00:06:07,040 --> 00:06:07,800
it's quite easy.

82
00:06:08,020 --> 00:06:13,920
It's a really simple implementation,
but it's still useful.

83
00:06:14,160 --> 00:06:17,460
We can use it without knowing the
implementation.

84
00:06:17,900 --> 00:06:21,140
The client does not know how to
implement it.

85
00:06:21,440 --> 00:06:25,620
We don't need to duplicate it,
and more, when we see calculations

86
00:06:25,820 --> 00:06:30,480
of the `crossProduct`, it's not
evident for the reader of the code

87
00:06:30,680 --> 00:06:34,520
that this is the `crossProduct`,
but when we see the sending of the

88
00:06:34,720 --> 00:06:38,720
message `crossProduct` column,
we see clearly that we are doing

89
00:06:38,920 --> 00:06:39,680
this operation.

90
00:06:40,060 --> 00:06:46,720
So it's really good not to duplicate
the code in client, but also as

91
00:06:46,920 --> 00:06:51,100
a way of documentation is more clear
when we read the code.

92
00:06:52,560 --> 00:06:57,080
The same happens when we are comparing
two `Points` in the implementation

93
00:06:57,280 --> 00:07:02,200
that we have already in the class
`Point`, we are handling the case

94
00:07:02,400 --> 00:07:06,720
of comparing the x and the y variable.

95
00:07:07,180 --> 00:07:11,380
Again, it's simple to implement
in the client, but we don't want to.

96
00:07:11,960 --> 00:07:16,660
And this case gets even more and
more interesting when we have an

97
00:07:16,860 --> 00:07:20,100
implementation of an operation that
is more complicated.

98
00:07:20,300 --> 00:07:27,580
In this case, like the degrees message
that will return us the angle that

99
00:07:27,780 --> 00:07:31,480
the `Point` receiver in this message
do with the origin.

100
00:07:32,460 --> 00:07:38,740
As you see, we have a lot of operations,
depending if the value of x has

101
00:07:38,940 --> 00:07:39,960
different conditional code.

102
00:07:40,160 --> 00:07:45,280
And also it has to handle the

103
00:07:45,480 --> 00:07:47,660
conversions of radians to degrees.

104
00:07:48,360 --> 00:07:53,820
And basically, it's quite an interesting
method that we don't want to implement

105
00:07:54,020 --> 00:07:54,860
in the clients.

106
00:07:55,860 --> 00:08:01,600
So let's see an example in Java
to make it more clear why having

107
00:08:01,800 --> 00:08:07,220
a nice API, having a good API can
impact the client.

108
00:08:07,800 --> 00:08:13,280
We want to make a little class that
represents a robot and it has a

109
00:08:13,480 --> 00:08:18,220
position and we want to implement
in it a Go message.

110
00:08:18,420 --> 00:08:23,810
We will implement the Go method
and we will pass an instance directly

111
00:08:24,010 --> 00:08:25,030
to this Go method.

112
00:08:25,710 --> 00:08:32,290
So the new position of the robot,
we will need to create a new `Point`

113
00:08:32,490 --> 00:08:37,210
with the two values, because we
cannot have other ways of creating

114
00:08:37,410 --> 00:08:41,970
`Points`, just we need to give the
x and y coordinates.

115
00:08:42,190 --> 00:08:43,770
We cannot operate with `Points`.

116
00:08:43,970 --> 00:08:46,750
So we have to do all the calculation
in the client side.

117
00:08:47,230 --> 00:08:53,210
You can tell me that this code,
you can say that is simpler or complex,

118
00:08:53,410 --> 00:08:58,390
but we have to do it all in the
client side, in the user of the `Point`.

119
00:08:59,690 --> 00:09:03,670
As I say, we have to recreate this
`Point` explicitly using the distance

120
00:09:03,870 --> 00:09:04,890
and the current position.

121
00:09:05,430 --> 00:09:10,790
And we have to have all the arithmetic,
all the operations that we are using

122
00:09:10,990 --> 00:09:12,810
with `Points` outside the `Point`.

123
00:09:13,010 --> 00:09:15,930
We have to write it every time we
use a `Point`.

124
00:09:16,550 --> 00:09:20,650
So this really, really,
really shallow API that exposed

125
00:09:20,850 --> 00:09:27,170
in Java tends to generate the
duplication of code or logic duplication

126
00:09:27,370 --> 00:09:29,510
in all the clients that are using them.

127
00:09:30,530 --> 00:09:35,510
If we see it in a diagram,
we see that in the implementation

128
00:09:35,710 --> 00:09:39,390
in Java, where we don't have the
degrees, we will have to implement

129
00:09:39,590 --> 00:09:46,170
these method degrees in each of
the clients having not only four

130
00:09:46,370 --> 00:09:50,190
times the same code, but also the
opportunity to implement it wrong.

131
00:09:50,590 --> 00:09:58,830
What happens if one of the clients
does not cover all the cases for

132
00:09:59,030 --> 00:10:00,150
implementing this operation?

133
00:10:00,710 --> 00:10:05,750
So having a more complex or a more

134
00:10:05,950 --> 00:10:11,710
rich API in `Point` as we have in
Pharo allows us to reuse this code

135
00:10:11,910 --> 00:10:15,710
better and take responsibility out
from the client.

136
00:10:16,070 --> 00:10:19,930
Even if they are simpler methods,
we want to take responsibility out

137
00:10:20,130 --> 00:10:22,470
to ease the use of our option.

138
00:10:23,490 --> 00:10:28,170
If you see now the implementation
or comparing the two implementations…

139
00:10:28,370 --> 00:10:31,690
On top, we have the implementation
in Java and on bottom,

140
00:10:31,890 --> 00:10:35,950
the implementation in Pharo,
we see that the implementation in Pharo,

141
00:10:36,150 --> 00:10:40,790
as we have a rich operation in our
`Point`, we can take the initial

142
00:10:40,990 --> 00:10:46,630
position and add another `Point`,
and this `Point`, we can create

143
00:10:46,830 --> 00:10:51,850
it with the two angles with the

144
00:10:52,050 --> 00:10:57,470
Cos and the Sin and scale it by
the distance and then round it to

145
00:10:57,670 --> 00:10:58,550
make it an integer.

146
00:10:58,750 --> 00:11:02,890
As we see, all the operations,
all the code is implemented using

147
00:11:03,090 --> 00:11:08,410
operations that we delegate to `Point`,
to Number and with that,

148
00:11:08,610 --> 00:11:11,730
we can implement the method much
simpler.

149
00:11:12,110 --> 00:11:19,430
Of course, this difference in complexity
gets higher and higher when the

150
00:11:19,630 --> 00:11:22,630
operation that we are creating is
more complex.

151
00:11:22,830 --> 00:11:26,190
In the Pharo example,
we see that in Pharo `Points`,

152
00:11:26,430 --> 00:11:29,370
we use the `Points` more than a
data structure.

153
00:11:29,750 --> 00:11:34,570
We send a lot of messages to them
and we let them implement advanced

154
00:11:34,770 --> 00:11:36,030
behavior.

155
00:11:36,710 --> 00:11:39,910
This functionality is not needed
to be implemented in the client

156
00:11:40,110 --> 00:11:45,910
and it's easy to reuse because our
`Points` are better units that we

157
00:11:46,110 --> 00:11:46,870
want to use.

158
00:11:48,010 --> 00:11:52,710
So as a conclusion, you have to
remember always that objects are

159
00:11:52,910 --> 00:11:54,370
much more than data structure.

160
00:11:55,010 --> 00:11:59,030
Yes, the part of the holding the
instance variable is just a part

161
00:11:59,230 --> 00:12:01,330
of the object and usually is the
less important.

162
00:12:01,530 --> 00:12:07,570
The most important is what are the
behavior and services the objects

163
00:12:07,770 --> 00:12:08,810
do to their clients?

164
00:12:09,010 --> 00:12:11,210
What is the API they expose?

165
00:12:12,070 --> 00:12:17,690
The objects should give operations
that we use from upside and it should

166
00:12:17,890 --> 00:12:21,050
encapsulate the logic and its internal
state.

167
00:12:21,450 --> 00:12:27,770
So the client can reuse this code

168
00:12:27,970 --> 00:12:31,510
that is implemented in the object,
the operation that is exposed by

169
00:12:31,710 --> 00:12:35,750
the object directly without caring
how it is implemented.


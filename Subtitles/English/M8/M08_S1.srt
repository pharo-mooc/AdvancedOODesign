1
00:00:04,080 --> 00:00:05,180
- Hello everybody.

2
00:00:06,360 --> 00:00:09,820
In this lecture, I will talk about
shared variables.

3
00:00:10,420 --> 00:00:14,840
This is one of the four lectures
that is really specific to Pharo.

4
00:00:15,040 --> 00:00:18,380
That's why we call it a code idiom.

5
00:00:19,040 --> 00:00:20,560
In this lecture, what are the goals?

6
00:00:20,900 --> 00:00:25,200
We will revisit the concept of shared
variables - ClassVariables in Smalltalk

7
00:00:25,400 --> 00:00:31,040
jargon, or SharedVariables in Pharo
jargon - and think about the scope

8
00:00:31,240 --> 00:00:32,340
of sharing and what it means.

9
00:00:33,280 --> 00:00:37,320
We will have two other lectures
that are somehow related to this

10
00:00:37,520 --> 00:00:40,240
lecture, plus the flyweight design
pattern.

11
00:00:43,010 --> 00:00:46,210
Let's start with the basic things first.

12
00:00:46,950 --> 00:00:49,050
Instance variables are just local
to one object.

13
00:00:49,670 --> 00:00:52,590
There is nothing new here,
this is something that you should

14
00:00:52,790 --> 00:00:55,150
have learned in any object-oriented
lecture.

15
00:00:55,630 --> 00:00:59,130
I don't want to spend time,
but this means that if you have

16
00:00:59,330 --> 00:01:02,790
an object and it has a value,
it is specific to this,

17
00:01:02,990 --> 00:01:04,730
and I have another one that will
have a value.

18
00:01:05,470 --> 00:01:10,410
For example, imagine that this is
a rectangle here and I have a height,

19
00:01:11,630 --> 00:01:18,210
the class defines the variable,
and each object has its own value.

20
00:01:18,750 --> 00:01:25,870
If I modify this value,
if I empty it, then only this object

21
00:01:26,070 --> 00:01:27,530
is impacted and not this one.

22
00:01:28,190 --> 00:01:29,630
So, nothing new normally.

23
00:01:30,250 --> 00:01:32,910
This is just to remind you of this.

24
00:01:34,510 --> 00:01:37,430
Now, in addition, we have shared
variables.

25
00:01:38,070 --> 00:01:46,090
Shared variables are shared by all
the instances of a class and in

26
00:01:46,290 --> 00:01:47,210
addition to a hierarchy.

27
00:01:47,750 --> 00:01:49,130
We will look at that.

28
00:01:49,570 --> 00:01:55,670
This means that there is only one
value that all the instances of

29
00:01:55,870 --> 00:01:57,890
this hierarchy will share.

30
00:01:58,090 --> 00:02:02,570
So, if you modify one,
all the instances get impacted.

31
00:02:03,190 --> 00:02:08,210
Usually, the shared variable is
initialized at load time because

32
00:02:09,190 --> 00:02:11,010
they use lazy initialization sometimes.

33
00:02:11,250 --> 00:02:14,370
If you don't know what lazy
initialization is, there is a lecture

34
00:02:14,570 --> 00:02:15,670
in one of the modules.

35
00:02:16,730 --> 00:02:22,230
But usually, the shared variable
initializes at load time in a class

36
00:02:22,430 --> 00:02:24,350
initialize method.

37
00:02:25,270 --> 00:02:28,270
This is what I said: in Smalltalk,
this is called ClassVariables,

38
00:02:28,830 --> 00:02:30,550
and in Pharo, we call that
SharedVariables.

39
00:02:31,870 --> 00:02:33,990
We call that SharedVariables because
they are shared.

40
00:02:34,690 --> 00:02:35,850
Let's look at an example.

41
00:02:36,330 --> 00:02:39,030
If we look at the class `Color`,
which you can see in Pharo,

42
00:02:39,270 --> 00:02:40,370
the class `Color` inherits from
`Object`.

43
00:02:41,290 --> 00:02:46,260
It has `rgb`, which means that each
color has a red, green,

44
00:02:46,460 --> 00:02:50,350
and blue element, and `alpha`.

45
00:02:51,470 --> 00:02:58,990
But you have also constants that
are basically defined as

46
00:02:59,190 --> 00:02:59,950
`sharedVariables`.

47
00:03:00,750 --> 00:03:01,720
Let's look at it.

48
00:03:02,630 --> 00:03:03,850
Visually, what does it mean?

49
00:03:04,050 --> 00:03:09,100
It means that I have the class `Color`
with the instance variables `rgb`

50
00:03:10,480 --> 00:03:11,240
and `alpha`.

51
00:03:11,440 --> 00:03:13,620
This class `Color` also defines
shared variables.

52
00:03:13,820 --> 00:03:19,900
These ones are shared and what you
see is that the metaclass,

53
00:03:20,320 --> 00:03:24,860
the `Color` class, has an initialized
method that will initialize the

54
00:03:25,060 --> 00:03:28,100
value of this shared variable.

55
00:03:29,220 --> 00:03:35,880
All the objects or instances of

56
00:03:36,080 --> 00:03:40,660
the subclass of `Color` are using
this value.

57
00:03:41,000 --> 00:03:49,320
And now, once the class declares
that it defines a shared variable,

58
00:03:50,320 --> 00:03:55,800
then we can use it either in the
class part, like here,

59
00:03:56,000 --> 00:03:58,040
or in the instance part,
like here.

60
00:03:58,480 --> 00:04:03,840
This means that `privateBlue`,
for example, is `rgb bitAnd` on a mask.

61
00:04:07,000 --> 00:04:12,200
If we look at the code,
for example, in these kinds of `set`

62
00:04:12,400 --> 00:04:16,180
methods - `setRed`, `green` and
`blue` - we get an instance variable

63
00:04:16,380 --> 00:04:23,700
here, and here we can directly access
the shared variable that contains

64
00:04:23,900 --> 00:04:27,160
certain information so we can do
the `bitAnd` and `bitShift` and

65
00:04:27,360 --> 00:04:29,800
(trickery) for the encoding of the
colors.

66
00:04:31,040 --> 00:04:35,400
Similarly, this is what I show in
the UML diagram, the initialized

67
00:04:35,600 --> 00:04:41,120
method on the class side will just
set the constants that are used

68
00:04:41,580 --> 00:04:43,780
by the compiler once and for all.

69
00:04:45,480 --> 00:04:47,500
Let's take another example:
String.

70
00:04:49,140 --> 00:04:53,780
The class `String` defines one shared
variable which is called

71
00:04:53,980 --> 00:04:54,740
`CaseSensitiveOrder`.

72
00:04:55,360 --> 00:04:58,820
This means that if you want to compare
strings, you can say,

73
00:04:59,020 --> 00:05:03,680
"Do you care about the case or not?"
And what you see is that in the

74
00:05:03,880 --> 00:05:12,440
instance methods, the class `String`
uses this shared variable,

75
00:05:12,640 --> 00:05:17,160
and of course, the `String` class,
the metaclass, initialize.

76
00:05:17,360 --> 00:05:24,240
So, it will initialize the `Type` class,
`TypeTable` - I don't know exactly

77
00:05:24,440 --> 00:05:25,200
what it is.

78
00:05:25,400 --> 00:05:31,020
But I wanted to show you that this
shared variable that is used in

79
00:05:31,220 --> 00:05:35,140
the instance method is initialized
at the class level.

80
00:05:35,600 --> 00:05:40,700
What you can also see is that `Symbol`,
which is a subclass of `String`,

81
00:05:40,900 --> 00:05:46,740
can use this shared variable at

82
00:05:46,960 --> 00:05:49,640
the class level, but it also could
be at the instance level.

83
00:05:52,260 --> 00:05:54,320
This is how the class `String` is
defined.

84
00:05:55,360 --> 00:06:00,860
It used several shared variables.

85
00:06:01,700 --> 00:06:04,120
I don't want to go into detail,
but this is just to show you that

86
00:06:04,320 --> 00:06:05,080
aspect.

87
00:06:07,690 --> 00:06:12,730
Here, this wasn't on the UML,
but if you look at `ByteSymbol`,

88
00:06:12,930 --> 00:06:18,030
for example, which is a subclass
of `Symbol`, which is a subclass

89
00:06:18,230 --> 00:06:25,890
of `String`, you have the instance
method that will use directly the

90
00:06:26,090 --> 00:06:26,850
shared variable.

91
00:06:27,050 --> 00:06:31,970
In the end, shared variables are
accessible from instance methods

92
00:06:32,170 --> 00:06:36,630
and class methods of the complete
hierarchy and the subclasses of

93
00:06:36,830 --> 00:06:40,450
the hierarchy from the class that
defines the shared variable.

94
00:06:41,590 --> 00:06:46,030
This is what we have here in the
`Symbol` class, on the class side.

95
00:06:46,550 --> 00:06:48,530
Then we can use this.

96
00:06:48,750 --> 00:06:51,930
So, this is completely transparent
for you, and after you just use it.

97
00:06:52,130 --> 00:06:58,530
It's like your constant gets access
everywhere from within this hierarchy.

98
00:07:01,510 --> 00:07:04,610
There is an implication or there
are implications.

99
00:07:05,610 --> 00:07:09,610
There is a difference between shared
variables and instance variables

100
00:07:09,810 --> 00:07:10,570
of the metaclass.

101
00:07:12,970 --> 00:07:13,810
Look at this.

102
00:07:14,650 --> 00:07:19,370
If I have `BorderStyle` that inherits
from `Object` and defines a `#Default`

103
00:07:19,570 --> 00:07:25,530
shared variable, this is not the
same as saying that I can have an

104
00:07:25,730 --> 00:07:26,810
instance variable of the metaclass.

105
00:07:29,240 --> 00:07:30,280
What is the difference?

106
00:07:30,480 --> 00:07:31,460
Let's look at that.

107
00:07:31,780 --> 00:07:32,860
This is a bit subtle.

108
00:07:34,520 --> 00:07:43,820
When you use a shared variable,
there is only one instance of

109
00:07:44,020 --> 00:07:46,000
`BorderStyle` for the complete
sub-hierarchy.

110
00:07:46,200 --> 00:07:53,850
So, if I drew it, it means that
I have `BorderStyle` and here there

111
00:07:54,050 --> 00:07:59,330
will be one instance of `aBorderStyle`
because the `#Default` is for the

112
00:07:59,530 --> 00:08:00,290
singleton pattern.

113
00:08:01,150 --> 00:08:05,650
And all this hierarchy,
which can be quite deep,

114
00:08:14,280 --> 00:08:24,110
will share this class variable.

115
00:08:24,350 --> 00:08:25,730
There is only one in the system.

116
00:08:26,190 --> 00:08:33,970
Now, in this case, it means that

117
00:08:34,170 --> 00:08:42,170
I have `BorderStyle` - let me draw
it like that - and I have one instance

118
00:08:42,370 --> 00:08:43,270
of the class.

119
00:08:43,910 --> 00:08:50,490
This means that I have `BorderStyle`,
which is an instance of the

120
00:08:50,690 --> 00:08:58,780
`BorderStyle` class, and here I

121
00:08:58,980 --> 00:08:59,740
have `#Default`.

122
00:09:01,160 --> 00:09:02,020
What does it mean?

123
00:09:02,560 --> 00:09:10,560
It means that every class has its
own instance because the metaclass

124
00:09:10,760 --> 00:09:11,960
describes the class.

125
00:09:12,380 --> 00:09:16,560
So, this class is an instance of
this metaclass, which means that

126
00:09:16,760 --> 00:09:25,060
this class has an instance variable
value that will be specific to this one.

127
00:09:27,000 --> 00:09:31,980
Let's draw it like this is an object
and it has a value.

128
00:09:32,220 --> 00:09:34,680
You remember at the beginning,
I said that every object can have

129
00:09:34,880 --> 00:09:35,640
its own value.

130
00:09:35,900 --> 00:09:37,640
This is the same for…

131
00:09:38,600 --> 00:09:41,580
within all your hierarchy,
those guys are classes,

132
00:09:41,780 --> 00:09:45,980
but I drew them as rounds to stress
that they are objects.

133
00:09:46,480 --> 00:09:52,640
So, every class in the hierarchy,

134
00:09:52,840 --> 00:09:58,080
and this one won't have the same
visual effect, but this class,

135
00:09:58,280 --> 00:10:06,180
that class, and this one has different
values in the instance variable

136
00:10:06,380 --> 00:10:09,160
`#Default` that they have because
they are objects.

137
00:10:10,100 --> 00:10:15,080
`BorderStyle` is an instance of
the `BorderStyle` class,

138
00:10:15,440 --> 00:10:18,660
so it has the value of the instance
variable of the metaclass.

139
00:10:19,800 --> 00:10:24,000
If you want to check,
there is a lecture on the Pharo

140
00:10:24,200 --> 00:10:30,640
MOOC on metaclasses, and this is
really interesting if you want to

141
00:10:30,840 --> 00:10:32,560
deeply understand this mechanism.

142
00:10:32,860 --> 00:10:38,420
But what you should remember is
that there is a difference between

143
00:10:38,620 --> 00:10:41,360
a shared variable and an instance
variable of the metaclass.

144
00:10:44,160 --> 00:10:55,430
There is only one shared variable
for the complete hierarchy and one

145
00:10:55,630 --> 00:10:58,550
per class of the hierarchy.

146
00:10:59,570 --> 00:11:06,630
So, this means that they have different
scopes and share semantics.

147
00:11:06,930 --> 00:11:12,270
As a conclusion, pay attention when
you modify a shared variable because

148
00:11:12,470 --> 00:11:13,650
you will impact many objects.

149
00:11:14,810 --> 00:11:20,250
What is interesting is that shared
variables can be used to perform

150
00:11:20,450 --> 00:11:23,610
different sharing optimization,
and we will present some of them

151
00:11:23,810 --> 00:11:25,190
in the following lecture.


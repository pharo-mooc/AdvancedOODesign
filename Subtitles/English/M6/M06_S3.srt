1
00:00:04,020 --> 00:00:08,400
Hello everybody, welcome to this
new lecture on double dispatch.

2
00:00:10,520 --> 00:00:14,680
This is a complement to the previous
lecture on stone, paper,

3
00:00:14,880 --> 00:00:15,640
scissors.

4
00:00:15,880 --> 00:00:20,420
Here we will see how we can add
a `die` and `dieHandle`.

5
00:00:21,560 --> 00:00:24,800
So the goal of the lecture,
this is to show how conditionals

6
00:00:25,000 --> 00:00:30,040
can be turned into extensible design
using message and double dispatch.

7
00:00:30,240 --> 00:00:34,820
This is typically the case for a
more complex situation with the

8
00:00:35,020 --> 00:00:37,880
Visitor Pattern. So let's see.

9
00:00:38,560 --> 00:00:43,360
In the previous MOOC,
we did not have the complete lecture.

10
00:00:43,560 --> 00:00:44,400
In this MOOC,

11
00:00:44,600 --> 00:00:50,620
we could have a `DieHandle` that
would contain `Die`.

12
00:00:50,820 --> 00:00:54,420
So here, for example,
I have a `DieHandle` that contains

13
00:00:54,620 --> 00:00:58,940
a `Die` with six faces and one with
ten faces.

14
00:00:59,140 --> 00:01:03,740
And then we could say to the
`DieHandle`, OK, roll,

15
00:01:03,940 --> 00:01:08,260
and it will return here a number
between 1 and 16.

16
00:01:09,900 --> 00:01:12,000
So this was an exercise in the previous
MOOC.

17
00:01:12,200 --> 00:01:12,960
It was fun.

18
00:01:13,160 --> 00:01:14,480
We strongly suggest you have a look.

19
00:01:14,860 --> 00:01:17,800
This is a six-minute video and then
there is an exercise,

20
00:01:18,000 --> 00:01:19,340
so you should have a look.

21
00:01:20,100 --> 00:01:24,820
Now the question is that in this
version, we could really write

22
00:01:25,020 --> 00:01:28,680
expressions like that,
like in the Dungeon Dragon books,

23
00:01:28,880 --> 00:01:34,360
where we could say, Oh,
you know, I have two dice of 20

24
00:01:34,560 --> 00:01:40,360
faces plus three dice of 10 faces.

25
00:01:40,860 --> 00:01:44,280
And the plus would create a handle.

26
00:01:45,000 --> 00:01:48,380
And like that, what we could do
is that we could take the Dungeon

27
00:01:48,580 --> 00:01:55,900
Dragon books and just write this
expression, put in parentheses and

28
00:01:56,100 --> 00:01:56,860
write roll.

29
00:01:57,060 --> 00:02:00,960
And then like that, we could just
play our games following what is

30
00:02:01,160 --> 00:02:01,920
written in the book.

31
00:02:02,220 --> 00:02:03,780
So that was what we did before.

32
00:02:03,980 --> 00:02:09,100
And now in this lecture,
we will change the plus here because

33
00:02:09,300 --> 00:02:12,600
before we were doing 2D.

34
00:02:12,920 --> 00:02:17,120
So this means that this 2D was returning
a `dieHandle`.

35
00:02:21,880 --> 00:02:25,020
And the plus was always between
`dieHandles`.

36
00:02:27,580 --> 00:02:31,000
And you will see that we want to
have it between dice.

37
00:02:32,340 --> 00:02:39,000
So, for example, we added new
requirements on the previous exercise.

38
00:02:39,200 --> 00:02:43,760
So here we said, Oh, you know,
why do we limit ourselves plus only

39
00:02:43,960 --> 00:02:44,720
with `dieHandle`?

40
00:02:45,740 --> 00:02:51,700
Why can't we say that I have a `Die`
with six faces and I will add another

41
00:02:51,900 --> 00:02:52,980
`Die` with six faces.

42
00:02:53,180 --> 00:03:00,500
And this guy should return me
a `dieHandle` with two dice.

43
00:03:03,620 --> 00:03:08,480
And then in that case,
I can send the message roll to this guy.

44
00:03:09,240 --> 00:03:16,880
What you see is that here,
the plus suddenly is managing also dice.

45
00:03:17,080 --> 00:03:18,680
And before, it was just `dieHandle`.

46
00:03:19,600 --> 00:03:20,360
Then we added…

47
00:03:20,700 --> 00:03:23,500
we can turn this requirement as a test.

48
00:03:23,700 --> 00:03:24,460
And this is easy.

49
00:03:24,660 --> 00:03:25,420
You know, this is the same.

50
00:03:25,620 --> 00:03:29,660
And you said, OK, this means that
we will have a `dieHandle` that

51
00:03:29,860 --> 00:03:31,000
has two dice.

52
00:03:32,040 --> 00:03:36,120
Now the requirement two is that
why do we limit ourselves?

53
00:03:36,700 --> 00:03:42,160
We want to be able to send the message
plus to a `dieHandle` with as argument

54
00:03:42,360 --> 00:03:44,620
a `Die` or the inverse.

55
00:03:44,820 --> 00:03:50,560
Why can't we just send the message
plus to a `Die` with a `dieHandle`

56
00:03:50,800 --> 00:03:51,560
as argument?

57
00:03:51,760 --> 00:03:54,080
And this is what we will do in this
lecture.

58
00:03:54,420 --> 00:03:57,340
You see, we can turn also this new
requirement as a test.

59
00:03:58,120 --> 00:03:59,300
We do it like that, like that.

60
00:04:00,060 --> 00:04:04,500
We really strongly suggest that
you do the exercise during this MOOC.

61
00:04:04,700 --> 00:04:08,720
And then you know if you succeed
or not when your tests are passing.

62
00:04:09,100 --> 00:04:13,720
So the possible solution,
this is with conditions.

63
00:04:13,920 --> 00:04:21,040
Here, what I am doing is that I'm
creating on the `Die` class a message

64
00:04:21,240 --> 00:04:26,840
plus with an element,
an argument that is either a `Die`

65
00:04:27,040 --> 00:04:27,800
or a `DieHandle`.

66
00:04:29,160 --> 00:04:30,560
And then what do I do?

67
00:04:30,760 --> 00:04:36,720
I just create a new `DieHandle`
and I add the receiver.

68
00:04:37,260 --> 00:04:42,160
And then after, I fall back on the
previous case.

69
00:04:42,360 --> 00:04:46,520
So this means that before,
I knew that if I have a `DieHandle`

70
00:04:46,980 --> 00:04:51,960
plus a `DieHandle`, I know that
it was returning a `DieHandle`.

71
00:04:53,120 --> 00:04:55,440
So here, basically, this is what
I am doing.

72
00:04:55,640 --> 00:04:59,820
I said, You know, I try two
`DieHandle`, except that it does

73
00:05:00,020 --> 00:05:00,780
not work.

74
00:05:01,420 --> 00:05:04,560
Because if I specify a `Die`,
I didn't convert it.

75
00:05:06,620 --> 00:05:09,680
So it could nearly work,
but it was not the case.

76
00:05:11,180 --> 00:05:16,920
So what I have to do,
in fact, here, I wrote it the

77
00:05:17,120 --> 00:05:17,880
traditional way.

78
00:05:18,080 --> 00:05:24,000
You know, I said, OK,
so on `DieHandle`, when I have a plus,

79
00:05:25,380 --> 00:05:29,800
I will check that my argument is
a `DieHandle`.

80
00:05:30,720 --> 00:05:33,260
If this is the case, I create a handle.

81
00:05:33,860 --> 00:05:35,160
I go over all the dice.

82
00:05:35,360 --> 00:05:37,400
I add them to this new handle.

83
00:05:37,600 --> 00:05:41,180
And then now I know that my argument
is a `DieHandle`.

84
00:05:41,420 --> 00:05:45,940
So I can get dice and then add them
to the handle.

85
00:05:46,140 --> 00:05:48,200
And I do the same in the other branch.

86
00:05:49,460 --> 00:05:52,940
This is not really nice,
but this is what we can do.

87
00:05:53,880 --> 00:05:57,320
It works for two cases,
but it does not really scale.

88
00:05:57,680 --> 00:06:01,660
So, of course, in our little toy
example, we have only `Die` and

89
00:06:01,860 --> 00:06:02,620
`DieHandle`.

90
00:06:02,820 --> 00:06:06,860
In reality, when we will work with
documents, for example,

91
00:06:07,540 --> 00:06:16,800
or with trees that represent programs,
we have 35 nodes and not two.

92
00:06:17,220 --> 00:06:22,380
So this means that you see the size
of the condition that can be really

93
00:06:22,580 --> 00:06:23,360
intractable.

94
00:06:23,560 --> 00:06:27,240
Or it can be, but it leads to designs
that are really brittle.

95
00:06:27,440 --> 00:06:33,040
So typically in Pilar,
the system that is used to create

96
00:06:33,240 --> 00:06:35,940
the slides that you are watching,
we have list, figure,

97
00:06:36,140 --> 00:06:41,300
paragraph, section, title,
text, reference, two kinds of lists,

98
00:06:41,780 --> 00:06:42,540
(code block)…

99
00:06:42,740 --> 00:06:44,600
We don't have a plus,
just a plus.

100
00:06:44,800 --> 00:06:47,820
We have rendering text,
generating HTML, generating LaTeX

101
00:06:48,020 --> 00:06:48,780
and so on.

102
00:06:48,980 --> 00:06:52,140
So this means that for each of those
guys, we have to repeat this.

103
00:06:52,340 --> 00:06:57,440
We would have to repeat this condition
for something like 35 different nodes.

104
00:06:58,680 --> 00:07:02,520
And when you do analysis of languages,
for example, what you should notice

105
00:07:02,720 --> 00:07:06,900
is that in Java, you have around
70 nodes in C++, 180.

106
00:07:07,460 --> 00:07:08,880
So it does not really scale.

107
00:07:09,300 --> 00:07:11,780
That's why the Visitor Pattern is
working well.

108
00:07:12,140 --> 00:07:15,520
And this is based on what you will
be learning in this lecture.

109
00:07:15,720 --> 00:07:17,840
So now, the solution.

110
00:07:18,980 --> 00:07:24,500
A good solution that we want to
show in this lecture is based on

111
00:07:24,700 --> 00:07:27,660
the first lecture of this MOOC that
says that sending a message is making

112
00:07:27,860 --> 00:07:28,620
a choice.

113
00:07:29,480 --> 00:07:33,480
In fact, the system will select
the correct method given the receiver.

114
00:07:33,760 --> 00:07:38,440
So this means that to select a method
based on the receiver and the argument,

115
00:07:38,640 --> 00:07:40,240
because this is what we want to
have here.

116
00:07:40,440 --> 00:07:44,260
Here, if we step back,
we want to have a `DieHandle` plus

117
00:07:44,460 --> 00:07:46,720
a `Die` working.

118
00:07:46,920 --> 00:07:53,220
We want to have a `Die` plus a
`DieHandle` that is working.

119
00:07:53,420 --> 00:08:00,160
Or we want to have a `DieHandle`
plus a `DieHandle` or a `Die` plus

120
00:08:00,360 --> 00:08:01,120
a `Die`.

121
00:08:01,460 --> 00:08:02,820
All these solutions should work.

122
00:08:03,020 --> 00:08:06,480
So this means that basically,
conceptually, this is like if we

123
00:08:06,680 --> 00:08:12,940
would have different versions of
plus that are based on the different…

124
00:08:13,140 --> 00:08:18,880
the receiver and the argument,
the configuration, you see.

125
00:08:20,000 --> 00:08:25,180
So double dispatch is made to really
select the correct methods based

126
00:08:25,380 --> 00:08:27,060
on the receiver and the argument.

127
00:08:28,040 --> 00:08:29,460
So the sketch of the solution.

128
00:08:31,760 --> 00:08:34,780
In fact, when we want to add two
elements, a `Die` or `DieHandle`,

129
00:08:36,140 --> 00:08:40,180
we will tell the argument to add
itself to the receiver.

130
00:08:40,860 --> 00:08:43,120
Because the receiver,
we know who it is.

131
00:08:43,540 --> 00:08:45,440
What we don't know, this is the
argument.

132
00:08:45,800 --> 00:08:49,060
So basically, we just have to send
a message to the argument.

133
00:08:49,620 --> 00:08:53,380
And the argument will have to have
multiple methods to handle this case.

134
00:08:54,160 --> 00:08:58,540
And this is a bit the same like
what we did in the stone paper scissors.

135
00:08:59,180 --> 00:09:02,580
Here we said, OK, when the receiver
is a `Die`, it will tell the argument

136
00:09:02,780 --> 00:09:03,820
to add itself to a `Die`.

137
00:09:04,020 --> 00:09:08,020
When the receiver is a `DieHandle`,
it will tell its argument to add

138
00:09:08,220 --> 00:09:09,500
itself to a `DieHandle`.

139
00:09:10,420 --> 00:09:11,520
Let's see how we do it.

140
00:09:11,720 --> 00:09:12,480
It's a first try.

141
00:09:12,680 --> 00:09:14,200
It will not really work,
but let's try.

142
00:09:15,200 --> 00:09:20,820
So the first thing that we can do
to add the plus in the `Die` class.

143
00:09:21,600 --> 00:09:22,800
This is we create a `DieHandle`.

144
00:09:23,540 --> 00:09:26,540
We add self and we add a `Die`.

145
00:09:27,200 --> 00:09:29,440
It does not work because this guy
can be a `DieHandle`.

146
00:09:30,640 --> 00:09:31,900
But let's see.

147
00:09:32,100 --> 00:09:33,680
Let's start like that.

148
00:09:36,810 --> 00:09:37,990
So you see, this is what I said.

149
00:09:38,190 --> 00:09:45,510
`aDie` here can be a dice or
`DieHandle`, like in this code.

150
00:09:46,610 --> 00:09:47,490
Here the plus.

151
00:09:50,530 --> 00:09:51,290
This is a `DieHandle`.

152
00:09:51,490 --> 00:09:52,530
So it does not work.

153
00:09:53,830 --> 00:09:55,290
But we can do better.

154
00:09:56,330 --> 00:10:01,090
So now we can introduce `sumWithDie`,
with `aDie`.

155
00:10:01,970 --> 00:10:10,470
We said, OK, let's make sure that
we know how to add a `Die` and a `Die`.

156
00:10:10,810 --> 00:10:11,790
So to add a `Die` and a `Die`.

157
00:10:11,990 --> 00:10:12,770
This is what we did before.

158
00:10:12,970 --> 00:10:13,730
We just create a `DieHandle`.

159
00:10:13,950 --> 00:10:17,770
We add the `Die` and we add the
parameters and its returns a

160
00:10:17,970 --> 00:10:18,730
`DieHandle`.

161
00:10:18,930 --> 00:10:19,690
So we are happy with this one.

162
00:10:20,730 --> 00:10:24,110
And now what we can just say,
we can say, Oh, you know,

163
00:10:24,490 --> 00:10:29,650
the plus, we revise it and we said,
OK, we send to the argument the

164
00:10:29,850 --> 00:10:30,610
message `sumWithDie`.

165
00:10:32,570 --> 00:10:36,290
Passing self as argument because we know,
because we are in a `Die` class,

166
00:10:36,490 --> 00:10:37,670
so self is a `Die`.

167
00:10:38,090 --> 00:10:40,370
What we don't know, this is what
is this guy.

168
00:10:40,770 --> 00:10:42,870
So this guy can be either `aDie`
or `aDieHandle`.

169
00:10:43,290 --> 00:10:45,070
So we just send this message.

170
00:10:46,210 --> 00:10:50,030
And now this case, for example,
let's look at it graphically.

171
00:10:50,250 --> 00:10:52,470
This case is working for only one case.

172
00:10:53,030 --> 00:10:53,790
This one.

173
00:10:55,270 --> 00:10:56,790
We have `aDie` plus `aDie`.

174
00:10:57,130 --> 00:11:02,950
So we send the message here plus
we know that this guy is 10,

175
00:11:03,150 --> 00:11:05,210
for example, and this one will be six.

176
00:11:05,870 --> 00:11:06,690
So we know it.

177
00:11:07,310 --> 00:11:10,950
And then it means that it will execute
because we will send `sumWithDie`

178
00:11:11,310 --> 00:11:12,070
to `aDie`.

179
00:11:12,810 --> 00:11:14,870
So we look inside the class `die`.

180
00:11:15,070 --> 00:11:15,830
OK, we have `sumWithDie`.

181
00:11:16,250 --> 00:11:17,010
This is this one.

182
00:11:17,210 --> 00:11:18,030
So this is OK.

183
00:11:18,290 --> 00:11:19,050
It works.

184
00:11:19,250 --> 00:11:22,230
So now the key question,
this is how can we make it work

185
00:11:22,430 --> 00:11:26,050
so that we have `aDie` plus
`aDieHandle`?

186
00:11:29,690 --> 00:11:33,290
Because with that case here,
it will not work because it will

187
00:11:33,490 --> 00:11:39,290
send the message `sumWithDie` to

188
00:11:39,490 --> 00:11:40,250
that guy.

189
00:11:41,150 --> 00:11:44,350
So, in fact, what we should do is
that we should implement these methods.

190
00:11:44,550 --> 00:11:51,770
To support this message,
when the argument is not `aDie`

191
00:11:51,970 --> 00:11:53,370
but `aDieHandle`, what do we do?

192
00:11:53,570 --> 00:11:55,690
We define `sumWithDie` in a`DieHandle`.

193
00:11:56,670 --> 00:11:57,650
So now this is clear.

194
00:11:57,850 --> 00:11:59,570
We know that we have as argument `aDie`.

195
00:11:59,810 --> 00:12:01,290
So we create `aDie` handle.

196
00:12:03,170 --> 00:12:09,450
We will copy all the dice of the
receiver inside this new handle.

197
00:12:09,890 --> 00:12:13,810
And then at the end, we just add
`aDie` to the new handle because

198
00:12:14,010 --> 00:12:16,010
this is done and we know that this
is this one.

199
00:12:16,230 --> 00:12:16,990
So we are done.

200
00:12:17,430 --> 00:12:18,550
So let's look at it now.

201
00:12:18,750 --> 00:12:19,510
Graphically.

202
00:12:19,830 --> 00:12:22,730
So imagine I have `aDie` here and
I have `aDieHandle`.

203
00:12:23,310 --> 00:12:24,790
I send the message plus.

204
00:12:25,410 --> 00:12:26,770
Now it starts to be interesting.

205
00:12:27,350 --> 00:12:29,070
So I send the message plus.

206
00:12:29,270 --> 00:12:30,030
This is `aDie`.

207
00:12:30,230 --> 00:12:33,470
So I looked for the method in this
class.

208
00:12:34,330 --> 00:12:36,150
OK, I have the message plus.

209
00:12:37,070 --> 00:12:39,290
So this is this method that is executed.

210
00:12:39,730 --> 00:12:40,490
So self.

211
00:12:41,130 --> 00:12:44,190
This is `aDie` six.

212
00:12:45,910 --> 00:12:47,270
This is this guy.

213
00:12:47,470 --> 00:12:53,210
So I send the message sum to an
instance of `DieHandle`.

214
00:12:54,370 --> 00:12:56,110
So I will look for this method.

215
00:12:56,810 --> 00:12:59,550
Basically, this is this method here
that will be executed.

216
00:13:00,070 --> 00:13:03,090
And I do the correct things and
I return it.

217
00:13:04,230 --> 00:13:09,190
So you see, so it worked well when
I have `aDie` as receiver,

218
00:13:10,810 --> 00:13:13,450
and as argument, I can have `aDie`
or `aDieHandle`.

219
00:13:14,830 --> 00:13:19,510
So what we see is that we have two
kinds of messages.

220
00:13:19,710 --> 00:13:24,690
We have the plus that is selecting
first a class and then `sumWithDie`

221
00:13:25,210 --> 00:13:30,430
that is selecting the message that
will be executed on the argument.

222
00:13:32,410 --> 00:13:38,710
OK, now we want our solution to
also accept receiver as `dieHandle`.

223
00:13:39,570 --> 00:13:40,550
What should we do?

224
00:13:40,750 --> 00:13:42,690
We will do the same for `dieHandle`.

225
00:13:43,050 --> 00:13:47,530
In fact, this is just the repetition
on another case.

226
00:13:48,210 --> 00:13:51,810
So what we will do is that we define
the method plus on the class

227
00:13:52,010 --> 00:13:52,770
`DieHandle`.

228
00:13:53,070 --> 00:13:58,090
And now we know we will set
`sumWithHandle` because we are in

229
00:13:58,290 --> 00:14:00,670
the class handle and we specify self.

230
00:14:00,870 --> 00:14:03,950
In fact, we do exactly the same
as what we did on the `Die` class,

231
00:14:04,150 --> 00:14:05,750
but we do it on the `DieHandle` class.

232
00:14:05,950 --> 00:14:08,670
And then we will have the support for…

233
00:14:08,870 --> 00:14:13,450
We will define this method on two
classes, one for `Die` and one for

234
00:14:13,650 --> 00:14:14,410
`DieHandle`.

235
00:14:14,610 --> 00:14:17,430
And like that, we will be able to
handle all the case.

236
00:14:17,850 --> 00:14:23,510
We will be able in this particular
case to handle the sum of two

237
00:14:23,710 --> 00:14:26,150
die handles or one die handle
and a die.

238
00:14:26,990 --> 00:14:28,430
Let's look at it.

239
00:14:29,730 --> 00:14:32,770
So on the class `DieHandle`,
to sum `aDieHandle`,

240
00:14:33,010 --> 00:14:33,770
this is easy.

241
00:14:33,970 --> 00:14:34,850
I create a new die handle.

242
00:14:36,150 --> 00:14:40,410
I go over all the `die` that are
in the receiver.

243
00:14:40,770 --> 00:14:45,310
I add them into this new die handle
and then I take the argument.

244
00:14:45,610 --> 00:14:50,070
I take the dice of the argument
and I do the same and I return the

245
00:14:50,270 --> 00:14:51,030
handle.

246
00:14:51,230 --> 00:14:51,990
By the way, this is a functional
designer.

247
00:14:52,350 --> 00:14:58,470
So this means that if you have
`aDieHandle` plus `aDieHandle`…

248
00:15:01,180 --> 00:15:06,580
So if let's say this is 10,
10, 10, and here, this is 6 and 10.

249
00:15:07,600 --> 00:15:12,700
When I do plus, I will return a
new `dieHandle` with 10,

250
00:15:13,000 --> 00:15:16,720
6, 10, 10, 10.

251
00:15:18,930 --> 00:15:22,110
So that's why I create this new
die handle.

252
00:15:22,690 --> 00:15:27,330
Now on the class `Die`,
I will define the `sumWithHandle`.

253
00:15:28,810 --> 00:15:31,630
And now I know that I have `aDieHandle`.

254
00:15:32,110 --> 00:15:33,090
So I will create  a `DieHandle`.

255
00:15:34,010 --> 00:15:38,170
I will sum  the die of
 the die handle into

256
00:15:38,370 --> 00:15:40,270
this new handle.

257
00:15:40,610 --> 00:15:43,150
And I add self because I am on the
class `Die`.

258
00:15:43,350 --> 00:15:44,350
So I just add a new die.

259
00:15:44,710 --> 00:15:47,830
So now you have the complete solution.

260
00:15:48,510 --> 00:15:49,970
Here we manage the four cases.

261
00:15:50,290 --> 00:15:51,750
Let's play a bit with that.

262
00:15:52,230 --> 00:15:58,200
If I have `aDieHandle` plus `aDie`,
what happens?

263
00:15:59,960 --> 00:16:03,080
First, the plus will select in the
class `DieHandle`.

264
00:16:03,420 --> 00:16:07,520
So this means that this is this
one that will be selected.

265
00:16:07,880 --> 00:16:10,100
So I will execute first this case.

266
00:16:10,640 --> 00:16:12,100
And the argument here is `aDie`.

267
00:16:12,460 --> 00:16:14,040
So this means that I will have `aDie`
`sumWithHandle`.

268
00:16:15,000 --> 00:16:16,800
So in that case, I will go here.

269
00:16:17,000 --> 00:16:19,880
I will go here because I have aDicable.

270
00:16:20,320 --> 00:16:21,820
So I don't know if this is `aDie`
or `aDieHandle`.

271
00:16:22,240 --> 00:16:24,240
But in my case here, I know that
this is `aDie`.

272
00:16:24,440 --> 00:16:28,520
So suddenly I go here and then I
execute this code.

273
00:16:28,920 --> 00:16:31,300
Now let's do another one.

274
00:16:32,580 --> 00:16:36,360
So imagine that you have `aDieHandle`
plus `aDieHandle`.

275
00:16:38,340 --> 00:16:39,260
That's easy.

276
00:16:40,000 --> 00:16:41,200
The plus is what?

277
00:16:41,460 --> 00:16:42,360
This is this one.

278
00:16:42,700 --> 00:16:43,680
We go here.

279
00:16:44,580 --> 00:16:47,820
This argument aDicable is this guy.

280
00:16:48,300 --> 00:16:53,360
So I will do `sumWithHandle` on
the `DieHandle` class.

281
00:16:53,560 --> 00:16:55,440
So `sumWithHandle` on the `DieHandle`
class.

282
00:16:55,640 --> 00:16:56,400
This is this one.

283
00:16:56,700 --> 00:16:57,720
And we do that.

284
00:16:58,240 --> 00:16:59,340
Now let's continue.

285
00:17:00,100 --> 00:17:04,480
So imagine that we have `aDie`
plus `aDie`.

286
00:17:05,660 --> 00:17:08,320
So if I have `aDie` plus `aDie`,
the plus is which one?

287
00:17:08,520 --> 00:17:09,280
This is this one.

288
00:17:09,480 --> 00:17:11,160
So it will select this one.

289
00:17:11,640 --> 00:17:12,400
I will look.

290
00:17:12,820 --> 00:17:13,760
So this is the method.

291
00:17:14,180 --> 00:17:17,340
I know that `die`, this is the argument
here.

292
00:17:17,980 --> 00:17:20,180
So that would be `SumWithdie` on `aDie`.

293
00:17:21,600 --> 00:17:23,100
This is this method.

294
00:17:24,800 --> 00:17:27,040
Now what do we have that is missing?

295
00:17:27,240 --> 00:17:28,600
We have `aDie` plus `aDieHandle`.

296
00:17:31,060 --> 00:17:31,820
OK.

297
00:17:32,020 --> 00:17:33,640
So let's erase that.

298
00:17:34,900 --> 00:17:37,140
So `aDie`, the plus is what?

299
00:17:37,360 --> 00:17:38,320
This is sent to a `Die`.

300
00:17:38,580 --> 00:17:40,380
So this will be this one again.

301
00:17:41,060 --> 00:17:42,340
Now I know that this is `aDieHandle`.

302
00:17:43,720 --> 00:17:45,220
So here I will have `aDieHandle`.

303
00:17:46,200 --> 00:17:48,020
So I will send `sumWithDie` to
`aDieHandle`.

304
00:17:48,520 --> 00:17:49,460
Sum to `aDieHandle`.

305
00:17:49,860 --> 00:17:50,620
So the `sumWithDie`.

306
00:17:51,880 --> 00:17:53,640
So this means I will jump here.

307
00:17:54,940 --> 00:18:00,920
What you see is that we have a first
dispatch, the plus, that select,

308
00:18:01,120 --> 00:18:02,900
this plus or this plus.

309
00:18:04,000 --> 00:18:10,520
Then we have a second dispatch here
and there that will select this

310
00:18:10,720 --> 00:18:14,980
version of `SumWithdie` or this
version of `sumWithHandle`.

311
00:18:16,840 --> 00:18:17,780
Double dispatch.

312
00:18:17,980 --> 00:18:20,220
So the two here and two here.

313
00:18:20,520 --> 00:18:23,200
So what you see is that each time
you send a message plus,

314
00:18:23,580 --> 00:18:27,360
the system selected the correct
methods on each class.

315
00:18:27,680 --> 00:18:32,160
And then after internally sending
another message to the argument

316
00:18:32,360 --> 00:18:35,280
was selecting the correct methods
in the different classes.

317
00:18:35,960 --> 00:18:39,160
In fact, if we step back,
we apply two times the same principle.

318
00:18:39,380 --> 00:18:46,220
We send a message and the system
selected the correct method for me.

319
00:18:47,160 --> 00:18:52,000
So sending a message to an argument
was a way to select again between

320
00:18:52,200 --> 00:18:54,020
different methods on different classes.

321
00:18:54,800 --> 00:19:00,100
So as a conclusion, double dispatch,
sometimes it can be difficult to grasp.

322
00:19:00,560 --> 00:19:03,740
You have to try to do it,
to follow what's happened,

323
00:19:04,200 --> 00:19:05,100
do the exercise.

324
00:19:05,460 --> 00:19:06,960
But this is really powerful.

325
00:19:07,840 --> 00:19:12,920
Sometimes you don't want to use
too much because it can be confusing.

326
00:19:13,120 --> 00:19:17,180
But you have certain cases like,
for example, compiler or things

327
00:19:17,380 --> 00:19:22,200
like that or document or when you
have a composite structure,

328
00:19:22,400 --> 00:19:26,180
you will see the composite pattern soon, 
a composite structure

329
00:19:26,380 --> 00:19:29,400
with a lot of nodes where you have
to do special treatment for each

330
00:19:29,600 --> 00:19:30,360
of the nodes.

331
00:19:30,560 --> 00:19:31,980
And you have to do different special
treatments.

332
00:19:32,660 --> 00:19:36,820
Then you will see that this is really
a call for the design pattern.

333
00:19:37,020 --> 00:19:38,560
And the Design Pattern Visitor,

334
00:19:38,760 --> 00:19:40,640
it is based on this double dispatch.

335
00:19:41,100 --> 00:19:44,580
And to understand really clearly
the Visitor Design Pattern,

336
00:19:45,040 --> 00:19:46,360
you have to understand double dispatch.


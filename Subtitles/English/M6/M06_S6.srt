1
00:00:04,590 --> 00:00:05,460
- Hello, everybody.

2
00:00:06,180 --> 00:00:09,270
I just want to come back in this
lecture to the previous lecture

3
00:00:09,470 --> 00:00:12,630
on Stone Paper Scissors,
and I would like to discuss a bit

4
00:00:12,830 --> 00:00:13,590
the case of the results.

5
00:00:13,800 --> 00:00:18,330
You will see this is a very small
lecture, but it can help you in

6
00:00:18,530 --> 00:00:19,350
some situations.

7
00:00:19,860 --> 00:00:21,780
This is to think a bit about results.

8
00:00:22,170 --> 00:00:25,680
What are the results at the end
of the day, and what do we do with them?

9
00:00:26,340 --> 00:00:30,120
If you remember, in the previous
lecture, we took a Stone,

10
00:00:30,320 --> 00:00:35,370
we were fighting a Stone against a Paper,
and it returned Paper.

11
00:00:35,730 --> 00:00:40,530
We had this kind of design,
where we had one abstract class,

12
00:00:41,070 --> 00:00:48,030
we were using Double Dispatch,
and each class defined a `vs:` method,

13
00:00:48,230 --> 00:00:52,350
and they all defined different methods
to handle the case.

14
00:00:53,370 --> 00:00:55,520
It was working well, and it was fun.

15
00:00:55,720 --> 00:00:56,700
This is the context.

16
00:00:56,900 --> 00:01:01,860
Now the question was for me,
what should be the result of `vs:`?

17
00:01:02,060 --> 00:01:11,220
So, when I do `Paper new vs:
Stone new`, what is the result?

18
00:01:12,450 --> 00:01:14,680
We said, "Oh, yes, we return paper".

19
00:01:14,880 --> 00:01:15,640
Why not?

20
00:01:15,840 --> 00:01:16,600
But what else?

21
00:01:16,800 --> 00:01:18,140
Could we return something else?

22
00:01:18,340 --> 00:01:22,320
And what are the consequences of
those choices?

23
00:01:24,000 --> 00:01:25,400
We could return numbers.

24
00:01:25,830 --> 00:01:27,150
We could have said, "Oh,
easy!

25
00:01:28,290 --> 00:01:33,960
I will return minus 1 when it fails,
and 0 when there is a draw,

26
00:01:34,160 --> 00:01:36,180
and 1 when there is a success.

27
00:01:36,380 --> 00:01:42,780
Like that, it's easier to sum up." Well,
except that it is not good because

28
00:01:43,410 --> 00:01:49,700
I should also return minus 1 when
Paper is the argument.

29
00:01:49,900 --> 00:01:51,930
So, what does it mean to be minus 1?

30
00:01:52,470 --> 00:01:58,290
In fact, if I do `Paper new vs:
Stone`, it should return the same

31
00:01:58,490 --> 00:02:00,610
number because it's the same case.

32
00:02:00,810 --> 00:02:04,380
So, we decided to return symbols
because, like that, in the slide,

33
00:02:04,580 --> 00:02:06,180
you could really follow the lecture.

34
00:02:06,380 --> 00:02:07,860
But what does it mean?

35
00:02:08,060 --> 00:02:11,760
It means that if I want to do something
with the result of the computation,

36
00:02:12,210 --> 00:02:19,700
then I have to do something like that:
`aPlayer vs: anotherPlay = #draw`.

37
00:02:19,900 --> 00:02:24,100
`IfTrue`, then I will do something.

38
00:02:25,000 --> 00:02:30,010
This means that everywhere we are
using `vs:`, we have somehow to

39
00:02:30,210 --> 00:02:31,150
interpret this.

40
00:02:31,350 --> 00:02:35,260
Imagine that you want to count how
many times the guy is winning,

41
00:02:35,460 --> 00:02:37,420
we will have to count another counter.

42
00:02:37,620 --> 00:02:40,810
And then we were thinking,
"Okay, maybe we could do something else.

43
00:02:41,010 --> 00:02:45,040
We could also have an API where
we will pass Rocks." We said,

44
00:02:45,240 --> 00:02:49,960
"Okay, when I do the battle,
I will say `onDraw` and you should

45
00:02:50,160 --> 00:02:52,110
increment `Draw` on `Receiver`.

46
00:02:52,310 --> 00:02:55,660
The game should increment the receiver
and things like that.

47
00:02:55,860 --> 00:02:57,670
You know, we could implement it
like that.

48
00:02:57,870 --> 00:03:01,450
We could say, "Okay, this is easy,
we can do a value here and things

49
00:03:01,650 --> 00:03:02,410
like that on `playAgainstStone`".

50
00:03:03,220 --> 00:03:05,740
On `playAgainstStone`,
for example, we said,

51
00:03:05,940 --> 00:03:10,030
"Okay, this is Paper that plays
against Stone, so the winner will

52
00:03:10,230 --> 00:03:13,720
do something", except that it does
not look nice because you don't

53
00:03:13,920 --> 00:03:18,050
want to have four arguments like that.

54
00:03:18,590 --> 00:03:21,730
This is not satisfactory either
from that perspective.

55
00:03:22,700 --> 00:03:25,970
I'm not fond of this solution and
I'm not fond of the other solution

56
00:03:26,170 --> 00:03:26,930
either.

57
00:03:27,680 --> 00:03:30,710
In fact, I'm not fond of any solution
from that perspective.

58
00:03:31,540 --> 00:03:35,470
But what we could also do is we
could say, "Maybe we should have

59
00:03:35,670 --> 00:03:36,430
a result handler".

60
00:03:36,630 --> 00:03:41,230
This is an object that will know
how to do things.

61
00:03:42,130 --> 00:03:43,600
I prefer this solution.

62
00:03:43,800 --> 00:03:47,740
So here, I could say,
"`Paper new vs: Paper new` and I

63
00:03:47,940 --> 00:03:48,700
give you `aResultHandler`.

64
00:03:49,180 --> 00:03:54,460
This is a guy who knows how to do
something and in the `Paper >>

65
00:03:54,660 --> 00:03:57,520
playAgainstStone`, for example,
I know that the Paper is winning

66
00:03:57,720 --> 00:03:58,480
so I would say, "A result!

67
00:03:59,110 --> 00:04:03,550
Please configure yourself so that
you know that the Paper has won".

68
00:04:04,930 --> 00:04:08,800
To me, this solution feels more
like a "Do not ask, tell".

69
00:04:09,850 --> 00:04:14,050
I'm saying to the result handler,
"Please do something".

70
00:04:14,710 --> 00:04:19,330
Like that, I'm not forced to ask
myself what I should do and things

71
00:04:19,530 --> 00:04:20,290
like that.

72
00:04:20,490 --> 00:04:22,150
And from that perspective,
we could have different result handlers.

73
00:04:22,690 --> 00:04:28,690
We could have one that just accumulates
results and others that do statistics

74
00:04:28,890 --> 00:04:29,870
or things like that.

75
00:04:30,070 --> 00:04:36,160
So, what I suggest is to implement
the Stone Paper Scissors and play

76
00:04:36,360 --> 00:04:37,540
with those kinds of things.

77
00:04:37,840 --> 00:04:42,640
Try to educate your test on design
and see what the possibilities are.

78
00:04:42,840 --> 00:04:47,200
Now, what I learned during this
exercise is that we should also

79
00:04:47,400 --> 00:04:49,240
often focus on the client.

80
00:04:49,440 --> 00:04:54,460
So, this means that we design something,
but we should not design it in the air.

81
00:04:54,660 --> 00:04:58,630
We should design it because we have
a scenario and that we have a user.

82
00:04:58,830 --> 00:05:03,460
And the way the user uses us will
have an impact on the design.

83
00:05:03,700 --> 00:05:07,030
In general, you don't have a design
that will solve all the solutions.

84
00:05:07,230 --> 00:05:12,220
You have one design that solves
a given interaction with a client

85
00:05:12,420 --> 00:05:16,630
of your program and maybe you will
have another client and then you

86
00:05:16,830 --> 00:05:20,110
will have to adapt your design to
this new client.

87
00:05:20,310 --> 00:05:23,020
And this is what I learned while
doing this exercise.

88
00:05:23,220 --> 00:05:25,060
So, I really encourage you to do that.

89
00:05:27,000 --> 00:05:31,710
If we step back, from my perspective,
Symbols look better than returning

90
00:05:31,910 --> 00:05:32,670
numbers.

91
00:05:32,870 --> 00:05:35,730
But there are some other cases where
numbers can be better.

92
00:05:35,930 --> 00:05:41,970
So, creating result handlers can
be heavy, but this can be interesting.

93
00:05:42,570 --> 00:05:45,600
What is interesting is that the
context and the scenario should

94
00:05:45,800 --> 00:05:50,910
tell you where you want to invest
and what is worth from the

95
00:05:51,110 --> 00:05:51,920
reuse perspective.

96
00:05:52,380 --> 00:05:56,490
In general, you should not also
do just good design for good design,

97
00:05:56,690 --> 00:05:58,170
but good design for a reason.


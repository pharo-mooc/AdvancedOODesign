1
00:00:04,340 --> 00:00:05,100
- Hello!

2
00:00:05,440 --> 00:00:07,600
In this lecture, we'll discuss something
really interesting.

3
00:00:07,800 --> 00:00:12,700
This is a Visitor Design Pattern,
and this is one of my favorite ones.

4
00:00:13,800 --> 00:00:18,060
So the goal of this lecture is to
start by studying some examples

5
00:00:18,260 --> 00:00:20,860
to motivate the need for this design
pattern.

6
00:00:21,340 --> 00:00:25,380
Then we will focus on the explanation
of this specific design pattern.

7
00:00:26,000 --> 00:00:29,620
And finally, we will discuss some
pros and cons of it.

8
00:00:30,020 --> 00:00:31,600
So let's start with a simple example.

9
00:00:32,500 --> 00:00:35,960
Imagine we want to represent,
to design a system, a simple

10
00:00:36,160 --> 00:00:40,280
mathematical system, in which we
reified some ‘Plus‘.

11
00:00:40,660 --> 00:00:42,560
So here you have the ‘Plus‘ class.

12
00:00:43,260 --> 00:00:47,140
And when you have the ‘Plus‘,
you have two operands.

13
00:00:47,620 --> 00:00:49,580
You have the left one and the right one.

14
00:00:49,860 --> 00:00:55,400
As you saw in the code there,
we reified everything.

15
00:00:56,360 --> 00:00:57,680
So everything is reified.

16
00:00:57,880 --> 00:00:58,640
OK.

17
00:00:59,400 --> 00:01:02,340
In Pharo, we could have done something
simpler.

18
00:01:02,580 --> 00:01:08,060
We could have not wrapped numbers,
because this is possible in Pharo

19
00:01:08,260 --> 00:01:10,460
to add some method on existing classes.

20
00:01:11,700 --> 00:01:16,720
So, for example, we could have
implemented our own method directly

21
00:01:16,920 --> 00:01:18,900
on the ‘Number‘ class of Pharo.

22
00:01:19,220 --> 00:01:22,880
But this is just a parenthesis,
we will not do that, and we will

23
00:01:23,080 --> 00:01:26,280
continue with the first version
in the following of this lecture.

24
00:01:27,760 --> 00:01:32,460
To represent this kind of expression,
what we do is we use a Composite

25
00:01:32,660 --> 00:01:33,420
Design Pattern.

26
00:01:33,700 --> 00:01:36,960
So this is something that you already
saw in a previous lecture.

27
00:01:37,660 --> 00:01:43,180
And here, what we can see in this
example, we have the expression

28
00:01:43,380 --> 00:01:44,220
abstract class.

29
00:01:45,160 --> 00:01:49,300
And we only have one kind of
leaf, the ‘Number‘.

30
00:01:51,160 --> 00:01:56,480
And then we have a composite structure
there and two recursions.

31
00:01:57,380 --> 00:02:01,480
So an operation is composed of a
left expression and a right expression.

32
00:02:02,880 --> 00:02:06,340
And there are two kinds of operations
that are supported in this design,

33
00:02:06,540 --> 00:02:07,480
‘Plus‘ and ‘Times‘.

34
00:02:08,660 --> 00:02:10,020
So let's see some examples.

35
00:02:10,720 --> 00:02:15,600
For example, if I want to represent
the value one, the number one in

36
00:02:15,800 --> 00:02:19,640
my system, what I will do is I will
do ‘Number value: 1‘.

37
00:02:19,840 --> 00:02:23,080
So this is a class method that I
send to the class, value.

38
00:02:23,980 --> 00:02:26,520
And like that, I can wrap the number
one.

39
00:02:27,100 --> 00:02:31,880
If I want to represent this expression
there, three times two,

40
00:02:32,260 --> 00:02:38,780
what I can do is I can use the message
left, right, and send to the class

41
00:02:38,980 --> 00:02:39,740
‘Times‘.

42
00:02:39,940 --> 00:02:44,320
And then I can fix the left operand
and the right operand.

43
00:02:44,520 --> 00:02:47,640
The same here for a more complex
expression.

44
00:02:48,280 --> 00:02:49,480
So this is a ‘Plus‘.

45
00:02:50,100 --> 00:02:54,420
On the left, there is only one,
and on the right, there is a ‘Times‘

46
00:02:54,620 --> 00:02:57,920
with three on the left and two on
the right.

47
00:02:58,800 --> 00:03:03,300
OK, so we understood the model,
the design of the model,

48
00:03:03,500 --> 00:03:05,800
which is a Composite,
a regular Composite Design Pattern

49
00:03:06,000 --> 00:03:07,760
to represent some mathematical
expressions.

50
00:03:08,780 --> 00:03:11,220
So what do we want to do with this
model?

51
00:03:11,420 --> 00:03:15,100
We want to implement two different
operations.

52
00:03:16,100 --> 00:03:17,840
So the first one is Evaluation.

53
00:03:18,320 --> 00:03:23,700
So I would like to be able to evaluate
some mathematical expressions.

54
00:03:23,940 --> 00:03:27,300
So, for example, if I have this
kind of mathematical expression,

55
00:03:27,500 --> 00:03:29,860
I would like to obtain seven.

56
00:03:31,360 --> 00:03:33,760
And I want to be able to print them.

57
00:03:34,440 --> 00:03:41,800
So to print them in a Polish notation,
it means that we first print the

58
00:03:42,000 --> 00:03:42,760
operation.

59
00:03:42,960 --> 00:03:45,920
So here, this is ‘Plus‘,
and here I have the left operand

60
00:03:46,120 --> 00:03:48,180
and then the right operand.

61
00:03:48,500 --> 00:03:50,220
And here, this is another expression.

62
00:03:50,420 --> 00:03:55,300
So I have the ‘Times‘,
and here I have the left operand,

63
00:03:55,500 --> 00:03:57,200
and here the right operand.

64
00:03:58,060 --> 00:04:01,500
So this is a specific notation for
mathematical expression.

65
00:04:01,700 --> 00:04:04,300
So how can we implement these two
operations?

66
00:04:04,860 --> 00:04:09,680
First of all, first design.
What I could do is I could add some

67
00:04:09,880 --> 00:04:12,980
specific methods in the whole hierarchy
of the composite.

68
00:04:14,160 --> 00:04:21,100
So here we introduce the ‘evaluate‘
message in all classes of the composite.

69
00:04:21,740 --> 00:04:24,840
So we have an ‘evaluate‘ in ‘Number‘,
‘evaluate‘ in ‘Plus‘,

70
00:04:25,040 --> 00:04:26,540
and ‘evaluate‘ in ‘Times‘.

71
00:04:27,160 --> 00:04:31,740
Then we introduce another message,
‘print‘, for the second operation

72
00:04:31,940 --> 00:04:33,260
in all classes also.

73
00:04:33,820 --> 00:04:36,980
So this first design,
if we look at the implementation of it,

74
00:04:37,180 --> 00:04:42,440
for example, evaluating a ‘Number‘
consists in just returning the value

75
00:04:42,640 --> 00:04:43,400
of the number.

76
00:04:43,780 --> 00:04:49,220
But evaluating a ‘Plus‘ expression
means that I need to evaluate the

77
00:04:49,420 --> 00:04:53,360
left operand plus the right operand.

78
00:04:53,560 --> 00:04:54,380
OK.

79
00:04:55,640 --> 00:04:58,460
And then for the ‘print‘,
if I need to print a ‘Number‘,

80
00:04:58,660 --> 00:05:03,440
I just compute the string representation
of the value, of the number,

81
00:05:03,640 --> 00:05:06,200
And then, etc. 
For the Plus.

82
00:05:07,100 --> 00:05:09,380
So what can we say about this design?

83
00:05:09,980 --> 00:05:13,560
So first of all, some operations
require a stack.

84
00:05:13,820 --> 00:05:19,200
So it means that if I need to,
for example, print the expression

85
00:05:19,400 --> 00:05:24,260
in a different form, for example,
instead of printing in Polish notation,

86
00:05:24,460 --> 00:05:29,980
I could directly print an expression
like that, 3 + 2, and this is called

87
00:05:30,180 --> 00:05:33,840
the infix form, to represent some
mathematical operation.

88
00:05:34,700 --> 00:05:36,220
And for that, I need a stack.

89
00:05:36,740 --> 00:05:40,020
And the question is, where should
I put this stack?

90
00:05:40,940 --> 00:05:42,480
Where should I define this state?

91
00:05:43,820 --> 00:05:49,480
I can declare a stack directly in
the domain, in the composite,

92
00:05:50,160 --> 00:05:54,460
but this is strange because the
stack will only be used when I print.

93
00:05:55,800 --> 00:05:59,140
So this is not really nice from
the design point of view.

94
00:06:01,030 --> 00:06:05,590
And it will lead to mix the
states of operations,

95
00:06:06,170 --> 00:06:10,370
here printing, and the state of
the items themselves, so it means

96
00:06:10,570 --> 00:06:15,630
the domain, the mathematical elements,
so ‘Number‘, ‘Plus‘, ‘Times‘,

97
00:06:15,830 --> 00:06:16,590
etc.

98
00:06:17,130 --> 00:06:20,230
So this is not good at all from
the design point of view of mixing

99
00:06:20,430 --> 00:06:21,710
these two kinds of states.

100
00:06:24,740 --> 00:06:27,600
And if we look at a bigger system,
a real system, for example,

101
00:06:27,800 --> 00:06:29,740
the Pillar Pharo library.

102
00:06:30,680 --> 00:06:34,880
So the domain contains about 50
classes and it represents some document

103
00:06:35,080 --> 00:06:35,840
models.

104
00:06:36,040 --> 00:06:39,140
You remember, titles,
headers, paragraphs, sections,

105
00:06:39,340 --> 00:06:40,100
etc.

106
00:06:40,300 --> 00:06:43,580
And then we have different operations
supported on this model.

107
00:06:44,360 --> 00:06:47,820
We have exporting to LaTeX,
exporting to HTML, Beamer,

108
00:06:48,740 --> 00:06:50,500
ASCII, Markdown, etc.

109
00:06:51,820 --> 00:06:54,740
And we have some code checkers,
etc.

110
00:06:55,080 --> 00:07:00,580
So a lot of different operations
are supported on those 50 classes

111
00:07:00,780 --> 00:07:02,300
that represent the model of a document.

112
00:07:03,500 --> 00:07:06,740
So you can imagine that we have
a lot of states that are specific

113
00:07:06,940 --> 00:07:10,720
to the LaTeX exporter,
for example, and mixing all of that

114
00:07:10,920 --> 00:07:13,040
in the domain classes will not be nice.

115
00:07:13,860 --> 00:07:14,700
So what can we do?

116
00:07:15,460 --> 00:07:18,380
First of all, the conclusion of
this first design is mixing everything

117
00:07:18,580 --> 00:07:19,420
in the domain classes.

118
00:07:20,100 --> 00:07:22,580
So it blows up the class API.

119
00:07:22,780 --> 00:07:26,880
So it means that all states of all
operations plus the state of the

120
00:07:27,080 --> 00:07:29,460
domain elements are mixed inside
the same classes.

121
00:07:29,680 --> 00:07:31,560
So we are mixing some concerns.

122
00:07:32,540 --> 00:07:36,540
Then this is a non-modular or not
well-modularized system.

123
00:07:37,340 --> 00:07:39,320
And then it prevents some extension.

124
00:07:39,520 --> 00:07:40,720
So it means that this is difficult,

125
00:07:41,420 --> 00:07:44,380
each time we want to add a new kind
of operation, we need to change

126
00:07:44,580 --> 00:07:45,340
the domain model.

127
00:07:46,320 --> 00:07:48,860
If it is a model that comes from
a third-party library,

128
00:07:49,060 --> 00:07:51,940
this is difficult to modify it or
to extend it.

129
00:07:52,140 --> 00:07:54,400
It depends on the language we are using.

130
00:07:55,380 --> 00:07:58,000
So this is the essence of the Visitor
design pattern.

131
00:07:58,200 --> 00:08:00,580
This is why it is needed.

132
00:08:01,280 --> 00:08:05,900
So a Visitor is something that
represents an operation.

133
00:08:06,760 --> 00:08:09,520
It decouples this operation from
the domain objects.

134
00:08:09,840 --> 00:08:13,140
So we have the domain objects on
one side and we have the operation

135
00:08:13,340 --> 00:08:15,060
we want to apply to these domain
objects.

136
00:08:15,300 --> 00:08:17,020
And there are a lot of objects in
this domain.

137
00:08:18,340 --> 00:08:19,680
It supports modularity.

138
00:08:19,880 --> 00:08:23,600
It means that we can package separately
the Visitor, the operation to evaluate

139
00:08:23,800 --> 00:08:26,840
from the domain of the mathematical
expression.

140
00:08:28,480 --> 00:08:29,920
And it supports extensions.

141
00:08:30,120 --> 00:08:33,980
So it means that we can provide
new operations on the same model.

142
00:08:34,180 --> 00:08:38,060
This is without changing the domain
objects.

143
00:08:39,480 --> 00:08:42,400
So this is the essence of the Visitor
design pattern.

144
00:08:43,240 --> 00:08:48,460
So we have the ‘Domain‘ model on
one side, here it is on the right,

145
00:08:48,860 --> 00:08:51,600
and we have the ‘Visitor‘ on the
left side.

146
00:08:52,580 --> 00:08:58,360
And if we look at it,
this is a composite design pattern,

147
00:08:58,560 --> 00:08:59,600
it does not change.

148
00:09:01,780 --> 00:09:05,300
We have the recursions that are there.

149
00:09:06,400 --> 00:09:08,680
An operation is composed of expressions.

150
00:09:10,840 --> 00:09:16,620
And then, in the ‘Visitor‘ package,
we have two kinds of visitors.

151
00:09:17,280 --> 00:09:19,720
In fact, in this example,
we have three visitors,

152
00:09:20,700 --> 00:09:25,080
an Evaluator, so it can evaluate
an expression to compute its value,

153
00:09:25,280 --> 00:09:28,080
a Printer, and an InfixPrinter.

154
00:09:29,620 --> 00:09:35,380
So here it can print the expression
in Polish notation, and here in

155
00:09:35,580 --> 00:09:36,960
infix notation using a stack.

156
00:09:37,260 --> 00:09:40,600
And the stack is well-defined and
well-modularized in the Printer.

157
00:09:44,950 --> 00:09:48,610
So what are the key points of the
Visitor design pattern?

158
00:09:49,750 --> 00:09:52,770
It requires a structure to operate on.

159
00:09:53,150 --> 00:09:56,070
So a Visitor must be applied on a Domain.

160
00:09:56,270 --> 00:09:59,950
And this Domain should be a
pre-structure.

161
00:10:00,630 --> 00:10:01,910
So usually, this is a Composite.

162
00:10:03,450 --> 00:10:08,270
Then it performs different actions
based on different kinds of elements.

163
00:10:08,470 --> 00:10:11,430
So it means that a Visitor,
an Evaluator, will do something

164
00:10:11,630 --> 00:10:17,390
different if it visits a ‘Number‘
or if it visits a ‘Times‘ operation.

165
00:10:17,850 --> 00:10:23,110
So based on the elements that are
in the Domain, it will perform different

166
00:10:23,310 --> 00:10:24,070
actions.

167
00:10:24,870 --> 00:10:29,270
And then a Visitor manages its own
specific states.

168
00:10:29,470 --> 00:10:31,410
This is what we saw with the infix
printer.

169
00:10:31,670 --> 00:10:36,490
We can define some specific states
inside the Visitor, which are different

170
00:10:36,690 --> 00:10:38,790
from the states of the Domain objects.

171
00:10:40,170 --> 00:10:43,710
And Visitors are independent from
each other.

172
00:10:44,070 --> 00:10:49,330
So this is really nice to be able
to load and to separate operations

173
00:10:49,530 --> 00:10:51,550
and to load them independently.

174
00:10:52,270 --> 00:10:57,470
So Visitors and Composites are two
design patterns that are a perfect

175
00:10:57,670 --> 00:10:58,430
match.

176
00:10:58,630 --> 00:10:59,890
They can play very nicely together.

177
00:11:00,630 --> 00:11:01,930
So how can we use Visitors?

178
00:11:02,130 --> 00:11:03,190
So let's start with that.

179
00:11:03,390 --> 00:11:06,950
So here, we have a complex mathematical
expression.

180
00:11:09,230 --> 00:11:12,470
And now I have a Visitor there,
an Evaluator.

181
00:11:13,070 --> 00:11:17,290
I can instantiate it and I can send
it the message evaluate.

182
00:11:17,490 --> 00:11:23,970
I pass there as an argument the
expression and it will answer the

183
00:11:24,170 --> 00:11:26,170
result, seven.

184
00:11:26,370 --> 00:11:30,410
I have another Visitor there,
the Printer.

185
00:11:30,970 --> 00:11:32,190
I can instantiate it.

186
00:11:32,390 --> 00:11:33,730
I can send the message Print.

187
00:11:34,230 --> 00:11:40,610
So you can see that each Visitor
can define its own methods.

188
00:11:41,010 --> 00:11:44,630
So here the evaluator has an Evaluate
method, but the Printer has a Print

189
00:11:44,830 --> 00:11:45,590
method.

190
00:11:45,790 --> 00:11:51,850
So a Visitor is really a unique
object that can define its own state

191
00:11:52,050 --> 00:11:52,810
and behavior.

192
00:11:53,670 --> 00:11:57,390
Then I send the expression as an
argument to the print and it will

193
00:11:57,590 --> 00:12:00,770
print the expression there.

194
00:12:01,090 --> 00:12:04,450
And the InfixPrinter has the same
API as the Printer.

195
00:12:05,410 --> 00:12:08,570
It will print the expression in
infix form.

196
00:12:09,510 --> 00:12:12,830
So now we can have a closer look
at the implementation of the ‘Visitor‘.

197
00:12:13,030 --> 00:12:16,470
So first of all, to implement a
‘Visitor‘, I should start by

198
00:12:16,670 --> 00:12:19,050
instrumenting the Domain,
the domain objects.

199
00:12:19,650 --> 00:12:20,750
So this is the first step.

200
00:12:21,750 --> 00:12:23,970
to prepare the domain to accept
‘Visitors‘.

201
00:12:24,610 --> 00:12:25,770
So how to do that?

202
00:12:26,990 --> 00:12:32,070
It means that on all elements in
the domain, we will add a new method

203
00:12:32,270 --> 00:12:37,150
that is prefixed by accept,
‘acceptVisitor‘.

204
00:12:38,430 --> 00:12:43,430
And here is the parameter of this
method.

205
00:12:43,630 --> 00:12:45,690
So we can define it here.

206
00:12:46,690 --> 00:12:51,010
This method is abstract in the upper
class of the hierarchy of the domain,

207
00:12:51,210 --> 00:12:51,970
in Expression.

208
00:12:52,770 --> 00:12:55,790
And this is ‘acceptVisitor(v)‘ and
the parameter is a ‘Visitor‘.

209
00:12:57,130 --> 00:12:59,930
And in ‘Number‘, I will have a method.

210
00:13:00,450 --> 00:13:02,770
This method is redefined,
‘acceptVisitor(v)‘.

211
00:13:04,650 --> 00:13:06,850
This is a ‘Visitor‘ that is passed
in argument.

212
00:13:07,710 --> 00:13:12,130
And if we look at the implementation
of this method, what does it do?

213
00:13:12,470 --> 00:13:18,490
It just sends the message ‘visitNumber‘
to the ‘Visitor‘ that has been passed

214
00:13:18,690 --> 00:13:19,450
in the parameter.

215
00:13:20,970 --> 00:13:23,390
The parameter that is passed is self.

216
00:13:24,070 --> 00:13:25,390
And this is what is important.

217
00:13:25,590 --> 00:13:31,810
So here we are telling the ‘Visitor‘
that the element that it is visiting

218
00:13:32,010 --> 00:13:32,770
is aNumber.

219
00:13:32,970 --> 00:13:35,750
And we know it because we are in
the Number class.

220
00:13:38,850 --> 00:13:43,770
So we tell the ‘Visitor‘ what it
is currently visiting.

221
00:13:44,950 --> 00:13:54,130
Then all the ‘acceptVisitor‘ methods
are defined only once for all ‘Visitors‘

222
00:13:54,330 --> 00:13:55,090
in the domain.

223
00:13:56,890 --> 00:14:00,450
So now this is the implementation
that we saw.

224
00:14:00,650 --> 00:14:04,610
So it means that we need to redefine
the ‘acceptVisitor‘ in all elements

225
00:14:04,810 --> 00:14:07,730
of the composite, of the Domain.

226
00:14:08,230 --> 00:14:12,250
So on ‘Number‘, we will say ‘aVisitor‘
visits a number: self.

227
00:14:14,430 --> 00:14:18,150
But on a ‘Plus‘, we will tell the
‘Visitor‘ that it is visiting a Plus,

228
00:14:18,790 --> 00:14:21,690
and we will pass the element self
because this is a ‘Plus‘.

229
00:14:22,970 --> 00:14:25,530
And the same for ‘Times‘.

230
00:14:26,830 --> 00:14:32,050
As we already said, this is really
important, we will implement this

231
00:14:32,250 --> 00:14:36,430
‘acceptVisitor‘ method only once
for all ‘Visitors‘ on the Domain objects.

232
00:14:37,230 --> 00:14:41,050
Now it comes to implementing the
‘Visitors‘ themselves.

233
00:14:41,250 --> 00:14:48,190
So, for example, for the Evaluator here,
we will implement the ‘visitNumber‘ method.

234
00:14:48,950 --> 00:14:50,830
And now we know that the parameter
is aNumber.

235
00:14:53,510 --> 00:14:56,410
And for aNumber, when I want to
evaluate aNumber, the only thing

236
00:14:56,610 --> 00:15:01,170
that I need to do is to send the
message value to the wrapper object,

237
00:15:01,410 --> 00:15:02,410
aNumber value.

238
00:15:03,130 --> 00:15:05,350
But I need also to implement the
‘visitPlus‘.

239
00:15:06,210 --> 00:15:07,810
And I know that the parameter is
anExpression.

240
00:15:08,150 --> 00:15:11,110
In fact, I could be more specific.

241
00:15:11,650 --> 00:15:13,250
Here, this is aPlus.

242
00:15:14,290 --> 00:15:18,730
I'm sure this is aPlus because I
receive it from the domain.

243
00:15:19,470 --> 00:15:23,550
And now there, what I should do
when I want to evaluate aPlus,

244
00:15:24,550 --> 00:15:28,770
it means that I will send the
‘acceptVisitor‘ method on the left

245
00:15:28,970 --> 00:15:32,090
operand and pass self,
the ‘Visitor‘ itself.

246
00:15:32,290 --> 00:15:37,930
So it means that here I will propagate
recursively to the composite elements.

247
00:15:38,310 --> 00:15:41,850
So I will evaluate the left side,
then the right side.

248
00:15:42,130 --> 00:15:44,950
And I know that I'm doing aPlus
operation.

249
00:15:45,150 --> 00:15:47,770
So that's why I put aPlus there.

250
00:15:48,610 --> 00:15:52,110
And this is the same thing,
the same thing here for the ‘Times‘.

251
00:15:53,050 --> 00:15:58,650
The ‘Visitor‘ is really nice to define,
to modularize some operations.

252
00:15:58,850 --> 00:16:04,750
And it is really simple to implement
a new kind of operation because

253
00:16:04,950 --> 00:16:08,170
implementing a new operation is
just implementing a new ‘Visitor‘.

254
00:16:08,370 --> 00:16:12,810
So I will implement a new subclass
of the ‘Visitor‘ class,

255
00:16:13,070 --> 00:16:14,190
for example a ‘Printer‘.

256
00:16:15,510 --> 00:16:18,290
And then I will implement the expected
API.

257
00:16:18,550 --> 00:16:21,470
And the expected API is really easy,
now we know it.

258
00:16:21,810 --> 00:16:24,310
This is ‘visitNumber‘,
‘visitPlus‘ and ‘visitTimes‘.

259
00:16:24,510 --> 00:16:28,690
These are the elements that are
defined in the domain.

260
00:16:31,510 --> 00:16:35,750
Once I implemented a new ‘Visitor‘,
this is easy to use it.

261
00:16:36,070 --> 00:16:39,850
So to use it, I could do anExpression
‘acceptVisitor‘: Printer new.

262
00:16:40,070 --> 00:16:41,650
So here, this is my new Visitor.

263
00:16:42,590 --> 00:16:44,650
Or I can do something simpler,
the reverse.

264
00:16:44,850 --> 00:16:50,650
If I define the print method inside
the Visitor, I could do

265
00:16:50,850 --> 00:16:52,610
‘Printer‘ new print: anExpression.

266
00:16:53,250 --> 00:16:59,270
So let's step back a little bit
and try to really understand.

267
00:16:59,510 --> 00:17:03,070
Did you really understand the subtle
interaction between the ‘acceptVisitor‘

268
00:17:03,270 --> 00:17:04,090
and ‘visitXXX‘ methods?

269
00:17:04,290 --> 00:17:07,430
And this is the key point to really
understand Visitor.

270
00:17:08,210 --> 00:17:10,670
So we'll go back to it more in detail.

271
00:17:11,030 --> 00:17:15,790
When I send a message to a ‘Printer‘,
so when I have a ‘Printer‘ object there,

272
00:17:15,990 --> 00:17:26,250
and I send it the message Print,
and I pass anExpression to print.

273
00:17:27,250 --> 00:17:28,010
So what happened?

274
00:17:28,830 --> 00:17:32,170
So here, the ‘Printer‘ will answer.

275
00:17:32,470 --> 00:17:33,870
So we will find this method.

276
00:17:34,510 --> 00:17:36,170
And inside this method,
what does it do?

277
00:17:36,370 --> 00:17:37,870
Basically, it just dispatches.

278
00:17:38,230 --> 00:17:40,290
So we don't know what is this expression
there.

279
00:17:40,850 --> 00:17:45,490
We don't know if it is a simple object,
a leaf in the composite,

280
00:17:46,250 --> 00:17:47,010
like a number.

281
00:17:47,210 --> 00:17:51,690
Or if it is a more complex expression,
like an operation, a ‘Plus‘,

282
00:17:51,890 --> 00:17:52,670
a ‘Times‘ or whatever.

283
00:17:53,410 --> 00:17:57,870
And we don't want to test specifically
in the ‘Visitor‘ code.

284
00:17:58,270 --> 00:18:00,350
So what we will do is that we will
do a dispatch.

285
00:18:00,550 --> 00:18:03,610
We will send the message ‘acceptVisitor‘
to the expression.

286
00:18:04,110 --> 00:18:06,130
And this is the right method that
will be selected.

287
00:18:06,330 --> 00:18:08,710
If you remember correctly,
we already spoke about that.

288
00:18:09,230 --> 00:18:11,370
Sending a message is making a choice.

289
00:18:11,570 --> 00:18:15,290
It means that the system will select
the right method to execute.

290
00:18:15,490 --> 00:18:20,250
So here, if it is a number,
this is the method that will be

291
00:18:20,450 --> 00:18:21,210
executed.

292
00:18:21,410 --> 00:18:24,030
But if it is a ‘Plus‘,
this is the method that will be

293
00:18:24,230 --> 00:18:24,990
executed.

294
00:18:26,490 --> 00:18:28,730
So this is the first dispatch.

295
00:18:29,570 --> 00:18:32,750
And the right expression element
will answer accordingly.

296
00:18:35,280 --> 00:18:38,660
And now that we are there,
imagine it was a ‘Plus‘.

297
00:18:38,960 --> 00:18:43,060
If the expression there was a ‘Plus‘,
it means that it is this method

298
00:18:43,260 --> 00:18:44,040
that will be executed.

299
00:18:44,940 --> 00:18:48,380
And here, what we will do inside
the implementation of this method,

300
00:18:48,560 --> 00:18:52,620
if you remember when we implemented
the domain, we implemented it like this:

301
00:18:52,860 --> 00:18:55,440
‘aVisitor‘ ‘visitPlus‘: self

302
00:18:56,080 --> 00:19:01,200
So it means that we will do a second
dispatch, and we don't know which

303
00:19:01,400 --> 00:19:05,880
‘Visitors‘ we have in this variable,
but this is the right ‘Visitor‘

304
00:19:06,080 --> 00:19:07,080
that will answer correctly.

305
00:19:08,100 --> 00:19:13,920
So if it is a ‘Printer‘ or an Evaluator
or whatever, it will execute its

306
00:19:14,120 --> 00:19:15,160
‘visitPlus‘ method.

307
00:19:15,460 --> 00:19:19,300
So in this case, it will be this one,
passing self,

308
00:19:19,500 --> 00:19:21,560
so the expression ‘Plus‘.

309
00:19:21,840 --> 00:19:25,260
So when we are executing in a ‘Visitor‘
the ‘visitPlus‘ method,

310
00:19:25,620 --> 00:19:30,460
we are sure that the variable in
parameter, p, is a ‘Plus‘.

311
00:19:32,220 --> 00:19:33,720
And this is the second dispatch.

312
00:19:34,900 --> 00:19:40,340
So this is why we said that the
‘Visitor‘ design pattern is based

313
00:19:40,540 --> 00:19:41,840
on double dispatch.

314
00:19:42,460 --> 00:19:46,980
There is a first dispatch from the
‘Visitor‘ hierarchy to the Domain

315
00:19:47,180 --> 00:19:50,500
hierarchy and a second dispatch
from the Domain hierarchy to the

316
00:19:50,680 --> 00:19:52,300
‘Visitor‘ hierarchy.

317
00:19:52,660 --> 00:19:55,860
So this is the core mechanism of
the ‘Visitor‘ design pattern.

318
00:19:56,060 --> 00:20:03,680
If you look at it, there are no
conditional checks in the code.

319
00:20:04,320 --> 00:20:05,080
Not at all.

320
00:20:05,280 --> 00:20:10,300
We never test the specific node
elements that we have or the specific

321
00:20:10,500 --> 00:20:11,420
‘Visitors‘ that we have.

322
00:20:13,160 --> 00:20:17,860
This double dispatch provides a
decoupling between Visitors and

323
00:20:18,060 --> 00:20:18,820
domain objects.

324
00:20:19,240 --> 00:20:22,880
So this is really nice from the
extensibility point of view.

325
00:20:23,880 --> 00:20:26,500
It provides also a decoupling between
the different ‘Visitors‘.

326
00:20:27,980 --> 00:20:30,500
So now the question now that you
really understood the ‘Visitor‘

327
00:20:30,700 --> 00:20:34,060
design pattern is: when should you use it?

328
00:20:34,860 --> 00:20:40,200
So the idea is that you should use
it when you want to implement some

329
00:20:40,400 --> 00:20:44,940
specific operation on structured
graphs or trees or things like that.

330
00:20:45,540 --> 00:20:46,620
Let's give some examples.

331
00:20:47,080 --> 00:20:51,480
If you have a parse tree,
this is a tree that represents a

332
00:20:51,680 --> 00:20:53,880
piece of code, okay, like a program
node.

333
00:20:54,700 --> 00:20:57,520
And inside this program node,
you have a bunch of expressions

334
00:20:57,720 --> 00:20:58,480
and things like that.

335
00:20:59,320 --> 00:21:04,940
And you want to use a ‘Visitor‘
because you will implement different

336
00:21:05,140 --> 00:21:05,900
‘Visitors‘.

337
00:21:06,100 --> 00:21:10,300
One specific for the compilation,
you will emit some bytecode in the

338
00:21:10,500 --> 00:21:11,260
code stream.

339
00:21:11,460 --> 00:21:12,900
Another one for pretty printing.

340
00:21:13,100 --> 00:21:17,920
For example, you will analyze the
parse tree and you will send some

341
00:21:18,120 --> 00:21:22,500
errors or you will provide some
hints to the syntax highlighting

342
00:21:22,700 --> 00:21:26,300
if there is an error or something
like that, or to provide some specific

343
00:21:26,500 --> 00:21:28,820
colors to variables or things like that.

344
00:21:30,440 --> 00:21:33,620
You could have a lot of different
operations on parse trees.

345
00:21:35,300 --> 00:21:37,400
And then, another example,
this is rendering documents.

346
00:21:37,600 --> 00:21:39,220
This is what we saw with the pillar
example.

347
00:21:40,440 --> 00:21:42,280
So here you have different exporters.

348
00:21:42,480 --> 00:21:45,800
You have a ‘Document‘ model,
and then you want to export this

349
00:21:46,000 --> 00:21:47,680
‘Document‘ to a specific format.

350
00:21:47,880 --> 00:21:50,280
This could be HTML, LaTeX,
or whatever.

351
00:21:51,960 --> 00:21:58,140
The specific challenge of the ‘Visitor‘
design pattern is when the elements

352
00:21:58,340 --> 00:21:59,460
of the composite change.

353
00:22:00,060 --> 00:22:05,240
It requires changing all the Visitors
and implementing some more

354
00:22:05,440 --> 00:22:06,980
accept methods and more visit methods.

355
00:22:08,360 --> 00:22:13,780
When you have more dynamicity in
the composite, this is difficult

356
00:22:13,980 --> 00:22:15,400
for the ‘Visitor‘.

357
00:22:16,640 --> 00:22:20,340
This is related to the expression
problem in statically typed languages.

358
00:22:21,840 --> 00:22:25,960
In conclusion, what we saw,
this is a ‘Visitor‘ design pattern,

359
00:22:26,200 --> 00:22:30,840
we saw that it is a very,
very nice design pattern from the

360
00:22:31,040 --> 00:22:34,020
extensibility point of view and
the modularity point of view.

361
00:22:34,900 --> 00:22:39,820
You can remodularize some operations
in specific packages outside of

362
00:22:40,020 --> 00:22:46,140
the domain, and it is based on the
double dispatch that makes it

363
00:22:46,340 --> 00:22:47,100
plug-and-play.

364
00:22:47,300 --> 00:22:50,240
It means that you will instrument
your domain object only one time

365
00:22:50,440 --> 00:22:52,440
and it will work for all ‘Visitors‘.

366
00:22:53,740 --> 00:22:57,900
On the con side, it can look complex.

367
00:22:58,100 --> 00:23:04,620
So it means that this is a design
pattern that in a first understanding

368
00:23:04,820 --> 00:23:09,080
is a little bit complex because
of this tricky interaction between

369
00:23:09,280 --> 00:23:10,640
accept and visit methods.

370
00:23:11,600 --> 00:23:15,260
And it's not well adapted to changing
structures, this is what we say

371
00:23:15,460 --> 00:23:16,260
at the end.

372
00:23:16,920 --> 00:23:20,640
If we change completely the nodes,
you need to re-implement a lot of

373
00:23:20,840 --> 00:23:22,100
things in the ‘Visitors‘.


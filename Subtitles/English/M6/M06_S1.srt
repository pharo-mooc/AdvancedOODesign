1
00:00:04,600 --> 00:00:05,560
- Hello, everybody.

2
00:00:06,130 --> 00:00:10,090
In this lecture, I want to give
you a starter on Double Dispatch.

3
00:00:10,450 --> 00:00:14,830
Double Dispatch is important because
it's not really a Design Pattern,

4
00:00:15,030 --> 00:00:19,570
this is a kind of coding idiom that
will let you remove conditionals

5
00:00:19,770 --> 00:00:22,090
when you want and produce a more
modular design.

6
00:00:22,300 --> 00:00:26,140
And this is the basis for the visitor
Design Pattern.

7
00:00:26,340 --> 00:00:29,110
So, this is quite interesting and
important.

8
00:00:32,250 --> 00:00:36,240
For that, we will look at the Stone
Paper Scissors exercise and how

9
00:00:36,440 --> 00:00:37,560
we model it.

10
00:00:38,190 --> 00:00:41,240
The goal of this example is to exercise
dispatch.

11
00:00:41,440 --> 00:00:44,640
We will not use conditionals because
we don't like conditionals.

12
00:00:44,840 --> 00:00:47,190
I guess that you understood now
in the lecture that we don't like

13
00:00:47,390 --> 00:00:51,510
conditionals, and we will implement
the following exercise.

14
00:00:51,710 --> 00:00:57,550
Here, we created a Stone and we said,
"We want to play the Stone against

15
00:00:57,970 --> 00:01:01,450
the Paper, and this is the Paper
that wins".

16
00:01:02,500 --> 00:01:07,600
Everybody knows Stone,
Paper, Scissors, so I don't have

17
00:01:07,800 --> 00:01:09,190
to explain the game.

18
00:01:09,390 --> 00:01:13,300
Basically, you know that Paper wins
against Rock or Stone,

19
00:01:13,750 --> 00:01:20,290
that Rock wins against Scissors,
and that Scissors wins against Paper.

20
00:01:20,860 --> 00:01:23,610
In fact, this is very symmetrical
from that perspective.

21
00:01:23,810 --> 00:01:26,420
We also love tests, so let's write
a test.

22
00:01:26,620 --> 00:01:32,410
Basically, I just turned the previous

23
00:01:32,610 --> 00:01:33,480
expression into a test.

24
00:01:33,680 --> 00:01:34,450
I set `self assert`â€¦

25
00:01:34,960 --> 00:01:36,010
so nothing new.

26
00:01:36,210 --> 00:01:39,760
But I like to say that you should
write tests because people don't

27
00:01:39,960 --> 00:01:40,720
write enough tests.

28
00:01:41,200 --> 00:01:42,310
The inverse is true too.

29
00:01:43,360 --> 00:01:47,140
This is a symmetrical case of Double
Dispatch.

30
00:01:47,340 --> 00:01:51,250
We will have another lecture where
we will show that Double Dispatch

31
00:01:51,450 --> 00:01:53,530
does not have to be symmetrical.

32
00:01:53,730 --> 00:01:56,500
Here, I said `Paper new vs:
Stone new`.

33
00:01:56,700 --> 00:01:59,380
It should still return that this
is the paper that won.

34
00:01:59,580 --> 00:02:06,580
Basically, we have one class,
Stone, and you will implement the

35
00:02:06,780 --> 00:02:07,750
`vs:` method.

36
00:02:09,730 --> 00:02:13,810
What is very important in this exercise
is that you take the time,

37
00:02:14,010 --> 00:02:17,290
pause the video, and try to fill
up the dots.

38
00:02:17,490 --> 00:02:22,420
And by the way, from that perspective,
once I was giving a lecture and

39
00:02:22,620 --> 00:02:27,070
one of the teaching assistants told
me the following: "Yes,

40
00:02:27,270 --> 00:02:32,680
I understood really well but I realized
that when I did for real the exercise,

41
00:02:32,880 --> 00:02:33,970
I understood much better".

42
00:02:34,170 --> 00:02:37,750
So, there is a value in doing,
basically.

43
00:02:40,270 --> 00:02:41,660
I will give you some hints.

44
00:02:41,860 --> 00:02:47,560
The first one is that this solution
does not contain an explicit condition.

45
00:02:47,760 --> 00:02:51,640
So sorry, no if today.

46
00:02:51,910 --> 00:02:55,090
But there is a cool hint inside.

47
00:02:55,290 --> 00:02:57,310
Sending a message is making a choice.

48
00:02:57,510 --> 00:03:03,010
If you remember the first lecture
of this MOOC, on note implementation

49
00:03:03,210 --> 00:03:06,730
and why this is interesting,
then the message was:

50
00:03:06,930 --> 00:03:08,770
sending a message is making a choice.

51
00:03:08,970 --> 00:03:11,500
In fact, it will select the correct
method.

52
00:03:12,620 --> 00:03:17,390
If you remember this lecture,
we said, "Okay, then we need multiple

53
00:03:17,590 --> 00:03:18,350
classes".

54
00:03:18,550 --> 00:03:21,140
So, what are the classes that we
need here?

55
00:03:21,530 --> 00:03:23,030
This is the second hint.

56
00:03:23,360 --> 00:03:27,230
I give you three classes:
`Stone`, `Paper`, and `Scissors`.

57
00:03:27,430 --> 00:03:34,380
How do you implement the `vs:` methods
without condition, of course?

58
00:03:35,690 --> 00:03:37,300
I will give you more hints.

59
00:03:37,730 --> 00:03:43,190
This one may look a bit stupid or
obvious, but it is really important,

60
00:03:43,390 --> 00:03:46,820
and we will take advantage of it
to see the solution.

61
00:03:47,020 --> 00:03:52,400
So, the first thing to realize is
that when we execute the method `vs:`,

62
00:03:52,600 --> 00:03:58,520
when we have `Stone new vs:

63
00:03:59,210 --> 00:04:04,240
Paper new`, we know the receiver
of the message.

64
00:04:04,440 --> 00:04:05,200
This is `aStone`.

65
00:04:07,270 --> 00:04:09,880
What we don't know is what the argument
is.

66
00:04:11,560 --> 00:04:14,380
We would like to know what the argument
is because if this is Paper,

67
00:04:14,800 --> 00:04:17,050
this is Paper that will win,
or if this is Scissors,

68
00:04:17,350 --> 00:04:19,080
that is Scissors that will win.

69
00:04:19,280 --> 00:04:22,480
But what is nice is that we have
already half of the solution because

70
00:04:22,680 --> 00:04:23,620
we know the first one.

71
00:04:23,820 --> 00:04:28,020
So, the idea there, the hint is,
"Ah!

72
00:04:29,430 --> 00:04:34,350
If sending a message is making a choice,
then I just have to send another

73
00:04:34,550 --> 00:04:35,310
message.

74
00:04:35,510 --> 00:04:41,160
Like that, it will select the correct
one." The idea here is we know that

75
00:04:41,360 --> 00:04:45,390
we are playing against Stone,
so why don't we introduce a method

76
00:04:45,590 --> 00:04:46,350
that is called `playAgainstStone`?

77
00:04:47,850 --> 00:04:52,530
This method will make another choice
for us, so we will implement that.

78
00:04:52,730 --> 00:04:53,490
Let's look at it.

79
00:04:55,370 --> 00:05:00,710
I have my method `vs:` and what
I know when I write this method

80
00:05:01,400 --> 00:05:02,960
is that the receiver is Stone.

81
00:05:03,710 --> 00:05:04,760
This is what I'm saying.

82
00:05:04,960 --> 00:05:10,660
I'm saying, "Okay, I know Stone,
and I don't know what this element

83
00:05:10,860 --> 00:05:14,180
is" because it could be Scissors,
it could be Stone, or it could be Paper.

84
00:05:14,750 --> 00:05:18,290
I will just send a message to this
object by saying, "Yes,

85
00:05:18,560 --> 00:05:22,700
I know, I play against Stone and
the system will work for me".

86
00:05:22,900 --> 00:05:23,990
So, let's see.

87
00:05:24,190 --> 00:05:26,840
In our case, we've got `aStone vs:
aPaper`.

88
00:05:31,990 --> 00:05:34,960
This means that usually,
for the moment, I would just focus

89
00:05:35,160 --> 00:05:35,920
on the Paper side.

90
00:05:36,310 --> 00:05:41,680
Now the question is: if I tell you,
"You are `aPaper` and you receive

91
00:05:41,880 --> 00:05:44,920
`playAgainstStone`, what should
you return?" You should say,

92
00:05:45,120 --> 00:05:48,560
"That's easy, this is Paper because
I know if `aPaper` plays against

93
00:05:48,760 --> 00:05:52,690
`aStone`, this is Paper." So,
you return it and this is what we do.

94
00:05:52,890 --> 00:05:58,720
Here, first I will send the message
`playAgainstStone` to `anElement`.

95
00:06:00,040 --> 00:06:04,270
And after, I will define
`playAgainstStone`, for example

96
00:06:04,470 --> 00:06:05,710
in `#paper` for the moment.

97
00:06:06,100 --> 00:06:09,490
With these two methods,
I know that if I write `aStone vs:

98
00:06:10,300 --> 00:06:16,990
aPaper`, I get `#paper`,
which is cool.

99
00:06:17,560 --> 00:06:21,250
I have the right solution without
any test.

100
00:06:21,450 --> 00:06:25,120
Now, of course, this is what I'm
saying here, it works for Paper,

101
00:06:25,320 --> 00:06:26,800
but it does not work for Scissors.

102
00:06:27,000 --> 00:06:28,840
So, how do we fix that?

103
00:06:30,460 --> 00:06:32,440
It is easy, let's do the same.

104
00:06:33,220 --> 00:06:39,250
We will define - you know how to
do it - probably a new method in

105
00:06:39,450 --> 00:06:40,210
the class Scissors.

106
00:06:40,410 --> 00:06:41,380
So, let's look at that.

107
00:06:43,350 --> 00:06:46,830
Imagine conceptually,
we said Stone plays against Scissors.

108
00:06:47,030 --> 00:06:48,810
So, we will say `aScissor
playAgainstStone`.

109
00:06:50,160 --> 00:06:54,030
I have to write in the class Scissors
the method `playAgainstStone`.

110
00:06:55,320 --> 00:06:59,340
Now we know that if I play Scissors
against Stone, who is winning?

111
00:06:59,730 --> 00:07:00,490
The Stone.

112
00:07:00,690 --> 00:07:01,650
So, I write `#stone`.

113
00:07:06,190 --> 00:07:08,290
And now what is left?

114
00:07:08,490 --> 00:07:17,350
This is Stone because if I said
`aStone vs: aStone`, then I should

115
00:07:17,550 --> 00:07:20,440
return `#draw` because this means
that there is equality,

116
00:07:20,640 --> 00:07:21,700
and I cannot conclude.

117
00:07:24,300 --> 00:07:29,250
This means that we now already have
a good part of the solution.

118
00:07:30,000 --> 00:07:31,200
I will show you all the code.

119
00:07:31,680 --> 00:07:32,790
We have all this code.

120
00:07:33,660 --> 00:07:35,820
I have the method `vs:`,
I have the method `playAgainstStone`,

121
00:07:36,390 --> 00:07:39,150
I have the method `playAgainstStone`,
and I have the method `playAgainstStone`

122
00:07:39,540 --> 00:07:41,190
in three different classes.

123
00:07:41,390 --> 00:07:48,240
I can get the solution for all the

124
00:07:49,170 --> 00:07:51,630
games where the receiver is Stone.

125
00:07:51,830 --> 00:07:57,860
So, this means that if I have `aStone
vs: A Scissors`, `aStone vs:

126
00:07:58,060 --> 00:08:04,530
aPaper`, or `aStone vs:

127
00:08:04,730 --> 00:08:09,390
aStone`, I know the answer because
what will happen is that I send

128
00:08:09,590 --> 00:08:12,750
this message to this guy,
and depending on the class of this guy,

129
00:08:12,950 --> 00:08:15,870
I will either go there,
or there, or there.

130
00:08:17,370 --> 00:08:19,890
Now the point is, how do we generalize
that?

131
00:08:20,090 --> 00:08:22,010
We will do the same for each of
the elements.

132
00:08:22,210 --> 00:08:23,880
So, let's step back from what we saw.

133
00:08:24,080 --> 00:08:31,680
If we look at it, when we were executing
the method `vs:`, we know that this

134
00:08:31,880 --> 00:08:38,730
method is executed on the Stone
class and the system selected this

135
00:08:38,930 --> 00:08:39,690
method.

136
00:08:39,890 --> 00:08:43,620
And then, basically, what we are
doing is that we just send another

137
00:08:43,820 --> 00:08:47,160
message to the argument,
to select another method.

138
00:08:47,360 --> 00:08:51,810
Here it will be one of the methods
that are called `playAgainstStone`.

139
00:08:53,730 --> 00:08:58,950
This means that, as a conclusion,
with two messages, I can select

140
00:08:59,150 --> 00:09:02,960
a method based on its receiver and
its argument.

141
00:09:03,180 --> 00:09:08,400
This is powerful from that perspective,
and this is something that we will

142
00:09:08,600 --> 00:09:11,610
use in the future for the Visitor
Design Pattern.

143
00:09:11,810 --> 00:09:18,030
For Scissors, what I will do is
I will create a `vs:` method that

144
00:09:18,230 --> 00:09:19,050
will say `playAgainstScissors`.

145
00:09:19,250 --> 00:09:25,510
Scissors against Scissors,
that will be `#draw`.

146
00:09:25,710 --> 00:09:29,340
`playAgainstScissors` in Paper,
this is `#scissors` that wins.

147
00:09:29,540 --> 00:09:32,670
And `playAgainst Scissors` in Stone,
this is `#stone` that wins.

148
00:09:32,870 --> 00:09:37,800
So, with this code here,
now I can manage all the cases where

149
00:09:38,000 --> 00:09:48,510
I have `aScissors vs:
aPaper vs: a Stone and vs:

150
00:09:49,020 --> 00:09:49,780
aScissors`.

151
00:09:51,720 --> 00:09:55,860
This one will return `#draw`,
this one will return `#stone`,

152
00:09:59,280 --> 00:10:00,630
and this one will return `#scissors`.

153
00:10:00,830 --> 00:10:06,750
In the same way, we will do the
same for Paper.

154
00:10:07,410 --> 00:10:14,010
For Paper in the class Paper,
this class has its own `vs:` methods

155
00:10:14,310 --> 00:10:18,420
and we know that the receiver is
Paper so we will send the message

156
00:10:18,620 --> 00:10:22,980
`playAgainstPaper` to the element,
and each of the classes - Scissors,

157
00:10:23,180 --> 00:10:25,860
Paper, and Stone - will implement
the `playAgainstPaper` differently.

158
00:10:26,060 --> 00:10:30,600
So, `Scissors >> playAgainstPaper`,
this is `#scissors` that wins.

159
00:10:30,800 --> 00:10:35,100
Paper against Paper, this is a `#draw`,
and Paper against Stone,

160
00:10:35,300 --> 00:10:36,480
this is `#paper` that wins.

161
00:10:36,680 --> 00:10:40,830
So, if we look at the design,
in the end, we have that.

162
00:10:41,310 --> 00:10:46,740
We have a method that is abstract
- these methods are basically abstract

163
00:10:46,940 --> 00:10:53,310
- and each class implements a different
`vs:` method and a different

164
00:10:53,510 --> 00:10:54,270
`playAgainstStone`,
`playAgainstScissors`,

165
00:10:54,470 --> 00:10:55,230
`playAgainstScissors`.

166
00:10:55,430 --> 00:11:01,560
Here, you have basically a Double

167
00:11:01,760 --> 00:11:11,600
Dispatch in the sense that if we
look at `aPaper vs: aScissors`,

168
00:11:11,920 --> 00:11:13,030
what will happen?

169
00:11:13,390 --> 00:11:16,490
Which method `vs:` will be executed?

170
00:11:16,690 --> 00:11:17,460
Oh, that's easy!

171
00:11:17,660 --> 00:11:25,320
The receiver is `aPaper`,
so this is an instance of that class.

172
00:11:26,040 --> 00:11:28,860
We will look for the method `vs:`
- you remember the lookup methods

173
00:11:29,060 --> 00:11:36,900
lecture - so that will be this one,
and this one is implemented as

174
00:11:38,220 --> 00:11:38,980
`playAgainst`.

175
00:11:39,180 --> 00:11:43,740
So, that will be the argument
`playAgainstPaper`.

176
00:11:49,000 --> 00:11:52,830
This argument can be an instance
of Stone, Paper, or Scissors,

177
00:11:53,030 --> 00:11:54,910
so it means that it will select.

178
00:11:55,450 --> 00:12:00,520
Again, there will be a lookup on
the argument that will select this one,

179
00:12:00,720 --> 00:12:01,690
this one, or that one.

180
00:12:01,890 --> 00:12:05,950
So, basically, if we look,
we have two kinds of messages.

181
00:12:06,150 --> 00:12:10,480
We have the `vs:`, where we have
three methods, and then we have

182
00:12:10,680 --> 00:12:13,430
one message `playAgainstPaper`,
one message `playAgainstStone`,

183
00:12:13,930 --> 00:12:14,690
and one `playAgainstScissors`.

184
00:12:14,890 --> 00:12:20,320
First, the system will select the
correct `vs:` method,

185
00:12:20,520 --> 00:12:27,850
and then it will select the second
method based on the argument of

186
00:12:28,050 --> 00:12:28,810
this method.

187
00:12:29,010 --> 00:12:31,420
That's why we said that there is
a double dispatch.

188
00:12:31,620 --> 00:12:35,260
First, we dispatch here,
and second, we dispatch on this one,

189
00:12:35,460 --> 00:12:37,810
or this one, or this one.

190
00:12:38,010 --> 00:12:41,410
This is a toy example because this
is a little game.

191
00:12:42,160 --> 00:12:46,930
We don't need to pass an argument
during the dispatch.

192
00:12:49,840 --> 00:12:53,500
When we look at a Visitor Design
Pattern, we will pass the argument.

193
00:12:53,700 --> 00:12:56,650
What it means is that for the moment
we said `playAgainstPaper`,

194
00:12:57,820 --> 00:12:59,530
we don't need the argument.

195
00:12:59,830 --> 00:13:04,330
But usually, when we do a real Double
Dispatch, we pass the argument.

196
00:13:04,530 --> 00:13:05,500
Here, we pass `aScissors`.

197
00:13:05,700 --> 00:13:11,040
We didn't add this argument because
we don't use it in the method body here,

198
00:13:11,240 --> 00:13:13,030
so there is no need to pass it as
an argument.

199
00:13:13,230 --> 00:13:16,690
In the Visitor Design Pattern,
we will need that.

200
00:13:16,890 --> 00:13:23,450
So, this means that the only difference
is that `vs:` typically in Paper

201
00:13:23,650 --> 00:13:27,560
will mean, "Pass self,
which is the object receiving the

202
00:13:27,760 --> 00:13:30,470
message, so that we can do something
here".

203
00:13:30,670 --> 00:13:34,160
And the difference is that here
we have the argument,

204
00:13:34,360 --> 00:13:37,370
while in the previous one,
if you look here, we don't have

205
00:13:37,570 --> 00:13:38,330
the argument.

206
00:13:39,440 --> 00:13:46,940
Now what I suggest you do is you
should extend this exercise with

207
00:13:47,140 --> 00:13:48,530
Spock and Lizzard.

208
00:13:48,730 --> 00:13:52,880
This is in the Big Bang Theory;
the guys invented a more complex

209
00:13:53,080 --> 00:13:54,650
version of Rock, Paper,
Scissors.

210
00:13:57,320 --> 00:14:02,390
What you see is that Spock wins
against Scissors and Rock,

211
00:14:02,590 --> 00:14:05,590
and Lizzard against Paper and Spock.

212
00:14:05,790 --> 00:14:10,880
So again, this is completely
symmetrical, and we suggest you

213
00:14:11,080 --> 00:14:14,120
do that as an exercise to implement
the Stone, Paper, Scissors,

214
00:14:15,020 --> 00:14:16,660
and to extend it.

215
00:14:16,860 --> 00:14:21,080
What you will see is that in the
extension, you will never get any

216
00:14:22,220 --> 00:14:23,180
conditionals.

217
00:14:23,900 --> 00:14:26,180
With the same principle,
you will have `playAgainstSpock`,

218
00:14:26,380 --> 00:14:30,680
`playAgainstLizzard`,
and implement them in the different

219
00:14:30,880 --> 00:14:31,640
classes.

220
00:14:32,090 --> 00:14:35,510
You will not have to change any
lines of code from the previous

221
00:14:35,710 --> 00:14:36,500
implementation.

222
00:14:37,310 --> 00:14:39,950
This means that from that perspective,
this is modular.

223
00:14:41,030 --> 00:14:45,260
As a conclusion, a Double Dispatch
is not a Design Pattern per se,

224
00:14:45,460 --> 00:14:46,910
but this is a powerful mechanism.

225
00:14:47,110 --> 00:14:47,930
It is modular.

226
00:14:48,530 --> 00:14:55,310
You just send an extra message to
the argument, and we use the late

227
00:14:55,510 --> 00:14:56,270
binding.

228
00:14:56,470 --> 00:15:01,190
What you should see is that Double
Dispatch is as if we would have

229
00:15:01,390 --> 00:15:04,080
used the first lecture twice.

230
00:15:04,340 --> 00:15:06,830
This means that in the first lecture,
we noted, we said, "Okay,

231
00:15:07,070 --> 00:15:08,930
sending a message is making a choice".

232
00:15:09,130 --> 00:15:13,220
Here, we send two messages,
and we make two choices.

233
00:15:14,090 --> 00:15:17,720
This is the natural generalization
of the first lecture.


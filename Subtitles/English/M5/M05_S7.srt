1
00:00:04,440 --> 00:00:08,320
Hello, in this lecture,
we are going to talk about Null

2
00:00:08,520 --> 00:00:09,920
Checks and how to avoid them.

3
00:00:12,780 --> 00:00:16,640
The goals of this lecture is to
understand the implication of methods

4
00:00:16,840 --> 00:00:18,120
that return `nil` or null.

5
00:00:18,420 --> 00:00:22,800
So `nil` is actually the equivalent
of null in Java or C Sharp,

6
00:00:23,000 --> 00:00:23,760
for example.

7
00:00:24,180 --> 00:00:28,500
We're going to analyze what happens
in the side of the provider,

8
00:00:28,700 --> 00:00:32,340
so the one that returns `nil`,
and what happens in the client side.

9
00:00:33,060 --> 00:00:36,700
And we're going to see how to avoid
propagation by correctly initializing

10
00:00:36,900 --> 00:00:41,260
an object, and then how to also
use a design pattern called Null

11
00:00:41,460 --> 00:00:43,880
Object to avoid `nil` checks.

12
00:00:45,800 --> 00:00:47,200
So what is `nil` in Pharo?

13
00:00:47,420 --> 00:00:50,600
In Pharo, `nil` is an object,
as any other object in the system,

14
00:00:50,800 --> 00:00:52,440
it's an instance of `UndefinedObject`.

15
00:00:53,040 --> 00:00:57,260
So every time that you write `nil`
in the code, this is like a reference

16
00:00:57,460 --> 00:01:01,820
to a singleton object that points
to this instance of `UndefinedObject`.

17
00:01:02,580 --> 00:01:06,580
This is equivalent to `nil` in other
languages such as Ruby,

18
00:01:07,140 --> 00:01:09,700
or null in other languages such as Java.

19
00:01:11,360 --> 00:01:13,740
The main difference between Pharo
and Java is that in Pharo,

20
00:01:13,940 --> 00:01:16,580
`nil` is a real object,
as anybody else, as any other object

21
00:01:16,780 --> 00:01:19,580
in the system, but it's just a singleton
object.

22
00:01:19,780 --> 00:01:21,820
There is only one instance of
`UndefinedObject`.

23
00:01:22,160 --> 00:01:26,000
Also similarly to other object-oriented
languages, every time that we are

24
00:01:26,200 --> 00:01:31,920
going create variables or instantiate
objects, the variables are initialized

25
00:01:32,120 --> 00:01:32,880
as `nil`.

26
00:01:33,080 --> 00:01:38,220
So every time, for example,
if you have a 'point' class with an

27
00:01:38,420 --> 00:01:41,360
'x' and a 'y' attribute, every time
that you do point new,

28
00:01:44,060 --> 00:01:47,600
the object that is created will
have an 'x' variable and a 'y' variable

29
00:01:47,800 --> 00:01:51,120
that will point to `nil`,
to the same `nil` object.

30
00:01:52,000 --> 00:01:55,660
This also means that we need to
be careful and we need to know when

31
00:01:55,860 --> 00:01:57,260
to use it and when to not use it.

32
00:01:57,460 --> 00:02:02,160
So this, they will come by default,
but we can manage it.

33
00:02:02,500 --> 00:02:06,980
So let's first look at what happens
from the side that returns `nil`.

34
00:02:07,400 --> 00:02:12,460
So every time that you write a method,
so 'm' that returns `nil`,

35
00:02:12,880 --> 00:02:22,020
or a method 'n' that will do some if,
condition, if true, return `nil`,

36
00:02:22,300 --> 00:02:24,140
else return 7, for example.

37
00:02:24,480 --> 00:02:26,280
The question is, what happens with this?

38
00:02:26,480 --> 00:02:28,400
What are the consequences of doing this?

39
00:02:29,580 --> 00:02:31,620
So we can ask ourselves this question.

40
00:02:32,220 --> 00:02:34,200
Let's approach this with an example.

41
00:02:34,460 --> 00:02:37,280
So here, for example,
you see the code of an inferencer.

42
00:02:37,480 --> 00:02:38,580
So it's a rule system.

43
00:02:38,780 --> 00:02:39,860
It's a simple rule system.

44
00:02:40,060 --> 00:02:45,560
We have an inferencer object that
has rules to be applied in certain

45
00:02:45,760 --> 00:02:46,520
conditions.

46
00:02:46,720 --> 00:02:51,320
For example, here there is a little
DSL that says, okay, when it is sunny,

47
00:02:51,660 --> 00:02:52,740
I'm going to use sunglasses.

48
00:02:52,960 --> 00:02:55,940
And when it is sunny,
I am also going to use solar cream.

49
00:02:56,700 --> 00:02:58,480
When it is rainy, I'm going to use
an umbrella.

50
00:02:58,840 --> 00:03:02,760
So this little arrow,
if it is this, I'm going to do this.

51
00:03:05,700 --> 00:03:09,380
So here what happens is that if
I take the inferencer and I ask,

52
00:03:09,580 --> 00:03:13,000
okay, give me the rules for sunny,
it returns a set of rules.

53
00:03:13,200 --> 00:03:16,140
So here it's an array,
where the first rule is,

54
00:03:16,520 --> 00:03:19,880
okay, since it is sunny,
I'm going to use sunglasses.

55
00:03:20,140 --> 00:03:22,520
And since it is sunny,
I'm going to use solar cream.

56
00:03:23,380 --> 00:03:30,240
Now what happens if I ask the rules
for some weather that was not programmed

57
00:03:30,440 --> 00:03:31,720
in the set of rules?

58
00:03:31,920 --> 00:03:35,800
So for example, here we can ask,
okay, what happens if it is cloudy?

59
00:03:36,540 --> 00:03:39,080
And right now, our inferencer is
returning `nil`.

60
00:03:40,140 --> 00:03:43,000
So we can check how this is implemented.

61
00:03:44,440 --> 00:03:48,520
In this case, every time that we
ask the rule for a fact,

62
00:03:48,760 --> 00:03:57,080
so here the fact will be cloudy or sunny,
so it will be the symbols sunny

63
00:03:57,280 --> 00:04:01,280
or cloudy, first we check if we
have rules for that fact.

64
00:04:01,800 --> 00:04:03,880
If we have no rules, we return `nil`.

65
00:04:04,080 --> 00:04:06,760
Otherwise, we return the rules that
apply for that fact.

66
00:04:09,240 --> 00:04:14,160
So `nil` here, it is used as a token
to indicate that there were no rules

67
00:04:14,360 --> 00:04:18,140
for that weather or for that fact
in this case.

68
00:04:18,880 --> 00:04:21,640
So now, what are the consequences
of returning this `nil`?

69
00:04:22,160 --> 00:04:25,440
We're going to see those consequences
in every place that is calling this

70
00:04:25,640 --> 00:04:26,920
method, so in the clients.

71
00:04:28,600 --> 00:04:34,220
So returning `nil` in our rule method
means that every time that there

72
00:04:34,420 --> 00:04:37,440
is a method that is going to call
this method, it has to check if

73
00:04:37,640 --> 00:04:38,780
the result was `nil` or not.

74
00:04:39,420 --> 00:04:43,740
So every time that we are going
to call this method, we are checking

75
00:04:43,940 --> 00:04:45,340
if it is `nil` or not.

76
00:04:46,240 --> 00:04:49,220
So that means that all the code
that is doing this will be followed

77
00:04:49,420 --> 00:04:52,160
by conditional checks all the time.

78
00:04:54,280 --> 00:04:58,700
So this will somehow pollute the
code and make it more difficult

79
00:04:58,900 --> 00:04:59,660
to change.

80
00:05:00,300 --> 00:05:03,800
So one solution to this is to use
polymorphic objects.

81
00:05:04,700 --> 00:05:11,280
So if we think about this,
so one way to avoid this is to avoid

82
00:05:11,480 --> 00:05:16,360
the problem that we saw before is
that if we ask for the rules for

83
00:05:16,560 --> 00:05:20,040
a weather that is not there,
we could return an empty collection.

84
00:05:20,240 --> 00:05:23,420
So if we ask for the rules for a
weather that we know,

85
00:05:23,620 --> 00:05:27,380
we are going to return the collection
of rules that match.

86
00:05:27,860 --> 00:05:32,620
And if we ask for the rules of a
weather that doesn't exist in our

87
00:05:32,820 --> 00:05:34,940
system, we can just return an empty
collection.

88
00:05:36,100 --> 00:05:40,500
So of course, an array with elements
is polymorphic to an array with

89
00:05:40,700 --> 00:05:41,460
no elements.

90
00:05:41,660 --> 00:05:45,300
So that will simplify the code and
allow a simple way to manipulate

91
00:05:45,500 --> 00:05:46,700
the result of our method.

92
00:05:47,260 --> 00:05:51,640
So of course, in this case,
since we were returning collections,

93
00:05:51,940 --> 00:05:52,940
the choice is easy.

94
00:05:53,140 --> 00:05:54,340
We can just return an empty collection.

95
00:05:54,880 --> 00:05:58,640
But you can think of this as when
you were studying math.

96
00:05:58,920 --> 00:06:04,380
So we can think that the collection
is the zero or the neutral element

97
00:06:04,580 --> 00:06:05,340
of the collection.

98
00:06:05,540 --> 00:06:07,840
So when you concatenate the collection
with another collection,

99
00:06:08,040 --> 00:06:09,120
it will return the same collection.

100
00:06:09,320 --> 00:06:12,040
Or when you iterate a collection
that is empty, it will do nothing.

101
00:06:12,380 --> 00:06:14,060
So it is an element that does nothing.

102
00:06:14,260 --> 00:06:19,960
So it represents the empty or the
no collection, naturally.

103
00:06:20,500 --> 00:06:23,300
But in cases when we are,
for example, manipulating numbers,

104
00:06:23,760 --> 00:06:27,000
we can return zero, for example,
if we are going to add them.

105
00:06:27,200 --> 00:06:29,860
If we are going to multiply them,
maybe we want to return the one,

106
00:06:30,280 --> 00:06:31,400
yeah, and so on.

107
00:06:31,800 --> 00:06:36,780
So this is a kind of rule that we
can apply to many cases when we

108
00:06:36,980 --> 00:06:40,080
are adding or removing,
actually, this `nil` check.

109
00:06:40,340 --> 00:06:43,460
So that means that the code that
we saw before can be refactored

110
00:06:43,660 --> 00:06:44,460
to look like this.

111
00:06:44,660 --> 00:06:47,800
So instead of returning `nil`,
we can just return an empty collection.

112
00:06:48,040 --> 00:06:49,740
We return an empty array in this case.

113
00:06:50,400 --> 00:06:56,300
And then, the client can be refactored
or replaced by this code.

114
00:06:57,160 --> 00:06:59,140
So now, we don't need a `nil` check
anymore.

115
00:06:59,340 --> 00:07:02,420
We can just iterate the result of
our method.

116
00:07:03,740 --> 00:07:08,540
So if we have rules for a fact,
this is, of course, giving us a

117
00:07:08,740 --> 00:07:12,580
collection of elements that we are
going to iterate and do some code

118
00:07:12,780 --> 00:07:14,300
here for each of the elements.

119
00:07:14,720 --> 00:07:18,800
However, if we don't have any rules
for this fact, this is going to

120
00:07:19,000 --> 00:07:21,920
return an empty collection,
and the iteration will just do nothing.

121
00:07:25,940 --> 00:07:30,580
So what are other ways of limiting
the propagation of `nil`?

122
00:07:30,780 --> 00:07:33,420
So first, we should think about
the method that are returning `nil`

123
00:07:33,620 --> 00:07:34,480
and try to avoid them.

124
00:07:34,680 --> 00:07:38,140
So for example, adding these null
elements.

125
00:07:38,760 --> 00:07:44,580
We can also store, or we should
also avoid storing `nil` in variables

126
00:07:44,780 --> 00:07:45,540
explicitly.

127
00:07:45,740 --> 00:07:51,160
So one of the rules is to avoid
explicitly using `nil` as a marker.

128
00:07:52,100 --> 00:07:56,160
And of course, to do this,
we can initialize properly the instance

129
00:07:56,360 --> 00:07:57,120
variables of the object.

130
00:07:57,640 --> 00:08:00,480
So remember that every time that
we are going to initialize an object,

131
00:08:01,560 --> 00:08:04,060
all the instance variables are going
to be initialized with `nil` or

132
00:08:04,260 --> 00:08:05,220
with null in other languages.

133
00:08:05,760 --> 00:08:09,800
So it is the developer's responsibility
to produce objects that are well

134
00:08:10,000 --> 00:08:10,760
initialized.

135
00:08:11,700 --> 00:08:15,040
If we provide objects that are well
initialized, we can avoid `nil`

136
00:08:15,240 --> 00:08:17,200
checks in the rest of our code.

137
00:08:17,820 --> 00:08:21,180
So to give you an example,
here if we have an archive,

138
00:08:21,740 --> 00:08:23,740
we can define in Pharo the initialize
method.

139
00:08:24,900 --> 00:08:27,080
In the initialize method,
we can actually take care of the

140
00:08:27,280 --> 00:08:30,140
initialization of all the instance
variables that can have default values.

141
00:08:31,040 --> 00:08:34,120
So here in this case,
we can initialize the members instance

142
00:08:34,320 --> 00:08:35,520
variable as an order collection.

143
00:08:36,940 --> 00:08:39,240
Of course, sometimes default values
are not enough.

144
00:08:39,540 --> 00:08:43,660
And sometimes the values that should
come as the values of our instance

145
00:08:43,860 --> 00:08:45,360
variables should come from the outside.

146
00:08:46,340 --> 00:08:50,200
So a good way to provide a well
constructed object is to provide

147
00:08:50,400 --> 00:08:51,160
the constructor method.

148
00:08:52,060 --> 00:08:57,020
So we can say, for example,
that the only legal way to instantiate

149
00:08:57,220 --> 00:09:06,680
the point is by doing it using a
constructor method like x:7 y:17.

150
00:09:07,480 --> 00:09:12,100
And this will create a point that
will have a correct value of 'x' and

151
00:09:12,300 --> 00:09:16,580
a correct value of 'y' and avoiding
`nil` in points.

152
00:09:17,500 --> 00:09:19,900
Of course, you may think sometimes
you have to check.

153
00:09:20,220 --> 00:09:22,380
We don't have empty collection.

154
00:09:23,100 --> 00:09:24,420
So collections have empty collections.

155
00:09:24,660 --> 00:09:28,160
Numbers have zero or one as potential
Null Object.

156
00:09:28,360 --> 00:09:32,600
So what can you do when you have
some object of your domain that

157
00:09:32,800 --> 00:09:34,560
you want to represent as empty?

158
00:09:35,700 --> 00:09:40,960
So one way to do it is to represent
it with what we call a Null object.

159
00:09:41,860 --> 00:09:45,800
So you can turn your default case
into a Null Object of your model.

160
00:09:46,800 --> 00:09:49,690
So here we have some code taken
from Pharo actually.

161
00:09:49,890 --> 00:09:52,060
So let's imagine though we have
this `ToolPalette`.

162
00:09:52,580 --> 00:09:54,300
This `ToolPalette` has tools inside.

163
00:09:54,820 --> 00:09:56,940
It has a selected tool in particular.

164
00:09:57,140 --> 00:10:00,200
So you can think about,
for example, if you are using Photoshop

165
00:10:00,400 --> 00:10:05,240
or Paint, you have a set of tools
with buttons and then one of the

166
00:10:05,440 --> 00:10:08,980
buttons is selected showing that
you are using this tool.

167
00:10:09,180 --> 00:10:10,660
So for example, we can use the pen.

168
00:10:11,740 --> 00:10:14,980
Okay, we have the pen and the bucket
of paint and so on.

169
00:10:15,180 --> 00:10:16,260
But we are using the pen.

170
00:10:16,760 --> 00:10:20,300
Now, it may happen that we have
no selected tool at all.

171
00:10:20,760 --> 00:10:24,560
So the program should behave properly
when no tool is selected too.

172
00:10:25,160 --> 00:10:29,260
If we check the code,
it is asking all the time.

173
00:10:30,000 --> 00:10:33,340
Okay, if I have a selected tool,
so if the selected tool is not null,

174
00:10:33,940 --> 00:10:34,820
I will do something.

175
00:10:35,240 --> 00:10:37,980
Or in the previous action method,
if I have a selected tool,

176
00:10:38,180 --> 00:10:40,120
if it is not null, I will do something
else.

177
00:10:43,420 --> 00:10:48,780
So if we check at the model,
so in an UML diagram of this,

178
00:10:48,980 --> 00:10:52,140
so we see that the `ToolPalette`
is using a tool.

179
00:10:52,340 --> 00:10:55,140
So it has actually right now it
has zero or one tool.

180
00:10:56,900 --> 00:11:01,600
And that is why it is not null check
because it may have zero elements

181
00:11:01,800 --> 00:11:02,560
in here.

182
00:11:02,760 --> 00:11:05,100
So this is either a tool or `nil`.

183
00:11:06,280 --> 00:11:09,920
And we see that the tools understand
we can have different kind of tools.

184
00:11:10,120 --> 00:11:13,100
So for example, a tool for 'creation',
a tool for adding 'NewNode'.

185
00:11:13,300 --> 00:11:17,780
And then all of the tools,
they are polymorphic and they understand

186
00:11:17,980 --> 00:11:18,740
the same messages.

187
00:11:19,080 --> 00:11:21,440
They understand attach or detach
handles.

188
00:11:22,140 --> 00:11:25,940
What can we do to actually remove
here the `nil` check?

189
00:11:26,340 --> 00:11:30,040
If we only restrain ourselves to
basic objects like collections,

190
00:11:30,240 --> 00:11:34,760
numbers or 'nil', of course,
we are forced to check if there

191
00:11:34,960 --> 00:11:35,720
is a selected tool.

192
00:11:37,080 --> 00:11:41,500
One way to think about this one
another way is that we can have

193
00:11:41,700 --> 00:11:42,460
always a tool.

194
00:11:43,820 --> 00:11:47,300
And it could be a tool that does
nothing when it is not selected

195
00:11:47,500 --> 00:11:50,920
because what happens in this code
when there is no tool?

196
00:11:51,120 --> 00:11:55,080
Well, actually, when there is no tool,
this 'ifNotNil:' check will not execute

197
00:11:55,280 --> 00:11:58,500
the block and it will just continue
and do nothing.

198
00:11:58,820 --> 00:12:01,720
So we could have a tool that does
exactly that.

199
00:12:01,920 --> 00:12:02,680
It does nothing.

200
00:12:02,880 --> 00:12:04,300
And we could have the same behavior.

201
00:12:07,260 --> 00:12:11,620
So this actually is an idea coming
from a design pattern calling the

202
00:12:11,820 --> 00:12:16,540
Null Object that comes from the book,
Pattern Languages of Program Design

203
00:12:16,740 --> 00:12:17,840
of 1998.

204
00:12:18,640 --> 00:12:22,860
The objective of this design pattern
is to provide an object that is

205
00:12:23,060 --> 00:12:26,680
polymorphic to other objects,
but has only default actions and

206
00:12:26,880 --> 00:12:27,640
default values.

207
00:12:28,960 --> 00:12:31,900
Of course, I invite you to read
it and get a deeper understanding

208
00:12:32,100 --> 00:12:32,860
of this pattern.

209
00:12:33,060 --> 00:12:36,380
In our case, what we could do is
to implement the absence of a tool

210
00:12:36,580 --> 00:12:40,980
so we can implement a different class,
a different object that will represent

211
00:12:41,180 --> 00:12:42,200
the null tool.

212
00:12:42,880 --> 00:12:46,850
And in this case, each `NoTool`
that we can instantiate in our system

213
00:12:47,050 --> 00:12:51,040
will do nothing when it is asked
to attach handles or to detach handles.

214
00:12:52,880 --> 00:12:57,380
Then we can refactor our previous
code to look like this.

215
00:12:58,360 --> 00:13:01,940
We can initialize initially the
`ToolPalette` with `NoTool`.

216
00:13:02,280 --> 00:13:04,140
So by default, `NoTool` is selected.

217
00:13:05,460 --> 00:13:11,120
And then, all the code in our actions
will just take the selected tool,

218
00:13:11,320 --> 00:13:13,920
whatever it is, it is not `nil` anymore.

219
00:13:14,120 --> 00:13:19,080
Now it is either a no tool or a
correct tool, and we can ask it

220
00:13:19,280 --> 00:13:21,060
to attach or detach the handles.

221
00:13:22,620 --> 00:13:27,400
So the only thing that we did in
our model before was to add a new

222
00:13:27,600 --> 00:13:28,540
kind of tool in our model.

223
00:13:28,740 --> 00:13:31,080
So we just exploited the polymorphism
in our model.

224
00:13:31,420 --> 00:13:37,060
And now instead of having zero to
one element tools in our palette,

225
00:13:37,360 --> 00:13:40,320
we just have always one tool in
our `ToolPalette`.

226
00:13:41,140 --> 00:13:46,720
And then the `ToolPalette` doesn't
need to check anymore if it is empty

227
00:13:46,920 --> 00:13:47,680
or not.

228
00:13:47,880 --> 00:13:49,120
What are the advantages of using
`NullObjects`?

229
00:13:49,960 --> 00:13:53,160
So the main advantage is that it
will simplify client code.

230
00:13:53,460 --> 00:13:58,440
So there will be no need to check
for `NullObjects`, for `nil` all

231
00:13:58,640 --> 00:13:59,640
the time anymore.

232
00:14:00,260 --> 00:14:04,980
So since the `NullObject` will have
the same API as the original objects.

233
00:14:06,420 --> 00:14:09,100
It also clarifies what is the default
behavior.

234
00:14:09,300 --> 00:14:12,140
So what does it mean to have nothing
selected?

235
00:14:12,340 --> 00:14:15,600
Now we can just take a look at the
new class, the `NoTool` class that

236
00:14:15,800 --> 00:14:16,560
was there.

237
00:14:18,220 --> 00:14:21,740
And if we inspect all the methods
that are there, we can see what

238
00:14:21,940 --> 00:14:25,800
is the behavior of our system when
there's `NoTool` that is selected.

239
00:14:26,480 --> 00:14:28,440
And now this tool is also reusable.

240
00:14:28,640 --> 00:14:32,360
We could also reuse this code to
be able to deselect stuff easily.

241
00:14:33,060 --> 00:14:37,340
Now, of course, as every engineering
decision, using `NullObjects` has

242
00:14:37,540 --> 00:14:39,240
benefits, but also has disadvantages.

243
00:14:39,460 --> 00:14:43,680
Now, it may not be easy to actually
add `NullObjects` everywhere when

244
00:14:43,880 --> 00:14:44,640
we need it.

245
00:14:44,840 --> 00:14:49,720
So sometimes, it will be difficult
when we have large object graphs,

246
00:14:49,920 --> 00:14:50,680
for example.

247
00:14:51,780 --> 00:14:54,560
Also, when we have a `NullObject`,
we cannot just transform it into

248
00:14:54,760 --> 00:14:55,540
a real object later.

249
00:14:56,740 --> 00:15:00,480
And finally, all clients should
agree on the same do nothing behavior.

250
00:15:01,080 --> 00:15:02,160
So it is easier.

251
00:15:02,360 --> 00:15:05,740
Of course, it has the same behavior
for many parts in the application.

252
00:15:06,140 --> 00:15:10,420
Otherwise, we will have different
`NoTools` for different parts of

253
00:15:10,620 --> 00:15:11,380
the application.

254
00:15:11,580 --> 00:15:14,840
Sometimes it's also not easy to
apply this `NullObject` because

255
00:15:15,040 --> 00:15:16,180
the API is too large.

256
00:15:16,460 --> 00:15:21,740
So if we have 50 methods to implement
in our `NoTool`, maybe it is not

257
00:15:21,940 --> 00:15:22,700
practical to use it.

258
00:15:22,900 --> 00:15:26,120
And maybe it is simpler to just
put that code into the client.

259
00:15:26,800 --> 00:15:29,800
The same case as we discussed before,
maybe we need too many `NullObjects`

260
00:15:30,160 --> 00:15:33,700
if they don't have the same API
or they don't have the same behavior.

261
00:15:34,840 --> 00:15:38,100
And sometimes it's not clear what
does it mean to have no behavior.

262
00:15:38,300 --> 00:15:41,720
So what is the default behavior
that the `NullObject` should implement?

263
00:15:42,040 --> 00:15:44,140
That is not clear in the model
sometimes.

264
00:15:46,100 --> 00:15:50,800
So some points about the difference
between the `NullObject` or `nil`

265
00:15:51,000 --> 00:15:53,800
and the `NullObject` as the design
pattern.

266
00:15:55,960 --> 00:15:59,020
So sometimes it is possible that
we initialize an object,

267
00:15:59,520 --> 00:16:08,220
like for example, our point with
default values, with for example,

268
00:16:08,420 --> 00:16:09,180
null values.

269
00:16:09,380 --> 00:16:12,300
We could initialize the point in
the initialized method with 'x'

270
00:16:12,500 --> 00:16:15,060
equals to zero and 'y' equals to zero too.

271
00:16:15,480 --> 00:16:19,360
That could give us a default point
that can be usable in case we didn't

272
00:16:19,560 --> 00:16:21,320
use the constructor.

273
00:16:22,920 --> 00:16:25,460
Some other examples could be,
for example, to use a null time

274
00:16:25,660 --> 00:16:26,560
zone for times.

275
00:16:28,640 --> 00:16:34,660
Or it could have, for example,
as we talked before, null values

276
00:16:34,860 --> 00:16:39,860
for common objects like collections,
zeros for numbers, and so on.

277
00:16:40,060 --> 00:16:43,680
For exceptional cases,
one thing that could happen is that

278
00:16:43,880 --> 00:16:49,300
instead of having a default behavior
or a `NullObject`, we could use

279
00:16:49,500 --> 00:16:50,260
exceptions.

280
00:16:51,220 --> 00:16:56,680
So for example, we can replace `nil`
by throwing an exception to avoid

281
00:16:56,880 --> 00:16:58,580
errors and unexpected cases.

282
00:16:59,680 --> 00:17:05,860
So for example here, if we have
a stream and the stream can be in

283
00:17:06,060 --> 00:17:08,160
two different states,
it can be readable or writable,

284
00:17:08,880 --> 00:17:11,680
then we want to avoid writing on
the stream if it is not writable.

285
00:17:13,280 --> 00:17:17,920
Instead of having a default behavior
that ignores the incorrect behavior,

286
00:17:18,240 --> 00:17:22,900
what we can do is to just throw
an exception here, for example,

287
00:17:24,700 --> 00:17:29,420
when there is an attempt to write
into the object if it is not written.

288
00:17:31,060 --> 00:17:35,160
Then it is up to the client to manage
the exception, but since exceptions

289
00:17:35,360 --> 00:17:38,900
bubble up in the call stack,
so we have calls that,

290
00:17:39,100 --> 00:17:43,540
methods that call each other,
and at some point we have an exception.

291
00:17:44,780 --> 00:17:48,440
The exception automatically bubbles
up in the stack, and then we can

292
00:17:48,640 --> 00:17:52,920
manage it in the correct layer,
and we don't need to manage it directly

293
00:17:53,120 --> 00:17:57,160
in the caller, as it was the case
for the `nil` check.

294
00:17:58,220 --> 00:18:03,300
A `NullObject` is a way to use messages
to manage default values and default

295
00:18:03,500 --> 00:18:04,980
cases in the behavior of our systems.

296
00:18:05,180 --> 00:18:09,960
So we could deal with dispatch and
messages instead of if checks.

297
00:18:10,340 --> 00:18:14,580
We can avoid null checks returning
polymorphic objects either by using

298
00:18:14,780 --> 00:18:18,200
objects that are already available
in the system, like collections

299
00:18:18,400 --> 00:18:22,660
and zeros, but we can also create
our own creating `NullObjects`,

300
00:18:23,400 --> 00:18:26,160
implementing our own,
and also remember to initialize

301
00:18:26,360 --> 00:18:29,980
your variables to avoid checking
for `nil` in the client.


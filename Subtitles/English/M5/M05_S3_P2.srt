1
00:00:04,980 --> 00:00:07,300
- Hello, welcome to this presentation.

2
00:00:07,600 --> 00:00:10,560
In this presentation,
we are going to see an application

3
00:00:10,760 --> 00:00:12,560
of the Command Design Pattern.

4
00:00:13,560 --> 00:00:17,340
The goals for this presentation
is to see the command design pattern

5
00:00:17,540 --> 00:00:24,280
in action and see a specific framework
of Pharo that we use to implement

6
00:00:24,480 --> 00:00:26,740
a more complex command design pattern.

7
00:00:27,780 --> 00:00:31,500
Let's start with this example.

8
00:00:32,060 --> 00:00:33,220
Well, we have Commander.

9
00:00:33,420 --> 00:00:37,600
Commander is a framework of Pharo
that allows us to create actions

10
00:00:37,800 --> 00:00:42,000
and commands for the user,
for our application.

11
00:00:43,340 --> 00:00:50,740
It can produce toolbars and menus
and it has the ability to show our

12
00:00:50,940 --> 00:00:53,520
actions in the UI, in the user
interface.

13
00:00:53,720 --> 00:00:59,240
But this user interface is performed
in a way that is decoupled from

14
00:00:59,440 --> 00:01:00,200
the command itself.

15
00:01:00,400 --> 00:01:01,520
It's using decorators.

16
00:01:01,720 --> 00:01:06,900
This is a good example of combining
two or more design patterns to get

17
00:01:07,100 --> 00:01:08,140
a better solution.

18
00:01:09,220 --> 00:01:12,940
As we can see, we will represent,
as it says in Command,

19
00:01:13,380 --> 00:01:15,620
our operations with objects.

20
00:01:16,160 --> 00:01:20,360
In this case, we are going to create
a new object of the class.

21
00:01:21,260 --> 00:01:24,860
Add a contact in this simple example
where we have a phone book.

22
00:01:25,300 --> 00:01:30,440
We are going to create two operations
where we can add a new contact or

23
00:01:30,640 --> 00:01:31,400
remove it.

24
00:01:31,760 --> 00:01:35,660
And basically, what we are going
to do is create a new command of

25
00:01:35,860 --> 00:01:36,620
this class.

26
00:01:36,820 --> 00:01:39,740
We are going to have a class for
each of these commands and we are

27
00:01:39,940 --> 00:01:42,260
going to create it in a given context.

28
00:01:42,460 --> 00:01:45,900
In this case, we are going to create
it in the context of aPresenter.

29
00:01:46,100 --> 00:01:52,760
aPresenter, basically you can see
it as the context of the whole window

30
00:01:52,960 --> 00:01:56,480
with the information inside,
with the widgets and the information

31
00:01:56,680 --> 00:01:57,440
that is inside.

32
00:01:57,820 --> 00:02:01,320
Once we have the object,
we can directly execute it.

33
00:02:01,520 --> 00:02:05,300
But this way of using is not normally
what we are going to do.

34
00:02:05,500 --> 00:02:09,780
We are not going to create the object
and directly execute it.

35
00:02:09,980 --> 00:02:15,540
But we are going to create the command
and give it to the framework to

36
00:02:15,740 --> 00:02:20,360
execute it when the user clicks
on the given option in the menu.

37
00:02:20,760 --> 00:02:24,980
This execute is delayed from the
creation of the command.

38
00:02:26,520 --> 00:02:33,100
We can see here a class diagram
of how Commander is structured.

39
00:02:33,420 --> 00:02:41,340
We have a common abstract class
for all our commands that has the

40
00:02:41,540 --> 00:02:45,000
common behavior and so we can reuse
the behavior.

41
00:02:46,220 --> 00:02:52,180
All the commands can understand
a class method to create them,

42
00:02:52,380 --> 00:02:56,160
call it for context, that receives
the context of execution.

43
00:02:57,340 --> 00:03:02,680
It's important to see the API exposed
by the abstract superclass.

44
00:03:02,880 --> 00:03:06,340
In this case, we have a method to
execute.

45
00:03:06,540 --> 00:03:11,360
That is basically what we have in
all command design patterns.

46
00:03:11,620 --> 00:03:16,260
But also, we can see that it has
the responsibility to know if it

47
00:03:16,460 --> 00:03:18,360
can be executed in a given context.

48
00:03:18,560 --> 00:03:24,940
For example, in the previous example,
we cannot remove the element from

49
00:03:25,140 --> 00:03:27,740
the phone book if there is no one
that is selected.

50
00:03:28,120 --> 00:03:31,640
So the command knows that is only
applicable when there is a valid

51
00:03:31,840 --> 00:03:32,600
selection.

52
00:03:33,340 --> 00:03:39,540
Then we have here a subclass,
a concrete subclass that we are

53
00:03:39,740 --> 00:03:42,260
going to create to represent our
command.

54
00:03:43,040 --> 00:03:49,240
Also, there is a useful helper class
that allows us to create easy commands

55
00:03:49,440 --> 00:03:52,220
from blocks directly,
passing two blocks.

56
00:03:52,420 --> 00:03:57,160
One block that is the block that
will be executed when this command

57
00:03:57,360 --> 00:04:05,200
is executed, and another block that
will be evaluated when we ask the

58
00:04:05,400 --> 00:04:08,320
operation if it can be executed
in the given code.

59
00:04:09,440 --> 00:04:13,700
Usually, this is done for easy creating
commands.

60
00:04:14,000 --> 00:04:21,800
But normally, what we want to do
is to create our commands as subclasses

61
00:04:22,000 --> 00:04:28,960
of CmCommand because like that,
we can create our objects and add

62
00:04:29,160 --> 00:04:33,900
instance variables and add the state
required for performing the action.

63
00:04:34,960 --> 00:04:39,100
Also, we can see that we have two
parts in this diagram.

64
00:04:39,480 --> 00:04:43,320
On the left, we have all the elements
that are proper to the command,

65
00:04:43,640 --> 00:04:47,800
and on the right, we have a hierarchy
of decorators that allows us to

66
00:04:48,000 --> 00:04:50,600
add more functionality to the previous
command.

67
00:04:50,800 --> 00:04:56,040
For example, adding the ability
to have an icon or a shortcut key

68
00:04:56,240 --> 00:05:00,600
when these commands are exposed
in a menu or in a toolbar.

69
00:05:01,300 --> 00:05:07,200
Like this, we can see the two
responsibilities that we can have

70
00:05:07,400 --> 00:05:11,840
in Commander and how we can compose
two different design patterns to

71
00:05:12,040 --> 00:05:16,180
get to a complex solution,
to solve a complex problem,

72
00:05:16,460 --> 00:05:17,700
not only to have a complex solution.

73
00:05:17,900 --> 00:05:23,580
In this case, let's see our
AddContactCommand, what it will do.

74
00:05:23,940 --> 00:05:28,940
Well, one of the properties that
we have in Commander is that we

75
00:05:29,140 --> 00:05:31,940
want to have that all the commands
can describe themselves.

76
00:05:32,320 --> 00:05:35,580
So each of them will have a name
and a description.

77
00:05:35,960 --> 00:05:40,240
This information is important to
build the UI, so the user knows

78
00:05:40,440 --> 00:05:44,420
what operations are there and how
to use them and what they are doing.

79
00:05:44,620 --> 00:05:47,800
And this is provided by the framework.

80
00:05:48,220 --> 00:05:52,400
Each of them will just give the
name and the description and the

81
00:05:52,600 --> 00:05:58,280
framework will create the required
element in the user interface.

82
00:05:58,480 --> 00:06:03,440
For example, that each of the menu
options will have a describing text

83
00:06:03,640 --> 00:06:09,040
saying what it's doing and what
are the icon or the shortcut,

84
00:06:09,240 --> 00:06:10,000
if it has.

85
00:06:11,600 --> 00:06:17,160
As we can see, AddContactCommand
will have its execute method that

86
00:06:17,360 --> 00:06:22,920
is what it's doing and it will perform
the action on the target object.

87
00:06:23,120 --> 00:06:26,380
In this case, on the contact book,
on the phone book.

88
00:06:27,200 --> 00:06:32,240
One important thing about Commander
is that we can extend it to have

89
00:06:32,440 --> 00:06:36,120
specific requirements for each of
the commands.

90
00:06:36,320 --> 00:06:40,020
We can have commands in this case,
in this little example,

91
00:06:40,500 --> 00:06:44,420
we have commands that has been extended
to be part of a spec.

92
00:06:44,720 --> 00:06:49,380
A spec is our framework to implement
the applications in top of Pharo

93
00:06:49,580 --> 00:06:52,460
to implement the user interface
of applications.

94
00:06:52,660 --> 00:06:58,880
And we can extend the commands in
a way just extending and adding

95
00:06:59,080 --> 00:07:03,380
a new class that when we implement
applications in a spec,

96
00:07:03,580 --> 00:07:09,240
they will instantiate,
will create classes extending from

97
00:07:09,440 --> 00:07:10,200
StCommand.

98
00:07:10,860 --> 00:07:15,960
As we see, we see here the extensibility
of this solution and how we can

99
00:07:16,160 --> 00:07:21,780
extend the command design pattern
just adding new subclasses to the

100
00:07:21,980 --> 00:07:24,580
abstract or to the concrete command
class.

101
00:07:26,140 --> 00:07:28,100
The same happens with the decorator
part.

102
00:07:28,300 --> 00:07:34,480
We can start adding a new decorator
that will take one of the commands

103
00:07:34,680 --> 00:07:42,380
and will wrap it and will be able
to create the buttons in the toolbar.

104
00:07:42,580 --> 00:07:50,660
Like this, we can see that the original
framework does not know about the

105
00:07:50,860 --> 00:07:54,720
existence of spec, but this is added
through the points of extension.

106
00:07:56,460 --> 00:08:02,240
Now we can see that we have added
to command a way to create it as

107
00:08:02,440 --> 00:08:06,740
a spec command and we are going
to do that taking exactly the existing

108
00:08:06,940 --> 00:08:09,940
command and just decorating them
with SpCommand.

109
00:08:11,600 --> 00:08:17,180
And in this case, it will add the
idea of having an icon and having

110
00:08:17,380 --> 00:08:19,540
a shortcut to execute it.

111
00:08:19,740 --> 00:08:26,360
This is an interesting way of extending
the commands that we have with new

112
00:08:26,560 --> 00:08:30,900
functionality, adding in this case
a default icon and a default shortcut.

113
00:08:31,360 --> 00:08:36,080
Let's see how we implement one of
these commands with all the flavors.

114
00:08:36,280 --> 00:08:40,900
Well, basically we do exactly the
same because the extension is

115
00:08:41,100 --> 00:08:46,700
transparent to it and the command
still only knows how to execute

116
00:08:46,900 --> 00:08:48,620
in a given context.

117
00:08:48,820 --> 00:08:51,980
They have a really simple execute
command.

118
00:08:52,280 --> 00:08:56,860
That is what we want to have,
a simple and a well-distributed

119
00:08:57,060 --> 00:08:57,920
responsibility.

120
00:08:59,160 --> 00:09:03,600
Coming back from all these ideas,
we can say that commands are first

121
00:09:03,800 --> 00:09:04,560
class actions.

122
00:09:04,760 --> 00:09:08,280
Remember that we want to take our
actions and create objects that

123
00:09:08,480 --> 00:09:09,240
represent them.

124
00:09:09,440 --> 00:09:15,780
So we can manipulate them and delay
the execution and perform undo,

125
00:09:15,980 --> 00:09:20,460
replay, optimization,
show them in a list or render them

126
00:09:20,660 --> 00:09:21,420
through the UI.

127
00:09:22,900 --> 00:09:28,680
The commands are elements in our
system and we want to handle them.

128
00:09:29,140 --> 00:09:34,040
This is important also that you
check the lecture about the command

129
00:09:34,240 --> 00:09:39,820
design pattern to see the consequences
of using it and when we want and

130
00:09:40,020 --> 00:09:42,000
when we don't want to use it. &nbsp;&nbsp;


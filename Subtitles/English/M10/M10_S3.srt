1
00:00:04,420 --> 00:00:06,560
- Hello,
welcome to this lecture.

2
00:00:06,760 --> 00:00:11,520
In this lecture, we are going to
talk about the types and the method

3
00:00:11,720 --> 00:00:12,480
lookup.

4
00:00:14,090 --> 00:00:17,610
Basically, we are going to start
remembering how the lookup works.

5
00:00:18,190 --> 00:00:23,450
We are going to talk about what
are static types and how it reacts

6
00:00:23,650 --> 00:00:28,890
with dynamic types, how the type
checker works in the middle and

7
00:00:29,090 --> 00:00:31,130
how it affects the method lookup.

8
00:00:31,330 --> 00:00:36,890
So first, let's start remembering
how the method lookup,

9
00:00:37,090 --> 00:00:40,630
how is resolved when we send a message.

10
00:00:41,310 --> 00:00:44,470
Sending a message basically is a
two-step process.

11
00:00:44,670 --> 00:00:49,430
The first is to look up the method
that matches the message that we

12
00:00:49,630 --> 00:00:52,730
are sending and execute this method
on the receiver.

13
00:00:53,170 --> 00:01:00,130
So every time we are sending a message,
we have to start looking up the

14
00:01:00,330 --> 00:01:05,010
method to execute and then we'll
execute it on the receiver.

15
00:01:07,790 --> 00:01:11,910
Always the lookup starts in the
class of the receiver.

16
00:01:12,550 --> 00:01:15,930
So we start in this case,
we have the aColoredRectangle,

17
00:01:16,370 --> 00:01:20,830
that is 'ColoredRectangle' class,
we are going to start looking at it.

18
00:01:21,210 --> 00:01:25,370
If it is not in this class,
we are going to go to the superclass

19
00:01:25,570 --> 00:01:26,750
and going to find it.

20
00:01:26,950 --> 00:01:30,310
We are sending the message area,
we are going to find this and this

21
00:01:30,510 --> 00:01:33,990
is the method that we are going
to execute on the receiver.

22
00:01:34,850 --> 00:01:39,870
This was the original idea of having

23
00:01:40,070 --> 00:01:43,790
a message send based system.

24
00:01:44,230 --> 00:01:48,450
But the problem is that when it
started having the idea of static

25
00:01:48,650 --> 00:01:53,610
types and static type checking,
we have polluted this beautiful model.

26
00:01:53,810 --> 00:01:57,190
And now we have problems that how
it works with the static type,

27
00:01:57,450 --> 00:02:02,010
what is dynamic type and how overloading
works.

28
00:02:03,390 --> 00:02:07,670
Basically, we have to start defining
what is the type of a variable.

29
00:02:08,610 --> 00:02:11,170
Yes, we have this simple program.

30
00:02:11,770 --> 00:02:17,450
We can see that a variable is a
box with a label.

31
00:02:17,710 --> 00:02:22,130
It's a box that we can have a name
and references to object,

32
00:02:22,330 --> 00:02:24,370
but also it has a type.

33
00:02:25,190 --> 00:02:30,190
The type of the variable indicates
what kind of object we can reference

34
00:02:30,390 --> 00:02:31,150
from it.

35
00:02:31,770 --> 00:02:37,710
So we can see it like a box where
we can only put the type of objects

36
00:02:37,910 --> 00:02:41,850
that are of this type of the variable.

37
00:02:42,050 --> 00:02:45,050
We have to have an accord between
the type of the variable and the

38
00:02:45,250 --> 00:02:47,210
type of the object that we are putting
on.

39
00:02:47,630 --> 00:02:54,370
Of course, when we say the type,
we say the type and its subtypes

40
00:02:54,570 --> 00:02:59,570
or in this case, for example,
if the variable is the type A,

41
00:03:00,410 --> 00:03:05,530
we can put all the objects that
are the class A and its subclasses.

42
00:03:06,310 --> 00:03:07,710
What is a type checker?

43
00:03:07,910 --> 00:03:12,950
Well, some language, some
object-oriented languages like Java,

44
00:03:13,590 --> 00:03:16,990
C-Sharp have a type checker.

45
00:03:17,190 --> 00:03:20,950
Basically, a type checker is a tool
that in compilation time,

46
00:03:21,150 --> 00:03:24,670
before executing the program,
just when we are compiling the program,

47
00:03:24,990 --> 00:03:30,930
we'll check to see if all the uses
of a variable are congruent with

48
00:03:31,130 --> 00:03:32,630
the objects that we are putting on.

49
00:03:33,490 --> 00:03:39,910
We are trying to see if all the
reference that we store in a variable

50
00:03:40,110 --> 00:03:41,210
has the correct type.

51
00:03:41,410 --> 00:03:45,090
With this type information,
the idea is that we are avoiding

52
00:03:45,290 --> 00:03:48,810
to send unknown messages to a given
object.

53
00:03:50,710 --> 00:03:56,630
So to do this, the type checker
bases it on the static typechanges,

54
00:03:56,970 --> 00:04:01,870
but we also have what is called
dynamic types, that is the type

55
00:04:02,070 --> 00:04:04,570
of a variable during the execution
of a program.

56
00:04:05,790 --> 00:04:10,990
In this case, we have the variable
a that is defined to have a type

57
00:04:11,190 --> 00:04:12,710
of class A.

58
00:04:13,690 --> 00:04:19,550
The static type of this variable
is class A, you can see here,

59
00:04:20,450 --> 00:04:22,750
and is assigned with this declared.

60
00:04:22,970 --> 00:04:27,030
The static type of a variable never
changes because we say it explicitly

61
00:04:27,230 --> 00:04:30,870
when we declare the variable and
it will never change.

62
00:04:32,650 --> 00:04:37,430
The dynamic type on the other side
is the type of the objects that

63
00:04:37,630 --> 00:04:39,570
are pointed by this variable a.

64
00:04:39,770 --> 00:04:45,170
In a given point of time,
we can have that this variable a

65
00:04:45,370 --> 00:04:48,910
points to an object, an instance
of the class B.

66
00:04:49,590 --> 00:04:53,870
In this case, for making it work
and this to compile, B should be

67
00:04:54,070 --> 00:04:55,570
a subclass of A.

68
00:04:55,910 --> 00:05:00,410
So in this point of the program,
just in this point of the program,

69
00:05:01,010 --> 00:05:06,570
until we change the value of a,
A has a dynamic type B,

70
00:05:06,930 --> 00:05:09,550
because it's the type of the object
that we are pointing.

71
00:05:09,750 --> 00:05:16,690
Yes, we have our variable a and
this is pointing to an object of class B.

72
00:05:19,720 --> 00:05:27,060
If we change the value of a in another
part of the program, we modify more

73
00:05:27,260 --> 00:05:34,810
in the future of the execution and
now make it point to an object of type A.

74
00:05:35,350 --> 00:05:39,930
We instantiate a new object,
type A and point a reference to it.

75
00:05:40,130 --> 00:05:45,950
Now the type, the dynamic type of
the variable a is the class A.

76
00:05:46,150 --> 00:05:51,290
In this case, we see that we can
have the same static type and the

77
00:05:51,490 --> 00:05:59,470
same dynamic type or not,
but usually they should be equivalent.

78
00:06:00,470 --> 00:06:02,710
So it should be a subclass.

79
00:06:02,910 --> 00:06:09,650
In this case, the value B should
be a subclass of A.

80
00:06:09,930 --> 00:06:15,030
We have our class A and here we
are going to have our class B.

81
00:06:16,210 --> 00:06:20,170
In this case, it's important to
see that they are different.

82
00:06:20,370 --> 00:06:25,570
And in most of our programs,
this is going to be what is happening.

83
00:06:26,550 --> 00:06:30,610
This idea of static types also affects
the methods.

84
00:06:30,810 --> 00:06:38,030
In the languages with static type
checking, the signature of a method,

85
00:06:38,230 --> 00:06:42,330
let's call it, if you want the full
name, the real full name of the

86
00:06:42,530 --> 00:06:47,310
method includes the type of its
argument.

87
00:06:47,530 --> 00:06:50,930
In this case, this is not the method
foo.

88
00:06:51,270 --> 00:06:54,110
We can say, oh, well,
yes, this is our method foo.

89
00:06:55,210 --> 00:07:02,250
No, in practice, this is the method
foo that receives an object of type

90
00:07:02,450 --> 00:07:04,690
A as a parameter.

91
00:07:06,690 --> 00:07:13,730
So remember that the signature includes
not only the name but also the types

92
00:07:13,930 --> 00:07:18,350
of the arguments of the message.

93
00:07:19,570 --> 00:07:24,010
This is important for the lookup
and we are going to see it much

94
00:07:24,210 --> 00:07:25,910
more in depth with an example.

95
00:07:28,340 --> 00:07:33,900
Remember that we can apply,
we can send the message foo that

96
00:07:34,100 --> 00:07:41,140
receives an A, an object of class
A with objects of instances of the

97
00:07:41,340 --> 00:07:42,100
class B also.

98
00:07:42,960 --> 00:07:49,840
Because as I always say in these
examples, B is a subclass of A.

99
00:07:50,040 --> 00:07:52,960
It's a subtype of A.

100
00:07:55,750 --> 00:08:00,890
So in this case, we are sending
the message and the message is sent

101
00:08:01,090 --> 00:08:08,270
correctly, but the static type of
the variable a is always the class

102
00:08:08,470 --> 00:08:12,030
A and the dynamic type is B.

103
00:08:12,690 --> 00:08:15,530
As before, we have a mismatch between
them.

104
00:08:16,270 --> 00:08:18,650
This is important for the method lookup.

105
00:08:18,850 --> 00:08:20,350
We will see in the examples.

106
00:08:21,470 --> 00:08:25,770
Let's see that we have this little
piece of code where we have two

107
00:08:25,970 --> 00:08:28,270
classes again; class A and B.

108
00:08:28,470 --> 00:08:32,530
And we have two methods,
two methods that are called m in

109
00:08:32,730 --> 00:08:39,930
the two cases, but one is receiving
as an argument an object of class

110
00:08:40,130 --> 00:08:43,850
A and the other is receiving an
object of class B.

111
00:08:44,870 --> 00:08:52,370
And then, we have this little snippet
of code that will create two variables;

112
00:08:52,650 --> 00:08:53,630
a and b.

113
00:08:53,830 --> 00:08:58,110
We'll declare two variables,
one of type B and one of type A,

114
00:08:58,310 --> 00:09:02,190
and we'll assign both the same object.

115
00:09:02,550 --> 00:09:05,670
So we are going to have,
if we have our diagram,

116
00:09:06,230 --> 00:09:11,810
have the variable b and the variable a,
we are going to have in this case,

117
00:09:12,610 --> 00:09:16,070
a single object B that is pointed.

118
00:09:17,070 --> 00:09:17,830
Yes.

119
00:09:18,070 --> 00:09:21,830
Now the tricky question that you
can take some time to try to answer

120
00:09:22,030 --> 00:09:25,850
to it, what are the results of all
these invocations?

121
00:09:26,050 --> 00:09:27,750
What is printing on our logic?

122
00:09:28,270 --> 00:09:30,730
We are going to see it now in a second.

123
00:09:30,930 --> 00:09:38,030
Pause the video and try to find
which is the solution for all of them,

124
00:09:38,450 --> 00:09:40,770
paying attention to the lookup.

125
00:09:43,420 --> 00:09:50,040
Well, these are the results of executing
each of the invocations that we

126
00:09:50,240 --> 00:09:51,000
were saying.

127
00:09:51,420 --> 00:09:58,520
We will see case by case to see
why the result is what we have.

128
00:09:58,720 --> 00:10:01,800
Why is executing this method in
each call?

129
00:10:03,380 --> 00:10:09,020
Because remember always that static
times determine which is the message

130
00:10:09,220 --> 00:10:14,020
that we are sending, yes,
which is the signature of the message

131
00:10:14,220 --> 00:10:19,120
that we are sending and dynamic
types determine where we look for

132
00:10:19,320 --> 00:10:22,140
the method that responds to that
message.

133
00:10:24,790 --> 00:10:29,850
When we have a static type in,
we have two different times and

134
00:10:30,050 --> 00:10:32,990
it's clear that we need to understand
them correctly.

135
00:10:33,670 --> 00:10:37,610
We have a compilation stage and
an execution stage.

136
00:10:38,170 --> 00:10:43,950
At compilation, when we are sending
a message, we have to determine,

137
00:10:44,150 --> 00:10:50,030
we have to, the objective of the
compilation is to know which is

138
00:10:50,230 --> 00:10:53,690
the message we are going to send.

139
00:10:54,650 --> 00:10:58,630
So the first thing that we need
to do is to take the static type

140
00:10:58,830 --> 00:11:02,910
of the receiver, this is important,
the static type of the receiver

141
00:11:03,110 --> 00:11:06,110
to see in which class we start checking.

142
00:11:07,270 --> 00:11:15,730
Second, that we have found this
static type, we can now ask ourselves

143
00:11:15,930 --> 00:11:21,250
if this class of the static type
defines the method that we are looking

144
00:11:21,450 --> 00:11:27,250
for with the name and if it had
this method by name, we have to

145
00:11:27,450 --> 00:11:31,930
see which is the best fit with the
parameters that we have.

146
00:11:33,840 --> 00:11:37,940
With all this information,
we are going to create the signature

147
00:11:38,140 --> 00:11:43,760
that we are going to use for the
message, the signature,

148
00:11:43,980 --> 00:11:46,380
or we can say that we have our message.

149
00:11:47,040 --> 00:11:54,640
Then when we are executing the program,
we are going to use this message

150
00:11:54,840 --> 00:11:58,880
the messages that we identified and we
are doing to do the lookup starting

151
00:11:59,080 --> 00:12:06,920
from the receiver, but basically
starting from the dynamic type of

152
00:12:07,120 --> 00:12:07,880
the receiver.

153
00:12:08,080 --> 00:12:12,080
Let's see the examples to show more
clear what is happening.

154
00:12:13,020 --> 00:12:15,820
Again, we have the same extract of code.

155
00:12:16,700 --> 00:12:20,440
Remember, we are going to do it easily.

156
00:12:21,100 --> 00:12:26,620
We have, this is a static and in
the dynamic view, we have the variables

157
00:12:26,820 --> 00:12:34,460
a and b and both are pointing to
the same object that has dynamic type B.

158
00:12:36,160 --> 00:12:44,700
So we have to see what happened
here during the compilation and

159
00:12:44,900 --> 00:12:46,760
during the execution.

160
00:12:47,720 --> 00:12:53,480
We have the first steps are done
during the compilation and then

161
00:12:53,680 --> 00:12:54,780
we have the execution.

162
00:12:55,020 --> 00:12:56,540
We can divide again.

163
00:12:57,280 --> 00:13:01,080
This part is the compilation and
this part is the execution.

164
00:13:02,820 --> 00:13:09,280
So the first thing that the compiler
will do when tries to compile this

165
00:13:09,480 --> 00:13:14,260
expression is say, "okay,
which is the static type of the

166
00:13:14,460 --> 00:13:17,820
variable a ?" In this case is the
class A.

167
00:13:18,740 --> 00:13:21,620
So we are going to look,
everything that we are going to

168
00:13:21,820 --> 00:13:25,700
look at is from the class A and
it's super classes, never the

169
00:13:25,900 --> 00:13:26,660
subclasses.

170
00:13:27,120 --> 00:13:29,940
Then we are sending the message named m.

171
00:13:30,140 --> 00:13:35,300
So we are looking for the message
m in the class A.

172
00:13:35,500 --> 00:13:36,760
Oh, we found one.

173
00:13:38,160 --> 00:13:46,020
Also, we see that the static type
of the argument here is A also.

174
00:13:46,300 --> 00:13:47,240
See the class A.

175
00:13:47,460 --> 00:13:50,700
So we have here a matching with the type.

176
00:13:51,240 --> 00:13:55,500
So we have identified that the message
to send is that.

177
00:13:57,000 --> 00:14:01,400
And now, so we are looking for the
complete name of the method that

178
00:14:01,600 --> 00:14:06,640
we are looking for is m with an
argument of type class A.

179
00:14:06,840 --> 00:14:10,020
This is the signature that we have.

180
00:14:10,600 --> 00:14:15,160
So when we are in execution mode
and we want to execute this code,

181
00:14:15,820 --> 00:14:22,020
what we do is say, okay,
what dynamic type has the variable a,

182
00:14:22,220 --> 00:14:23,540
in this case is class B.

183
00:14:23,740 --> 00:14:28,520
So they look up, we start from the
class B, but we look for always

184
00:14:28,720 --> 00:14:33,400
the method that S is called m for
a class A.

185
00:14:34,000 --> 00:14:38,100
So we start looking our class B
and we see, ah, look,

186
00:14:38,300 --> 00:14:42,000
there is a method called m,
but it's not the correct one because

187
00:14:42,200 --> 00:14:45,180
the name is not the full name,
the signature is not correct.

188
00:14:45,380 --> 00:14:47,040
So this one we don't want it.

189
00:14:47,640 --> 00:14:52,380
We continue looking in this case
in the superclass and we find the

190
00:14:52,580 --> 00:14:54,860
correct method and we execute it.

191
00:14:55,060 --> 00:14:58,520
And in the console, we have the
correct value.

192
00:14:59,500 --> 00:15:01,140
Let's see this other example.

193
00:15:01,340 --> 00:15:08,060
We have a B in a that has a,

194
00:15:08,260 --> 00:15:11,040
in this case, we are going to test
this expression.

195
00:15:11,280 --> 00:15:15,780
We have B and we are sending the
message m passing as argument,

196
00:15:16,220 --> 00:15:16,980
the little a.

197
00:15:17,780 --> 00:15:23,740
So in compilation again,
we are going to try to decide which

198
00:15:23,940 --> 00:15:26,380
is the signature of the method that
we are looking for.

199
00:15:26,780 --> 00:15:30,260
So in this case, we are starting
with the static type of B that in

200
00:15:30,460 --> 00:15:33,060
this case is the class B that is easy.

201
00:15:33,260 --> 00:15:37,520
So we are going to see the code
in the class B and in its superclasses

202
00:15:37,720 --> 00:15:39,580
in this case in B and in A.

203
00:15:40,320 --> 00:15:44,920
And we are going to look for the
method that is called with the name m.

204
00:15:45,920 --> 00:15:50,900
In this case, we are going to find
two methods that are called m,

205
00:15:51,240 --> 00:15:54,520
one in the class B and one in its
superclass.

206
00:15:55,140 --> 00:15:59,060
However, we are looking specifically
for the method.

207
00:15:59,260 --> 00:16:06,320
Remember the signature and the full
name m with the type A for its

208
00:16:06,520 --> 00:16:07,280
parameters.

209
00:16:07,480 --> 00:16:11,280
So the correct name that we are
looking for is m(A a).

210
00:16:11,480 --> 00:16:15,860
We check the compiler in compilation
times in the static checker,

211
00:16:16,060 --> 00:16:18,740
the type checker will check that
there is a method.

212
00:16:18,940 --> 00:16:22,580
Ah yes, I'll say, ah yes,
in the superclass there is the method

213
00:16:22,780 --> 00:16:23,540
that we are looking for.

214
00:16:23,740 --> 00:16:27,780
So we can compile the method and
eventually, we are going to execute.

215
00:16:28,260 --> 00:16:34,400
When we execute our code again,
we have in this case,

216
00:16:35,000 --> 00:16:39,500
the dynamic type of the variable
b is the class B.

217
00:16:39,720 --> 00:16:44,600
So we start the lookup from this
class and we are looking for the

218
00:16:44,800 --> 00:16:48,840
method with the full name,
with the full signature m that receives

219
00:16:49,040 --> 00:16:51,100
a class A as parameter.

220
00:16:51,300 --> 00:16:54,920
So in this case, we are going to
do a class B.

221
00:16:55,120 --> 00:16:58,180
Is there a method with this signature?

222
00:16:58,540 --> 00:16:59,700
No, this is not.

223
00:16:59,900 --> 00:17:06,020
So we continue looking up in the
superclass and we have found the

224
00:17:06,220 --> 00:17:09,800
one that we want to execute and
we execute and in the console we

225
00:17:10,000 --> 00:17:10,840
have the correct message.

226
00:17:11,980 --> 00:17:16,540
Let's see this example fast,
but it's interesting.

227
00:17:17,260 --> 00:17:18,440
We just do the same.

228
00:17:18,660 --> 00:17:23,340
We have the compilation and the
execution time and in the compilation

229
00:17:23,540 --> 00:17:28,080
time, the compiler tries to apply
the type checker and see,

230
00:17:28,280 --> 00:17:31,420
oh yes, these programs looks nice,
it's sound.

231
00:17:32,020 --> 00:17:37,260
So we start by taking the static
type of the variable b.

232
00:17:37,700 --> 00:17:41,140
The static type of the variable
b is the class B.

233
00:17:42,240 --> 00:17:43,000
Yes.

234
00:17:43,200 --> 00:17:46,620
So we are going to check again in
the B and it's in superclass.

235
00:17:47,440 --> 00:17:49,800
We have found a method that is called m.

236
00:17:50,000 --> 00:17:56,020
So we need to know the type of the
arguments of this method m.

237
00:17:56,920 --> 00:18:02,000
In this case, we are going to check
the static type of the variable

238
00:18:02,200 --> 00:18:07,500
b and we are going to see that this
of the class B.

239
00:18:08,020 --> 00:18:13,500
So now the signature that we are
looking for is basically m,

240
00:18:13,860 --> 00:18:19,900
but this name with a B,
a capital B, with the class B.

241
00:18:20,140 --> 00:18:24,920
This program is good because all
the objects that are of class B

242
00:18:25,120 --> 00:18:28,360
understand the message m with a
B as parameter.

243
00:18:28,640 --> 00:18:29,520
So this is cool.

244
00:18:29,740 --> 00:18:31,460
We can compile the program.

245
00:18:32,220 --> 00:18:36,140
And now in execution time,
we are going to do the lookup.

246
00:18:36,520 --> 00:18:40,840
The lookup starts in the class B
because the dynamic type of the

247
00:18:41,040 --> 00:18:42,620
variable b is the class B.

248
00:18:42,820 --> 00:18:43,580
So it's cool.

249
00:18:43,780 --> 00:18:48,000
And we are looking for this signature
there.

250
00:18:48,320 --> 00:18:54,060
So we are going to find it here
and we are going to execute it and

251
00:18:54,260 --> 00:18:55,960
print the correct exit.

252
00:18:57,740 --> 00:18:59,820
Let's see this example.

253
00:19:03,190 --> 00:19:06,200
In this example is exactly the same
procedure.

254
00:19:06,460 --> 00:19:08,420
We have the compilation and execution.

255
00:19:08,620 --> 00:19:14,920
The compilation will get the type
of the variable a, in this case,

256
00:19:15,380 --> 00:19:18,900
the static type is A,
the class A.

257
00:19:19,100 --> 00:19:21,500
So we only look for in the class A.

258
00:19:21,700 --> 00:19:25,120
We don't care what happens in B.

259
00:19:26,480 --> 00:19:29,640
We have found that there is a method m,
that's okay.

260
00:19:29,960 --> 00:19:30,980
We have found it.

261
00:19:31,380 --> 00:19:35,480
And here, we want to establish which
is the static type of the variable b.

262
00:19:35,680 --> 00:19:38,730
The static type of the variable
b is the class B.

263
00:19:39,900 --> 00:19:40,660
Yes.

264
00:19:40,860 --> 00:19:49,160
But remember that we have a subtype
between B and A.

265
00:19:49,400 --> 00:19:56,060
So all the objects of instances
of B are also of the type I A.

266
00:19:56,440 --> 00:20:02,160
So it's the same that we would say

267
00:20:02,360 --> 00:20:08,120
that this variable b has the type
class B and the class A.

268
00:20:08,520 --> 00:20:13,200
And as we are looking for methods
with one or the other,

269
00:20:13,760 --> 00:20:19,620
we found the one with a signature
with the class A as parameter.

270
00:20:19,820 --> 00:20:22,920
So this is the signature that we
want to have.

271
00:20:23,760 --> 00:20:31,400
As the compiler has found a solution,
has found a method, a valid message

272
00:20:31,600 --> 00:20:36,200
to send, this compiles code and
we can execute it.

273
00:20:36,400 --> 00:20:44,200
And when we execute, again,
remember that we have the two variables

274
00:20:44,400 --> 00:20:48,540
pointing always to the same object B.

275
00:20:49,620 --> 00:20:54,840
We have the dynamic type of the
variable a is B.

276
00:20:55,040 --> 00:21:00,900
So the lookup starts in the class B,
but we are looking for the method

277
00:21:01,100 --> 00:21:03,100
m with the type A.

278
00:21:03,300 --> 00:21:10,180
So the only one that we can find
because here is not the good one.

279
00:21:10,620 --> 00:21:15,020
We found the one in the class A
and we execute that one.

280
00:21:15,220 --> 00:21:16,800
And that one is what is print.

281
00:21:17,560 --> 00:21:24,300
A final example that in this case
will show a different situation

282
00:21:24,500 --> 00:21:29,280
is that imagine again,
we have class A and B and we have

283
00:21:29,480 --> 00:21:33,560
a class C that is not related to
any of them.

284
00:21:33,820 --> 00:21:39,740
We have A, B, this is class B and
we have class C here,

285
00:21:40,060 --> 00:21:44,800
completely out of the relationship,
of the subtype relationship.

286
00:21:46,120 --> 00:21:52,440
So when we want to compile this
expression, we take the static type

287
00:21:52,640 --> 00:21:56,380
of the variable a and in this case is A.

288
00:21:56,580 --> 00:22:01,400
So we start looking in the class A.

289
00:22:02,220 --> 00:22:07,140
We have found the method m,
but we need to validate that the

290
00:22:07,340 --> 00:22:12,820
parameter is the correct one,
like we have done before.

291
00:22:13,020 --> 00:22:17,320
But now we check the variable c,
the static type and this case is

292
00:22:17,520 --> 00:22:19,420
the class C.

293
00:22:19,620 --> 00:22:29,880
And if we see there is no relationship
between the class C and the class A,

294
00:22:30,080 --> 00:22:35,500
so we cannot use an object instance
of C as an A.

295
00:22:35,760 --> 00:22:42,120
So there is no way that this works
and this method is not valid.

296
00:22:42,320 --> 00:22:47,860
So the compiler say this cannot
be compiled because there is no

297
00:22:48,060 --> 00:22:49,920
valid message to be sent.

298
00:22:52,500 --> 00:22:55,480
The examples that we have seen are
really, really simple.

299
00:22:55,700 --> 00:23:01,020
You have to be very careful because
the static types get really tricky

300
00:23:01,220 --> 00:23:06,540
when it introduces new rules to

301
00:23:06,740 --> 00:23:11,960
the method lookup and can end in
a strange execution and unwanted

302
00:23:12,160 --> 00:23:13,400
results.

303
00:23:14,600 --> 00:23:19,780
For more details, you have the lecture
on overloading and interfaces that

304
00:23:19,980 --> 00:23:24,560
you can check or you can recheck
this video and check the examples

305
00:23:24,760 --> 00:23:27,880
slowly and following the steps one
by one.

306
00:23:28,440 --> 00:23:31,780
The rules that we have seen in these
examples are the ones that are applied,

307
00:23:32,360 --> 00:23:37,120
but in more complex examples,
they are getting more complex itself,

308
00:23:37,320 --> 00:23:38,380
but are the same roots.


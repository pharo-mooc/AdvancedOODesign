1
00:00:04,400 --> 00:00:05,160
Hello!

2
00:00:05,360 --> 00:00:08,140
In this lecture, we will look at
the two interfaces of a class.

3
00:00:09,660 --> 00:00:13,380
So the outline of this lecture will
be the following: we will do a short

4
00:00:13,580 --> 00:00:16,060
reminder of the essence of
object-oriented programming that

5
00:00:16,260 --> 00:00:17,720
we already saw at the beginning
of this MOOC.

6
00:00:18,180 --> 00:00:21,860
Then we will look at one question
that you can find in books.

7
00:00:22,580 --> 00:00:27,520
And we will see that classes have
two kinds of clients.

8
00:00:29,060 --> 00:00:30,140
So let's go back to the roots.

9
00:00:30,340 --> 00:00:36,280
So if you remember correctly,
inheritance is about the need for

10
00:00:36,480 --> 00:00:39,140
doing some small adaptations to
existing classes.

11
00:00:39,940 --> 00:00:44,760
So I have an existing class there
and I want to reuse some of its

12
00:00:44,960 --> 00:00:47,460
behavior and without reimplementing it.

13
00:00:47,660 --> 00:00:49,620
So the solution is to do class
inheritance.

14
00:00:49,820 --> 00:00:53,800
So here in the subclass,
what I can do in the subclass is

15
00:00:54,000 --> 00:00:55,900
to express a delta.

16
00:00:56,100 --> 00:01:02,300
So it means that I will implement
a new state or a new behavior or

17
00:01:02,500 --> 00:01:04,080
I can refine behavior,
etc.

18
00:01:04,480 --> 00:01:06,440
So you already saw all of that.

19
00:01:07,380 --> 00:01:12,020
And now the question is,
sometimes in books you can find

20
00:01:12,220 --> 00:01:18,500
the idiom: "fields should be ‘private‘."
And the goal of this lecture is

21
00:01:18,700 --> 00:01:21,280
to think a little bit about this idiom.

22
00:01:22,140 --> 00:01:24,840
So here we have a Java example.

23
00:01:25,900 --> 00:01:29,980
In this class, there is a ‘private‘
field, an instance variable x.

24
00:01:31,100 --> 00:01:35,820
And then in the method ‘foo‘,
I can use x.

25
00:01:36,420 --> 00:01:38,160
So this is pretty standard in Java.

26
00:01:40,580 --> 00:01:43,440
So what are the consequences of
this example?

27
00:01:44,700 --> 00:01:49,840
So here, clients of this class cannot
access the instance variable ‘x‘

28
00:01:50,040 --> 00:01:50,820
because it is ‘private‘.

29
00:01:51,040 --> 00:01:54,540
So this is a good point from the
encapsulation point of view.

30
00:01:55,340 --> 00:02:01,220
But in subclasses, we cannot access
‘x‘ too because this is a ‘private‘

31
00:02:01,420 --> 00:02:02,180
field.

32
00:02:02,380 --> 00:02:06,280
So this is not very good because
if you remember correctly,

33
00:02:06,560 --> 00:02:11,620
object-oriented programming focuses
on expressing deltas in subclasses.

34
00:02:11,820 --> 00:02:15,380
So it means that we want to adapt
the code of superclasses in subclasses

35
00:02:15,580 --> 00:02:16,340
by expressing a delta.

36
00:02:17,200 --> 00:02:22,100
And having a ‘private‘ field means
that I cannot easily express this

37
00:02:22,300 --> 00:02:24,720
delta because I cannot access the
fields of the superclass.

38
00:02:28,580 --> 00:02:34,860
So this example shows that there
are two kinds of clients for a class.

39
00:02:35,820 --> 00:02:37,300
First, its users.

40
00:02:38,340 --> 00:02:40,520
So for example, a ‘Person‘ is a
client of an ‘Address‘.

41
00:02:41,520 --> 00:02:45,300
And then the second kind of clients
are subclasses, its extenders.

42
00:02:47,940 --> 00:02:51,560
And if you look at the extenders
when you are writing a class,

43
00:02:52,900 --> 00:02:58,340
you cannot know if it will be extended
in the future and if another programmer

44
00:02:58,540 --> 00:03:02,300
will need to extend it to express
a new delta.

45
00:03:02,900 --> 00:03:08,360
So that's why ‘final‘ and ‘private‘
prevent expressing delta in subclasses.

46
00:03:08,560 --> 00:03:12,980
So it means that this is much better
to use ‘protected‘ instead of ‘final‘

47
00:03:13,180 --> 00:03:13,940
and ‘private‘.

48
00:03:14,140 --> 00:03:17,180
That will limit the extensibility
of a class.

49
00:03:18,280 --> 00:03:23,340
So the correct idiom,
in fact, should be: "Fields should

50
00:03:23,540 --> 00:03:26,660
be ‘private‘ and the class should
provide ‘protected‘ accessors."

51
00:03:26,880 --> 00:03:33,420
Or a simpler one: "Fields should
be ‘protected‘." And if you look at it,

52
00:03:33,780 --> 00:03:35,880
this is the default mechanism in Pharo.

53
00:03:38,960 --> 00:03:43,180
And now the benefits of it are that
if a field is ‘protected‘,

54
00:03:43,380 --> 00:03:46,780
so here the instance variable ‘x‘
is ‘protected‘ in A.

55
00:03:47,740 --> 00:03:51,300
So it means that it can be used
in the implementation on the ‘foo‘

56
00:03:51,500 --> 00:03:56,720
method in A, but it can also be
used in the ‘foo‘ implementation,

57
00:03:57,700 --> 00:04:01,140
the redefinition of ‘foo‘ in B by
its extender.

58
00:04:01,840 --> 00:04:04,700
So this is good from the encapsulation
point of view because the client

59
00:04:04,900 --> 00:04:07,240
cannot access it directly.

60
00:04:07,580 --> 00:04:11,260
This is not possible because this
is a ‘protected‘ field.

61
00:04:11,460 --> 00:04:15,040
But in the subclass, I can do it.

62
00:04:15,260 --> 00:04:16,280
I can use x.

63
00:04:17,580 --> 00:04:21,860
So this is good for both encapsulation
and extensibility.

64
00:04:23,040 --> 00:04:27,900
As a conclusion of this short lecture,
OOP, object-oriented programming,

65
00:04:28,180 --> 00:04:30,900
is about encapsulation and extension.

66
00:04:31,200 --> 00:04:33,620
And this is always forgotten.

67
00:04:34,700 --> 00:04:40,380
And that a class has two kinds of users,
its users and its extenders.


1
00:00:03,990 --> 00:00:04,950
- Hello, everybody.

2
00:00:05,250 --> 00:00:12,180
Welcome to this lecture on Inheritance,
Lookup, with a specific focus on `self`.

3
00:00:12,510 --> 00:00:15,750
So the idea of this lecture,
this is that we will look at what

4
00:00:15,950 --> 00:00:18,600
is sending a message and the Lookup
once for all, so after,

5
00:00:18,800 --> 00:00:19,770
you will know it forever.

6
00:00:20,340 --> 00:00:23,910
So basically in this lecture,
we will look at what is Sending

7
00:00:24,110 --> 00:00:28,140
a message, what is Method Lookup
and what is the semantics of `self`.

8
00:00:28,340 --> 00:00:31,260
And by the way, this is also equivalent
of `this` in Java.

9
00:00:31,460 --> 00:00:36,900
The semantic is exactly the same in both,
they are just different syntaxes.

10
00:00:37,100 --> 00:00:38,610
But this is the same in Java,
C#, Pharo.

11
00:00:40,590 --> 00:00:45,300
So if you remember, in the previous
lecture, we mentioned that inheritance

12
00:00:45,500 --> 00:00:46,520
has two aspects.

13
00:00:46,720 --> 00:00:51,840
One that is the inheritance of state,
which is basically static because

14
00:00:52,040 --> 00:00:52,890
it is done at compile time.

15
00:00:53,090 --> 00:00:57,150
So this is at the moment where you
define a class, the compiler knows

16
00:00:57,350 --> 00:01:02,400
that the state of an instance will
be represented by the state of the

17
00:01:02,600 --> 00:01:04,740
class and the state of its `super`
class.

18
00:01:05,340 --> 00:01:11,190
And inheritance has also a dynamic
aspect, that is the inheritance

19
00:01:11,390 --> 00:01:12,150
of the behavior.

20
00:01:12,350 --> 00:01:17,370
So this means that when I send a
message, which method should I execute.

21
00:01:17,570 --> 00:01:20,100
And this is on this part that we
will focus now.

22
00:01:20,300 --> 00:01:24,960
So if you see, the key aspect,
this is what is sending a message.

23
00:01:25,260 --> 00:01:28,200
Sending a message, this is also,
in Java, by the way, called,

24
00:01:28,400 --> 00:01:31,710
I call methods or I invoke methods.

25
00:01:31,910 --> 00:01:38,810
Personally, I prefer the term Sending
a message because it implies that

26
00:01:39,010 --> 00:01:39,770
there is a lookup.

27
00:01:40,010 --> 00:01:43,730
So if we look at it, sending a message,
this is a two-step process.

28
00:01:44,150 --> 00:01:47,570
So first, we have the lookup of
the methods and second,

29
00:01:47,770 --> 00:01:51,470
we execute the method that we found
on the receiver.

30
00:01:51,670 --> 00:01:53,960
And you will see that this is really
important.

31
00:01:54,160 --> 00:01:59,240
Normally, we have some little video
later in the MOOC that says,

32
00:01:59,440 --> 00:02:05,600
`do you really understand lookup?`
And basically, this is based on

33
00:02:05,800 --> 00:02:09,860
these two steps because often you
mix things, you get something that

34
00:02:10,060 --> 00:02:11,030
is working more or less.

35
00:02:11,230 --> 00:02:15,470
It works more or less up until we
can know exactly if you don't

36
00:02:15,670 --> 00:02:16,430
understand.

37
00:02:16,640 --> 00:02:20,690
So if I look at this example on
the right, when I send the message

38
00:02:20,890 --> 00:02:26,020
`area` to `aColoredRectangle`,
I will first do the lookup.

39
00:02:26,220 --> 00:02:31,480
So the lookup will look for the methods,
oh, is there a method's name `area`?

40
00:02:31,680 --> 00:02:32,740
Yes, there is one.

41
00:02:33,040 --> 00:02:37,990
I return the method, which is this
one and I apply this method on the

42
00:02:38,190 --> 00:02:38,950
receiver.

43
00:02:39,150 --> 00:02:40,840
So you see one step, two steps.

44
00:02:41,470 --> 00:02:43,360
Now let's look at the method lookup.

45
00:02:43,560 --> 00:02:46,450
So the method lookup,
this is the first step that we saw.

46
00:02:46,650 --> 00:02:50,200
So what's happened is that the method
lookup starts in the class of the

47
00:02:50,400 --> 00:02:51,160
receiver.

48
00:02:51,360 --> 00:02:54,220
So when I send the message `area`,
the first thing that I do here,

49
00:02:54,520 --> 00:02:57,100
one step, I go to the class level.

50
00:02:57,610 --> 00:03:02,680
So when I go to the class level,
then I will check inside the class,

51
00:03:02,880 --> 00:03:05,410
oh, is there the method that I'm
looking for?

52
00:03:05,610 --> 00:03:06,370
Yes, no.

53
00:03:06,570 --> 00:03:09,160
If this is not the case,
I will go up.

54
00:03:09,360 --> 00:03:11,740
And when I find it, I just return it.

55
00:03:12,800 --> 00:03:18,200
What is important to see is that
this step, the first step will make

56
00:03:18,400 --> 00:03:21,320
that in a system like Pharo,
where class are objects,

57
00:03:21,520 --> 00:03:25,400
the same method lookup works for
both instance and classes.

58
00:03:25,940 --> 00:03:29,780
If you are fuzzy on that,
I strongly encourage you to have

59
00:03:29,980 --> 00:03:33,560
a look at the video of the first
MOOC because that really explains

60
00:03:33,760 --> 00:03:37,790
well the metaclass and the fact
that there is only one single method

61
00:03:37,990 --> 00:03:38,750
lookup.

62
00:03:38,990 --> 00:03:43,240
So if we look at it, so this is
basic things here.

63
00:03:43,440 --> 00:03:48,420
If I send the message `color` to
my 'aColoredRectangle'.

64
00:03:48,620 --> 00:03:52,160
I jump here, I see, oh,
this is `color`, I return it.

65
00:03:52,360 --> 00:03:58,470
If I send the message `area` here,
I jump to the class.

66
00:03:58,950 --> 00:04:01,290
This is not found here,
I return it.

67
00:04:01,490 --> 00:04:02,730
Nothing special here.

68
00:04:02,930 --> 00:04:05,000
This is super basic.

69
00:04:05,200 --> 00:04:11,980
So, most of the time,
the result of a lookup is cached

70
00:04:12,180 --> 00:04:15,490
and it only happens once for a given
call.

71
00:04:16,240 --> 00:04:19,330
In some languages like C++,
you have dispatch tables.

72
00:04:19,530 --> 00:04:21,970
What is really important,
which is the point that you should

73
00:04:22,170 --> 00:04:25,330
take is that conceptually,
there is a method lookup at execution

74
00:04:25,530 --> 00:04:31,030
and that virtual machines are smart
enough to not always look for the

75
00:04:31,230 --> 00:04:31,990
method.

76
00:04:32,190 --> 00:04:36,330
So now, let's look at what is `self`
or `this` for real.

77
00:04:36,530 --> 00:04:40,870
So what I suggest is that take five
minutes, write the definition on

78
00:04:41,070 --> 00:04:44,170
a little piece of paper,
put pause on the video.

79
00:04:44,370 --> 00:04:50,590
Well, your definition should have
two points, what `self` represent

80
00:04:50,790 --> 00:04:55,570
and how the method lookup happens
when a message is sent to self.

81
00:04:55,770 --> 00:04:57,120
Why do I have these two points?

82
00:04:57,320 --> 00:05:01,300
Because in the lecture on `super`,
you will see that there is a difference

83
00:05:01,500 --> 00:05:04,450
and the difference is only in one
of the two points.

84
00:05:05,140 --> 00:05:08,380
So this is important that for `self`
or `this`, you have two points,

85
00:05:08,580 --> 00:05:09,760
like that, you will be able to compare.

86
00:05:09,960 --> 00:05:14,320
So now, before my definition or
the correct definition,

87
00:05:14,520 --> 00:05:17,950
I will propose you some little
exercises.

88
00:05:19,620 --> 00:05:24,220
So first a convention that we use
in this MOOC.

89
00:05:24,420 --> 00:05:28,800
So this means that when we write `aA`,
this is an instance of `A`.

90
00:05:29,340 --> 00:05:35,400
So this means that if we are in Pharo,
we will write `aA` equals `A new`.

91
00:05:35,850 --> 00:05:36,980
This is the result.

92
00:05:37,180 --> 00:05:42,750
If you are in Java, you will write
`aA` equals `new A`.

93
00:05:45,190 --> 00:05:49,310
So we have this setup where we have
`aA` is an instance of the class `A`,

94
00:05:49,510 --> 00:05:51,040
`aB` is an instance of the class `B`.

95
00:05:51,240 --> 00:05:56,430
Now, what is the result if I send

96
00:05:56,630 --> 00:05:57,930
a message `foo` to `aA`?

97
00:05:58,980 --> 00:06:03,060
So I send a message to `aA`.

98
00:06:04,710 --> 00:06:07,020
Now I know, I look in the class.

99
00:06:07,890 --> 00:06:09,120
There is `foo`.

100
00:06:09,320 --> 00:06:10,080
Okay.

101
00:06:10,440 --> 00:06:12,600
This returns 10, so I get 10.

102
00:06:13,920 --> 00:06:17,310
Now I have my instance `aB`,
instance of the class `B`,

103
00:06:17,510 --> 00:06:21,330
I send the message `foo`,
I look for `foo`.

104
00:06:21,530 --> 00:06:24,690
Okay, I find it, okay I return 50.

105
00:06:25,350 --> 00:06:26,430
Let's look at it.

106
00:06:26,630 --> 00:06:28,680
Yes, we were right.

107
00:06:28,880 --> 00:06:29,640
That's so cool.

108
00:06:31,110 --> 00:06:36,970
So here I said, `self` always represents
the receiver, and this is what we

109
00:06:37,170 --> 00:06:38,620
will see in the next exercise.

110
00:06:38,820 --> 00:06:41,020
So let's take a more challenging
exercise.

111
00:06:41,470 --> 00:06:44,920
So now, we will look for this
expression.

112
00:06:45,120 --> 00:06:51,430
So we send the message `bar` to `aA`,
so the method `bar`, we look in

113
00:06:51,630 --> 00:06:53,500
the class, we find `bar`.

114
00:06:53,700 --> 00:06:54,850
It is defined here.

115
00:06:57,530 --> 00:07:02,510
And then, we will apply `bar` to this,

116
00:07:02,710 --> 00:07:06,230
if you remember the message passing,
I said we look for something.

117
00:07:06,430 --> 00:07:07,460
We look for the method.

118
00:07:07,660 --> 00:07:09,800
We find the method, we apply it
on the receiver.

119
00:07:10,000 --> 00:07:13,320
And then, `self` in that case represents
the receiver.

120
00:07:13,520 --> 00:07:15,680
This is what is written in the title.

121
00:07:15,880 --> 00:07:22,020
So this means that I will send a
new message `foo` to the same object.

122
00:07:22,800 --> 00:07:25,150
I will go up again, I found `foo`.

123
00:07:25,350 --> 00:07:27,750
Okay, this is 10, we got 10.

124
00:07:29,640 --> 00:07:35,820
So what you could say is that basically,
we could only find 10 because there

125
00:07:36,020 --> 00:07:36,780
is only 10.

126
00:07:37,200 --> 00:07:39,720
From the perspective of `A`,
there is only 10.

127
00:07:39,920 --> 00:07:45,060
Now, what is interesting,
in this example, this expression,

128
00:07:45,260 --> 00:07:46,020
`aB bar`.

129
00:07:46,220 --> 00:07:52,620
So what I suggest is that just take
two minutes and just ask yourself,

130
00:07:52,820 --> 00:07:53,820
okay, what is the result?

131
00:07:54,360 --> 00:07:55,740
Is it 10 or 15?

132
00:07:56,460 --> 00:08:00,530
And what you should know is that
you have a good chance to get it wrong.

133
00:08:00,730 --> 00:08:03,740
This is what we really want to make
clear.

134
00:08:03,940 --> 00:08:09,440
So I send the message `bar`,
I look for `bar` in the class of `B`,

135
00:08:09,640 --> 00:08:10,400
there is no `bar`.

136
00:08:10,680 --> 00:08:14,130
So we go up, we find `bar`,
oh, there is `bar`.

137
00:08:14,340 --> 00:08:17,820
This is we find this method,
which is the same as before.

138
00:08:19,110 --> 00:08:21,450
So now we do the same.

139
00:08:21,650 --> 00:08:26,980
We apply the method on `B` and `self`

140
00:08:27,180 --> 00:08:27,940
here.

141
00:08:28,140 --> 00:08:29,440
This is what?

142
00:08:29,640 --> 00:08:30,610
This is the receiver.

143
00:08:30,810 --> 00:08:39,160
So here, this is `aB`,
and then the message `foo` is sent

144
00:08:39,360 --> 00:08:40,990
to `B` to the instance.

145
00:08:41,190 --> 00:08:45,670
So we look for `B`, we find `B`
here and we return it here.

146
00:08:46,570 --> 00:08:48,310
And here, we get 50.

147
00:08:48,730 --> 00:08:55,180
So what you see is that even if
the method was defined in the `super`

148
00:08:55,380 --> 00:09:02,350
class, the method of the subclass
was called in place of the method

149
00:09:02,550 --> 00:09:03,400
of the `super` class.

150
00:09:03,600 --> 00:09:10,330
So if I erase a bit to make the
things clearer, it means that the

151
00:09:10,530 --> 00:09:15,540
method `foo` that is executed here
depends on the receiver.

152
00:09:16,230 --> 00:09:19,800
So if I get an instance of `B`,
this is this method that is executed.

153
00:09:20,000 --> 00:09:23,490
If I get an instance of `A`,
it's this method that is executed,

154
00:09:23,690 --> 00:09:26,700
even if the method was defined in
the `super` class.

155
00:09:27,060 --> 00:09:31,860
And that this is really the key
aspect of object orientation.

156
00:09:33,090 --> 00:09:36,390
You see the method lookup and the
late binding that is happening here.

157
00:09:37,750 --> 00:09:42,010
What I show you here,
this is the same in Java if you

158
00:09:42,210 --> 00:09:44,290
only use public method in Java.

159
00:09:44,680 --> 00:09:47,530
If you use private methods,
then you get a different result

160
00:09:47,730 --> 00:09:52,600
because the private keyword has
a different semantic than public

161
00:09:52,800 --> 00:09:53,560
methods.

162
00:09:55,070 --> 00:09:58,010
So here on this slide,
you have really the explanation,

163
00:09:58,210 --> 00:09:59,160
you can go over it.

164
00:09:59,360 --> 00:10:00,290
Let's go fast.

165
00:10:00,490 --> 00:10:07,040
So this means that `aB` is instance
of the class `B`, there is no method

166
00:10:07,240 --> 00:10:13,430
`bar` in `B`, so we look up `bar` in `A`,
we found the method `bar` in `A`.

167
00:10:13,630 --> 00:10:19,990
The method `bar` is executed and
I would add on `aB`, `self` refers

168
00:10:20,720 --> 00:10:21,480
to `aB`.

169
00:10:21,890 --> 00:10:26,600
So this means that we will resend
`foo` to `self`, so to the `B`.

170
00:10:27,290 --> 00:10:31,130
So we look up for `B` in the class
`bar`, in the class `B`,

171
00:10:31,330 --> 00:10:35,150
and then we return this method that
is executed.

172
00:10:36,610 --> 00:10:41,200
My definition, and a good definition,
the correct definition of `this`

173
00:10:41,400 --> 00:10:46,600
or `super` says that `self` represents
the receiver of the message.

174
00:10:46,800 --> 00:10:50,080
And then the second sentence,
this is: "The method lookup starts

175
00:10:51,100 --> 00:10:52,650
in the class of the receiver."

176
00:10:52,850 --> 00:10:55,810
What is important is that in this
definition sometimes people say

177
00:10:56,010 --> 00:10:58,060
this is the current instance.

178
00:10:58,260 --> 00:11:01,420
The problem is that for me,
current instance, I don't know current

179
00:11:01,620 --> 00:11:02,380
of what.

180
00:11:02,580 --> 00:11:08,140
And I always think, oh,
if I have concurrent processes,

181
00:11:08,340 --> 00:11:09,790
is it different or not?

182
00:11:09,990 --> 00:11:11,200
So here, this is very clear.

183
00:11:11,400 --> 00:11:12,490
This is based on the message.

184
00:11:12,690 --> 00:11:15,490
This is for a message,
`self` represents the receiver.

185
00:11:18,210 --> 00:11:20,610
Just a little variation.

186
00:11:24,360 --> 00:11:28,020
This is not because we introduce
an empty class in the middle that

187
00:11:28,220 --> 00:11:29,070
will change anything.

188
00:11:29,270 --> 00:11:31,920
So this means that here,
as you should guess, right,

189
00:11:32,490 --> 00:11:35,600
I will get 10, 10 and 50.

190
00:11:35,800 --> 00:11:36,560
Why?

191
00:11:36,760 --> 00:11:37,560
Because the lookup goes like that.

192
00:11:37,760 --> 00:11:42,690
So if I send the message `bar`,
if I send the message `bar` to `aC`,

193
00:11:43,200 --> 00:11:48,780
I will go up, find the method `bar`,
apply it to `C`, redo a lookup for

194
00:11:48,980 --> 00:11:49,740
`foo`.

195
00:11:49,940 --> 00:11:52,330
And this is exactly the same mechanism
that I explained before.

196
00:11:52,530 --> 00:11:57,830
So you don't have to have the method
one by one in the class and the

197
00:11:58,030 --> 00:11:58,790
`super` class.

198
00:12:00,250 --> 00:12:01,010
So you see.

199
00:12:01,990 --> 00:12:05,920
So what you should know from this
lecture: so `self` always represents

200
00:12:06,120 --> 00:12:06,880
the receiver.

201
00:12:07,080 --> 00:12:08,320
Sending a message is a two-step process.

202
00:12:08,890 --> 00:12:12,520
We look for the method and we execute
the method on the receiver.

203
00:12:13,030 --> 00:12:17,290
The lookup method in fact maps a
message to a method and it starts

204
00:12:17,490 --> 00:12:18,700
in the class of the receiver.

205
00:12:18,900 --> 00:12:22,690
What you will see is that this is
a bit different when you use the

206
00:12:22,890 --> 00:12:25,840
`super` keyword and this is what
is explained in the `super` lecture.


1
00:00:04,480 --> 00:00:06,420
Hello, welcome to this lecture.

2
00:00:06,640 --> 00:00:10,160
In this lecture, we are going to
analyze the builder design pattern.

3
00:00:10,820 --> 00:00:15,220
We are going to present how to
encapsulate object creation in our

4
00:00:15,420 --> 00:00:16,180
builder object.

5
00:00:17,560 --> 00:00:22,140
The goals for this lecture is to
present a little motivation example,

6
00:00:22,360 --> 00:00:26,320
then we are going to describe the
builder design pattern and we are

7
00:00:26,520 --> 00:00:32,900
going to see some uses and which
is the power of the builder design

8
00:00:33,100 --> 00:00:34,200
pattern in action.

9
00:00:36,080 --> 00:00:39,600
Well, what is the objective of the
builder pattern?

10
00:00:39,860 --> 00:00:42,940
The idea is that we are going to
create an object, our builder,

11
00:00:43,380 --> 00:00:48,700
that will help us to create a complex
set of objects.

12
00:00:49,460 --> 00:00:54,180
Usually, creating objects start
to get more and more complex when

13
00:00:54,380 --> 00:00:57,280
we have more and more interaction
between these objects.

14
00:00:57,480 --> 00:01:00,920
When we create a graph of objects
and these objects start having reference

15
00:01:01,120 --> 00:01:03,400
between each other, it's more and
more complex.

16
00:01:03,900 --> 00:01:06,620
It's easy when we create a single
object.

17
00:01:06,920 --> 00:01:10,480
But for a given task,
we are going to start having a more

18
00:01:10,680 --> 00:01:16,880
and more complex graph of objects
of different type with different

19
00:01:17,080 --> 00:01:20,380
configurations and with different
values for all of them.

20
00:01:20,880 --> 00:01:24,560
Creating this graph of an object
can take a lot of time.

21
00:01:25,520 --> 00:01:30,320
Also, we want to encapsulate this
creation from the user.

22
00:01:30,960 --> 00:01:36,120
So later, we can modify this graph
of objects, adding new objects or

23
00:01:36,320 --> 00:01:40,440
adding variations in this graph
without modifying the clients.

24
00:01:41,380 --> 00:01:46,360
So we want to modify this graph
of objects without affecting the client.

25
00:01:46,560 --> 00:01:49,180
We want to change it under the users'
feet.

26
00:01:50,180 --> 00:01:56,480
Also, we want to expose an API that
is closer to the client of our code

27
00:01:56,680 --> 00:02:01,000
that express what the client is
waiting and not what the objects

28
00:02:01,200 --> 00:02:05,540
we need to create or how they are
created or have the relationship

29
00:02:05,740 --> 00:02:06,860
between each of them.

30
00:02:07,160 --> 00:02:12,240
So we need to provide an API that
is closer to what the user wants to use.

31
00:02:13,020 --> 00:02:18,860
If we read the motivation of the
builder design pattern in the

32
00:02:19,060 --> 00:02:24,660
Gang of Four book, in the design pattern
book, we see that the idea is that

33
00:02:24,860 --> 00:02:29,320
we want to separate the construction
of complex objects, of complex graphs

34
00:02:29,520 --> 00:02:36,260
of objects from the user and encapsulate
the internal representation of them,

35
00:02:36,460 --> 00:02:41,000
how they are built, how they are
connected between each other,

36
00:02:41,200 --> 00:02:43,440
what are their relationship,
their internal values,

37
00:02:43,860 --> 00:02:49,020
and we can have with it different
representation because,

38
00:02:49,280 --> 00:02:54,100
for example, we can expose using
the same builder API two different

39
00:02:54,300 --> 00:02:59,120
representations of the same objects
or two different representations

40
00:02:59,320 --> 00:03:01,240
of objects to do the same task.

41
00:03:01,480 --> 00:03:04,400
For the user, this will be all
transparent.

42
00:03:04,600 --> 00:03:10,480
The idea is that we are going to
reify the construction of a complex

43
00:03:10,680 --> 00:03:13,180
graph of objects in an object.

44
00:03:15,100 --> 00:03:22,980
As we say, the builder has the specific
idea of representing the building

45
00:03:23,180 --> 00:03:26,980
of the other objects,
the creation of other objects,

46
00:03:27,780 --> 00:03:32,820
encapsulates this creation logic,
ensures that the objects that we

47
00:03:33,020 --> 00:03:36,200
are creating are well created,
that all the values are well set,

48
00:03:36,480 --> 00:03:41,180
that all the references are well set,
and that we are always having a

49
00:03:41,380 --> 00:03:46,280
good graph of objects that we can
use for the given task that we want.

50
00:03:47,920 --> 00:03:52,740
This decoupling of the creation
of the procedure of creation and

51
00:03:52,940 --> 00:03:57,240
the client allows us to have different
back-ends, what is called different

52
00:03:57,440 --> 00:04:02,000
back-ends, that basically is to
have different kinds of objects

53
00:04:02,200 --> 00:04:02,960
as a result.

54
00:04:03,160 --> 00:04:08,780
The idea of this is that our client
will talk always with our builder

55
00:04:09,240 --> 00:04:16,380
and the builder can produce a set
of representation or another

56
00:04:16,580 --> 00:04:18,100
representation completely different.

57
00:04:18,300 --> 00:04:26,040
But to the client it will be completely
transparent because this is encapsulated

58
00:04:26,240 --> 00:04:27,240
into the builder.

59
00:04:28,420 --> 00:04:34,900
For example, we can analyze the
idea of creating settings in Pharo.

60
00:04:35,180 --> 00:04:40,220
In Pharo, we have a nice settings
framework that allows us to configure

61
00:04:40,420 --> 00:04:44,600
different parts of the system,
but the idea is that the user does

62
00:04:44,800 --> 00:04:48,460
not know how to create this complex
setting object.

63
00:04:48,760 --> 00:04:54,080
They are just asking what are the
elements that they want to set.

64
00:04:54,280 --> 00:04:59,680
In this case, we are going to set
the instance variable

65
00:04:59,880 --> 00:05:05,260
'microdownAndcomments', and we are
going to establish 'Enable',

66
00:05:05,740 --> 00:05:10,180
a default value, and which is the
object that holds that instance

67
00:05:10,380 --> 00:05:11,140
variable.

68
00:05:11,340 --> 00:05:15,120
As we see, the builder in this case,
the most important part is that

69
00:05:15,320 --> 00:05:21,200
the API talks about what the client
is wanting to do, in this case,

70
00:05:21,400 --> 00:05:28,500
exposing a setting to the setting
configuration and does not say,

71
00:05:28,700 --> 00:05:30,940
is not caring about this.

72
00:05:31,140 --> 00:05:36,900
When we produce it, when we execute it,
it will generate a checkbox with

73
00:05:37,100 --> 00:05:41,320
the label that we pass,
and when we click on it,

74
00:05:41,520 --> 00:05:44,580
it will set this instance value
to the right value.

75
00:05:45,080 --> 00:05:48,880
All this behavior is hidden from
the client.

76
00:05:49,080 --> 00:05:55,140
The client only describes what it wants,
and the builder creates all the

77
00:05:55,340 --> 00:05:57,360
complex elements behind.

78
00:05:58,360 --> 00:06:03,920
As we see, the 'SettingNodeBuilder',
that is what we were analyzing before,

79
00:06:04,280 --> 00:06:07,460
just understand messages to be
configured.

80
00:06:07,660 --> 00:06:11,180
In this case, to give a default
value to the setting,

81
00:06:11,420 --> 00:06:13,600
to have a category for it.

82
00:06:14,040 --> 00:06:17,740
If we have different possible values,
we can give a domain value.

83
00:06:17,940 --> 00:06:23,780
And in this case, it will produce
a dropdown list with the different

84
00:06:23,980 --> 00:06:28,440
values, if we want to give an icon,
if we want to give a label,

85
00:06:28,640 --> 00:06:33,400
we are configuring what we want
and not how it is created.

86
00:06:36,620 --> 00:06:42,000
This setting builder has a really
nice feature is that the first is

87
00:06:42,200 --> 00:06:46,280
that we can express what we want
as in a DSL.

88
00:06:46,480 --> 00:06:52,740
The users of the settings builder
don't care how this is implemented,

89
00:06:52,940 --> 00:06:57,080
but just how to demand things to
the builder.

90
00:06:58,260 --> 00:07:03,460
We don't need to have all the creations
of setting objects, hardcoded,

91
00:07:04,180 --> 00:07:06,500
all in our code, all in our domain.

92
00:07:06,800 --> 00:07:08,840
We only use the builder.

93
00:07:09,820 --> 00:07:15,980
The builder will guarantee that
what we create is really nice and

94
00:07:16,180 --> 00:07:21,360
well done, so we don't need to care
to have problems because we put

95
00:07:21,560 --> 00:07:24,740
one object inside another that it
was not intended to.

96
00:07:25,160 --> 00:07:32,140
And all this creation is completely
encapsulated from the user.

97
00:07:32,760 --> 00:07:38,020
And like that, the user can have
the attention in other parts of

98
00:07:38,220 --> 00:07:41,940
the code and it's the setting builder
who has all the creation logic.

99
00:07:43,260 --> 00:07:47,220
We can see another example,
another example of a builder that

100
00:07:47,420 --> 00:07:50,620
we have in Pharo is the use of
Microdown.

101
00:07:51,020 --> 00:07:57,240
Microdown allows us to create
documentation pages or text pages

102
00:07:57,440 --> 00:08:04,320
with a rich text model when we can
have different elements like for

103
00:08:04,520 --> 00:08:09,360
example, code blocks,
or we can have lists, or we can have

104
00:08:09,560 --> 00:08:16,080
links, and titles, so it allows
us to create a rich text model.

105
00:08:17,120 --> 00:08:22,220
Of course, this rich text model
is backed up by a graph of objects behind,

106
00:08:23,180 --> 00:08:25,660
but we don't want to create them by hand.

107
00:08:26,260 --> 00:08:31,920
So Microdown exposes a builder API
that works in the same sense.

108
00:08:32,220 --> 00:08:37,640
In this case, the builder API talks
about the elements that the user

109
00:08:37,840 --> 00:08:41,640
of the builder want to talk,
talks about code blocks,

110
00:08:42,000 --> 00:08:47,080
talks about comments,
talks about if the text is in italic

111
00:08:47,280 --> 00:08:55,360
or not, if it's an anchor,
if it's bold, so it talks about

112
00:08:55,560 --> 00:09:01,040
the elements, talks about the concepts
that the user wants to set in the API,

113
00:09:01,320 --> 00:09:04,080
does not talk about the objects
that is created inside,

114
00:09:04,280 --> 00:09:05,520
that is completely hidden.

115
00:09:05,720 --> 00:09:11,360
If we see an example of how to use
this in this really little example,

116
00:09:11,560 --> 00:09:17,840
we see that when we are creating
the text object, the Microdown text

117
00:09:18,200 --> 00:09:22,840
object, we are using the builder
and we are talking to the builder

118
00:09:23,040 --> 00:09:30,280
in the terms that we know about,
in this case, about the Microdown text.

119
00:09:30,700 --> 00:09:36,040
We don't care about what objects
are used to create it or what is

120
00:09:36,240 --> 00:09:41,960
the final result of the string that
we have in our text test.

121
00:09:42,280 --> 00:09:49,720
So for the user, it's better to
use these messages to talk in the

122
00:09:49,920 --> 00:09:53,240
sense of what we want,
and then the builder is at the end

123
00:09:53,440 --> 00:10:00,480
generating the text and that this
Microdown text representation.

124
00:10:02,320 --> 00:10:07,520
As I said before, it's important
to see that the API of a builder

125
00:10:07,720 --> 00:10:11,380
is the most important part in the
case of Microdown builder,

126
00:10:11,620 --> 00:10:17,520
the high-level API encapsulates
all the complexity of the Microdown

127
00:10:17,720 --> 00:10:18,480
itself.

128
00:10:18,680 --> 00:10:24,320
The users are directly using it
without needing to do any extreme

129
00:10:24,520 --> 00:10:29,500
manipulation and talks in the sense,
in the terms that are implemented

130
00:10:29,700 --> 00:10:30,460
by Microdown.

131
00:10:31,060 --> 00:10:35,440
And also, one important thing is
that how Microdown is implemented

132
00:10:35,640 --> 00:10:38,500
inside is completely transparent
to the user.

133
00:10:38,700 --> 00:10:42,060
The user only talks to the high-level
API.

134
00:10:43,420 --> 00:10:48,740
Let's see another example,
because we want to really put effort

135
00:10:48,940 --> 00:10:52,120
in understanding the importance
of the builder API.

136
00:10:52,520 --> 00:10:53,420
We have Seaside.

137
00:10:53,660 --> 00:11:02,420
Seaside is our web framework that
allows us to produce nice web examples

138
00:11:02,620 --> 00:11:07,320
using a really beautiful builder API.

139
00:11:07,520 --> 00:11:12,360
It will generate an HTML page without
having to do any kind of extreme

140
00:11:12,560 --> 00:11:15,800
manipulation, not having to care
about the correct structure.

141
00:11:16,000 --> 00:11:22,720
Because as you might know,
HTML pages require to be correctly

142
00:11:22,920 --> 00:11:28,540
structured and correctly created
to be correctly rendered in the browser.

143
00:11:28,740 --> 00:11:35,380
So in the Seaside builder,
again, if we see the messages that

144
00:11:35,580 --> 00:11:40,000
we send to it, we see that we are
talking in the cells,

145
00:11:40,560 --> 00:11:44,960
in the terms that are understandable
for the user.

146
00:11:45,160 --> 00:11:49,060
In this case, we are talking about
headings, paragraph, list items.

147
00:11:49,340 --> 00:11:52,460
We are creating an orderedList here.

148
00:11:53,340 --> 00:11:59,460
So all these elements are completely
understandable for somebody that

149
00:11:59,660 --> 00:12:06,980
wants to generate an HTML page and
also provides a way of easily generating

150
00:12:07,180 --> 00:12:10,320
them without caring about extreme
manipulation.

151
00:12:11,320 --> 00:12:20,680
Moreover, this Seaside builder provides
us with a way of structuring elements

152
00:12:20,880 --> 00:12:25,400
that should be inside another,
all the listItem elements should

153
00:12:25,600 --> 00:12:27,880
be inside an orderedList element.

154
00:12:28,280 --> 00:12:33,500
And the API of the builder provides
us with a way of correctly ordering

155
00:12:33,700 --> 00:12:34,480
them.

156
00:12:34,980 --> 00:12:40,200
This DSL like syntax makes that

157
00:12:40,400 --> 00:12:42,740
our builder is clear to understand.

158
00:12:42,940 --> 00:12:48,280
And we can see clearly that this
list item that we are created is

159
00:12:48,480 --> 00:12:52,740
inside the order list that we are
generating.

160
00:12:56,260 --> 00:12:59,940
When to apply the builder design
pattern?

161
00:13:00,140 --> 00:13:04,960
Well, we want to apply the builder
design pattern when we have some

162
00:13:05,160 --> 00:13:07,720
kind of a regular object creation.

163
00:13:07,940 --> 00:13:12,140
We have some regularity in the object
creation, and we want to use it

164
00:13:12,340 --> 00:13:18,540
in different places of our application,
or we have different users of it.

165
00:13:18,920 --> 00:13:22,840
As for example, in the Seaside example,
we will have many applications

166
00:13:23,040 --> 00:13:25,600
generating HTML using the builder.

167
00:13:26,000 --> 00:13:30,260
So we want to use a builder to hide
the complexity.

168
00:13:31,440 --> 00:13:38,100
The builders give us a single entry
point to the creation of objects.

169
00:13:38,300 --> 00:13:44,280
So it is a really nice feature of
a builder, so we can create complex

170
00:13:44,480 --> 00:13:48,340
objects in a single way,
and if we need to change it in the

171
00:13:48,540 --> 00:13:51,340
future, we control this single entry
point.

172
00:13:53,600 --> 00:14:00,420
Also, the builder has a clear API
that is used by the users.

173
00:14:00,620 --> 00:14:09,340
So this API gives us a stable point
where we can implement an evolving

174
00:14:09,540 --> 00:14:12,200
solution without changing the API.

175
00:14:12,800 --> 00:14:17,980
As I said before, the builder
encapsulates the implementation.

176
00:14:18,240 --> 00:14:20,940
So it hides the real implementation
from the user.

177
00:14:21,320 --> 00:14:25,280
So we can always evolve the
implementation without affecting

178
00:14:25,480 --> 00:14:26,320
our users.

179
00:14:27,210 --> 00:14:33,120
As a conclusion, the builder represents
and controls the creations of objects.

180
00:14:33,880 --> 00:14:36,660
It encapsulates this creation logic.

181
00:14:37,440 --> 00:14:43,260
We are always sure that we have
a well-created graph of objects,

182
00:14:43,640 --> 00:14:49,640
and we have a decoupling between
what the user asked to the builder

183
00:14:49,840 --> 00:14:54,740
and what are the real objects that
are instantiated at the end.

184
00:14:54,940 --> 00:14:59,860
And this gives us a way of decoupling
evolution because we can evolve

185
00:15:00,060 --> 00:15:03,900
always the implementation without
affecting the users of it.


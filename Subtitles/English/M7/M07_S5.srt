1
00:00:04,080 --> 00:00:05,140
- Hello everybody.

2
00:00:05,340 --> 00:00:07,460
So welcome to this new lecture.

3
00:00:07,820 --> 00:00:13,920
So in this lecture, this is an analysis
of a case study of a change that

4
00:00:14,120 --> 00:00:15,660
we really put in production in Pharo.

5
00:00:16,260 --> 00:00:21,600
And the idea is to show how we introduce
delegation of behavior to obtain

6
00:00:21,800 --> 00:00:22,700
a more modular system.

7
00:00:24,220 --> 00:00:28,380
So what we will see in this lecture,
we will look at the class definition

8
00:00:28,580 --> 00:00:33,440
printer, check the design in Pharo,
and it will help us also to think

9
00:00:33,640 --> 00:00:34,400
modular.

10
00:00:35,260 --> 00:00:38,900
So let's look at the context and
the challenges that we faced.

11
00:00:40,440 --> 00:00:44,620
One of the key questions in Pharo
was how to support various class

12
00:00:44,820 --> 00:00:47,800
definition formats and in a modular way.

13
00:00:48,120 --> 00:00:52,360
But this means without having to
check everywhere, everything.

14
00:00:52,920 --> 00:00:57,200
So when I said various formats,
in fact, we have the old Squeak

15
00:00:57,400 --> 00:01:05,640
syntax format, the old Pharo definition
and the Fluid syntax that we saw

16
00:01:05,840 --> 00:01:08,020
in the fluid lecture.

17
00:01:08,960 --> 00:01:12,640
In addition, so we have various formats,
but we have also various objects.

18
00:01:12,840 --> 00:01:17,100
So this means that we have class,
metaclass, traits, the class side

19
00:01:17,300 --> 00:01:18,060
of traits.

20
00:01:18,260 --> 00:01:20,540
And the key question now,
this is how do we control this

21
00:01:20,740 --> 00:01:21,500
complexity?

22
00:01:21,700 --> 00:01:25,660
Because, for example,
a slot first class instance variable

23
00:01:25,860 --> 00:01:30,320
should not be displayed in Old Pharo
nor in Squeak, but they should be

24
00:01:30,520 --> 00:01:31,960
displayed in the Fluid syntax.

25
00:01:33,500 --> 00:01:36,860
And the point of all this,
this is how can we do that without

26
00:01:37,060 --> 00:01:38,520
having checks everywhere?

27
00:01:39,280 --> 00:01:44,420
And in addition, can we have a modular
system where we can remove one

28
00:01:44,620 --> 00:01:45,840
definition at any time?

29
00:01:46,700 --> 00:01:49,360
So let's see how it was done before.

30
00:01:49,560 --> 00:01:55,240
So in Pharo 7 or 8, in fact,
there was a first introduction of

31
00:01:55,440 --> 00:02:01,020
slots and it was hacked basically,
it was working, but it was a bit

32
00:02:01,220 --> 00:02:01,980
hackish.

33
00:02:02,180 --> 00:02:04,220
So you see, so for example,
in the definition of the class

34
00:02:04,420 --> 00:02:08,040
description, so class description
in the superclass of class and

35
00:02:08,240 --> 00:02:13,040
metaclass, we had a method that
was called definition.

36
00:02:13,420 --> 00:02:16,760
And then, it was checking,
oh, do I need to have a slot?

37
00:02:17,180 --> 00:02:19,020
And should I show the slot?

38
00:02:19,280 --> 00:02:21,880
If this is the case, then I will
have a definition with slot.

39
00:02:22,080 --> 00:02:23,660
Else, I have a definition without slot.

40
00:02:23,860 --> 00:02:25,540
And guess what?

41
00:02:25,740 --> 00:02:29,020
The same in metaclass,
we have checks there.

42
00:02:30,400 --> 00:02:34,480
And as you can imagine,
we have also checks inside,

43
00:02:34,680 --> 00:02:35,440
for example, the classTemplate.

44
00:02:35,900 --> 00:02:38,820
So this means that when you were
defining a new class,

45
00:02:39,200 --> 00:02:44,740
the system would do again this condition

46
00:02:44,940 --> 00:02:48,660
to produce the correct one here
with slot and the other one with

47
00:02:48,860 --> 00:02:49,800
instance variable names.

48
00:02:50,000 --> 00:02:53,900
So this means that you imagine that
plus fluid in the middle,

49
00:02:54,280 --> 00:02:57,140
okay, it was not working,
it was not scaling.

50
00:02:59,100 --> 00:03:03,060
So now, what I suggest is that take
five minutes, press Pause on this video,

51
00:03:03,260 --> 00:03:05,820
take five minutes to see how you
would solve it.

52
00:03:09,420 --> 00:03:10,520
So what is the solution?

53
00:03:10,760 --> 00:03:14,220
So what you saw is that at the beginning
of the lecture, we already said

54
00:03:14,420 --> 00:03:17,520
that sending a message is making
a choice, but to be able to send

55
00:03:17,720 --> 00:03:20,620
a message, we need class so that
we could have instance of different

56
00:03:20,820 --> 00:03:26,320
classes where we could send messages
and those messages would select

57
00:03:26,520 --> 00:03:27,760
different methods.

58
00:03:28,680 --> 00:03:30,060
So this is what we will do here.

59
00:03:30,260 --> 00:03:33,640
In fact, we will create class hierarchy
of printers where we have,

60
00:03:33,840 --> 00:03:36,560
for example, the
FluidClassDefinitionPrinter, the

61
00:03:36,760 --> 00:03:39,320
LegacyClassDefinitionPrinter, and

62
00:03:39,380 --> 00:03:41,560
the OldPharoClassDefinitionPrinter.

63
00:03:41,620 --> 00:03:45,960
And basically, this is a kind of
strategy and the class will delegate

64
00:03:46,160 --> 00:03:48,180
to the printer for its own printing.

65
00:03:48,920 --> 00:03:53,260
So we will have a system where we
have the class, or you will see

66
00:03:53,460 --> 00:03:56,000
this is a bit more complex,
but let's think that this is simple

67
00:03:56,200 --> 00:04:05,810
like that now, where we have this
hierarchy of printer here,

68
00:04:06,010 --> 00:04:09,850
and then we delegate and at runtime,
depending on the printer that we select,

69
00:04:10,050 --> 00:04:10,950
we will get the correct one.

70
00:04:11,430 --> 00:04:12,730
So let's go a bit in details.

71
00:04:13,090 --> 00:04:13,850
What is it?

72
00:04:14,050 --> 00:04:21,150
So if you imagine, so a tool,
for example, here will send a message

73
00:04:21,350 --> 00:04:24,590
and we will execute this method,
definitionString.

74
00:04:25,490 --> 00:04:31,430
So what the definitionString will
do is that it will create an adequate

75
00:04:31,630 --> 00:04:38,310
printer, an instance of these three
classes, and then it will ask,

76
00:04:38,510 --> 00:04:40,150
oh, can you give me the
definitionString?

77
00:04:42,370 --> 00:04:47,070
And each of these class will return,
oh yes, for example, the

78
00:04:47,270 --> 00:04:52,890
LegacyDefinitionPrinter knows how
to define, how to print a class,

79
00:04:53,090 --> 00:04:55,650
how to print a metaclass,
how to print a trait,

80
00:04:56,110 --> 00:04:59,110
the same way the
FluidClassDefinitionPrinter knows

81
00:04:59,310 --> 00:05:00,970
how to print a class,
a metaclass, a trait,

82
00:05:01,170 --> 00:05:02,190
and so on.

83
00:05:02,590 --> 00:05:06,410
And what you see that here,
basically the definitionString is

84
00:05:06,610 --> 00:05:08,970
first creating a printer.

85
00:05:09,170 --> 00:05:13,730
So this printer will return one
of these instances, and then we

86
00:05:13,930 --> 00:05:14,690
send the definitionString.

87
00:05:15,130 --> 00:05:18,050
The definitionString,
this is not written on the diagram,

88
00:05:18,270 --> 00:05:23,430
will call the corresponding string
methods that we have here.

89
00:05:23,630 --> 00:05:24,530
We will see that in a moment.

90
00:05:26,660 --> 00:05:28,280
So basically, this is what I just said.

91
00:05:28,480 --> 00:05:32,500
So we have two methods here,
the definitionString method that

92
00:05:32,700 --> 00:05:34,760
will return the actual string.

93
00:05:34,960 --> 00:05:42,520
And to do that, it will first create
an instance of a printer calling

94
00:05:42,720 --> 00:05:43,480
these methods.

95
00:05:43,680 --> 00:05:46,940
And these methods basically said,
okay, given this entity,

96
00:05:47,280 --> 00:05:48,980
I want to have a printer for this
entity.

97
00:05:49,400 --> 00:05:54,580
Since class description is the root
of hierarchy, you will see that

98
00:05:54,780 --> 00:05:57,580
we will have here potentially self
is a class or a metaclass.

99
00:05:57,920 --> 00:05:59,420
It's also a trait.

100
00:05:59,700 --> 00:06:02,460
So this is a variation point that
we will see later.

101
00:06:02,960 --> 00:06:05,520
And once I have this printer,
I just send the printer,

102
00:06:05,720 --> 00:06:07,120
the definitionString to this printer.

103
00:06:08,000 --> 00:06:09,300
So let's step back.

104
00:06:09,860 --> 00:06:15,260
A printer knows how to print a class,
a metaclass, a trait.

105
00:06:16,540 --> 00:06:19,360
So let's look at this to make it
more concrete.

106
00:06:21,180 --> 00:06:26,080
For example, the fluid class printer
will know how to print a class like

107
00:06:26,280 --> 00:06:27,940
that, a metaclass like this.

108
00:06:30,090 --> 00:06:32,610
And here you see, for example,
the class definition.

109
00:06:34,190 --> 00:06:39,070
It create a stream and then he will
check if this is a new superclass.

110
00:06:39,410 --> 00:06:43,010
It will put nil then after he will
compose the message like that.

111
00:06:43,210 --> 00:06:44,930
And then, it will check in the slots
and things.

112
00:06:45,390 --> 00:06:47,210
And finally create the package.

113
00:06:47,410 --> 00:06:51,230
For the metaclass definition,
this is the same logic,

114
00:06:51,430 --> 00:06:55,550
but to really produce a different,
a different setup.

115
00:06:57,390 --> 00:07:01,950
For example, what is interesting
is that in Old Pharo format,

116
00:07:02,370 --> 00:07:04,150
we don't want to display slots.

117
00:07:04,350 --> 00:07:07,330
We decided that they should not
be displayed to simplify the system.

118
00:07:07,810 --> 00:07:10,830
And here this means that this is
this printer that encapsulates this

119
00:07:11,030 --> 00:07:11,790
logic.

120
00:07:11,990 --> 00:07:14,530
So here it said, okay,
given a class that I should print,

121
00:07:14,730 --> 00:07:17,890
I will ask the class,
do you need a slot definition?

122
00:07:18,690 --> 00:07:22,330
If you don't need it,
I will just print a basic definition.

123
00:07:22,810 --> 00:07:27,650
If you do it, then I will create
a different printer and ask this

124
00:07:27,850 --> 00:07:31,110
different printer for the definition.

125
00:07:31,310 --> 00:07:34,890
So this means that here,
this is this printer that,

126
00:07:35,090 --> 00:07:40,030
that encapsulates and controls the
logic and not the tools or anything.

127
00:07:43,590 --> 00:07:46,770
So now, what we see is that for
the classTemplate, the logic is

128
00:07:46,970 --> 00:07:47,730
much simpler.

129
00:07:47,930 --> 00:07:49,250
We said, okay, I want a class
definition.

130
00:07:49,530 --> 00:07:52,150
I want to have a compact,
the compact template,

131
00:07:52,350 --> 00:07:53,110
for example.

132
00:07:53,310 --> 00:07:54,070
And that's it.

133
00:07:54,710 --> 00:08:00,670
And I give the name and I get the
printer depending on in which format

134
00:08:00,870 --> 00:08:01,630
I am.

135
00:08:01,830 --> 00:08:03,350
I don't have to do checks here.

136
00:08:05,290 --> 00:08:11,470
So if we see we have one format,
one printer, the printer can support

137
00:08:13,090 --> 00:08:14,730
multiple related features.

138
00:08:14,930 --> 00:08:15,690
So like expansion.

139
00:08:15,890 --> 00:08:18,490
So I did not explain what is expansion,
but if you have a partial class

140
00:08:18,690 --> 00:08:21,570
definition and you want to see all
the parameters that you want,

141
00:08:21,770 --> 00:08:25,650
you could say, oh, please class
definition, can you expand and show

142
00:08:25,850 --> 00:08:29,290
me all the possible variation that
I have the template, the template

143
00:08:29,490 --> 00:08:32,770
that you see in the debugger and
the actual class printing.

144
00:08:33,210 --> 00:08:37,490
And there is a support also of reuse
within the hierarchy of the printer

145
00:08:37,690 --> 00:08:42,330
and the possibility to have a default
way of managing printers.

146
00:08:42,530 --> 00:08:48,030
For example, if I have a problem,
the legacy will just say,

147
00:08:48,230 --> 00:08:51,350
no, I don't know how to do it,
you have to use a free printer and

148
00:08:51,550 --> 00:08:56,630
like that we will support also the
evolution of the domain and the

149
00:08:56,830 --> 00:08:57,790
language from that perspective.

150
00:08:58,970 --> 00:09:03,230
So, but there is more.

151
00:09:03,430 --> 00:09:05,470
In fact, we have more challenges
than that.

152
00:09:05,790 --> 00:09:08,930
So this means that for now we have
multiple printer, but in fact,

153
00:09:09,290 --> 00:09:14,310
we should support different entities
printed by different printers.

154
00:09:14,870 --> 00:09:21,530
So at the end, we will have class
description, which has metaclass,

155
00:09:27,020 --> 00:09:28,960
class and potentially traits.

156
00:09:29,160 --> 00:09:32,580
I don't remember exactly if this is that,
but I think that this is like that

157
00:09:32,780 --> 00:09:33,720
and the printer.

158
00:09:33,920 --> 00:09:38,500
So here I have another hierarchy
of printer here.

159
00:09:42,410 --> 00:09:46,350
And the question this is,
I want, for example, to be able

160
00:09:46,550 --> 00:09:53,110
to print a class in the Old format
or a class in the Fluid format or

161
00:09:53,310 --> 00:09:57,170
a trait in the old format,
so I have all the combination.

162
00:09:57,390 --> 00:09:58,570
So how do we do that?

163
00:09:59,270 --> 00:10:04,070
I think that normally you should
have really an idea now.

164
00:10:04,270 --> 00:10:08,210
This is like if we need to select
one method based on two things.

165
00:10:08,730 --> 00:10:12,070
So the solution here,
this is double dispatch.

166
00:10:13,850 --> 00:10:14,830
Let's look at it.

167
00:10:16,090 --> 00:10:24,150
So, so you remember, so the
definitionString was basically called

168
00:10:24,350 --> 00:10:31,990
and what we see is that here definition
string will ask, we said,

169
00:10:32,190 --> 00:10:35,090
oh, in fact, I will not decide.

170
00:10:35,290 --> 00:10:39,330
I will just ask the class,
hey class, can you give me the

171
00:10:39,530 --> 00:10:43,170
definition string for myself because
I am a printer.

172
00:10:43,370 --> 00:10:47,550
So if I am fluid, because each
printer knows how to print things.

173
00:10:48,010 --> 00:10:50,930
So this printer, they know how to
print metaclass, class,

174
00:10:51,130 --> 00:10:54,170
traits, class, metaclass,
traits, and so on.

175
00:10:54,910 --> 00:10:57,970
But I don't know when to invoke
these methods.

176
00:10:58,170 --> 00:11:03,810
So now what I do. I just said,
okay, can you just, I ask the class

177
00:11:04,250 --> 00:11:08,930
or the entity because this entity
can be a class, a metaclass or a trait.

178
00:11:09,130 --> 00:11:10,950
I said entity or for class here.

179
00:11:11,370 --> 00:11:12,750
Can you give me the correct one?

180
00:11:13,090 --> 00:11:14,810
And then, I will have this dispatch.

181
00:11:16,650 --> 00:11:18,650
So when I am a class,
I will have the class,

182
00:11:18,850 --> 00:11:23,060
oh, display me as a class.

183
00:11:23,260 --> 00:11:25,040
When this is a metaclass,
I would say the printer,

184
00:11:25,240 --> 00:11:26,160
oh there is a bug here.

185
00:11:26,500 --> 00:11:28,740
This is metaclass should say metaclass.

186
00:11:29,360 --> 00:11:34,410
And when this is a trait,
print me as a trait.

187
00:11:34,890 --> 00:11:36,790
So what you see is that we have
a double dispatch.

188
00:11:36,990 --> 00:11:40,550
And in fact, this is exactly the
same as in the visitor design pattern.

189
00:11:40,750 --> 00:11:43,410
So we should think that this is
a visitor, for example.

190
00:11:44,030 --> 00:11:46,770
So this means that I am the object
knowing how to do things.

191
00:11:47,770 --> 00:11:53,280
And here class description with
my hierarchy.

192
00:11:53,480 --> 00:11:55,120
This is a bit like my composite.

193
00:11:58,740 --> 00:12:01,660
It's not really the idea of the
composite, but in the visitor design

194
00:12:01,860 --> 00:12:03,360
pattern that we presented with the
composite.

195
00:12:03,560 --> 00:12:07,360
So this means that this visitor
will visit this structure using

196
00:12:07,560 --> 00:12:08,320
double dispatch.

197
00:12:09,280 --> 00:12:13,220
And the key point, this is in this
method where you see,

198
00:12:13,460 --> 00:12:17,660
so this is not the argument that
we dispatch on, but we dispatch

199
00:12:17,860 --> 00:12:19,800
on an instance variable that has
been set before.

200
00:12:22,170 --> 00:12:25,890
So here you have all the code basically.

201
00:12:26,090 --> 00:12:34,170
And you see, okay, I will select
the correct definition each time.

202
00:12:34,630 --> 00:12:37,570
You see here, I even showed a
traitedMetaclass because this is

203
00:12:37,770 --> 00:12:40,710
the one case that I didn't show you,
but this is exactly the same all

204
00:12:40,910 --> 00:12:41,990
the time the same design.

205
00:12:43,570 --> 00:12:50,250
The printer, the entity is requested
and it has the print,

206
00:12:50,450 --> 00:12:56,830
he said to the printer,
yes, I want to be displayed as a class,

207
00:12:57,130 --> 00:12:58,890
as a trait or as a traitedMetaclass.

208
00:13:04,480 --> 00:13:05,660
But there is more.

209
00:13:05,860 --> 00:13:11,820
In fact, we don't want to have direct
references to printer in all the code.

210
00:13:12,100 --> 00:13:12,860
Why?

211
00:13:13,060 --> 00:13:15,400
Because we want to be able to remove
printers.

212
00:13:15,760 --> 00:13:21,000
In fact, in Pharo, we don't want
to have a 20 different class definitions.

213
00:13:21,200 --> 00:13:22,520
We want to have one that is fluid.

214
00:13:22,720 --> 00:13:26,320
We just want to make sure that we
have package that can be loaded

215
00:13:26,520 --> 00:13:30,840
by our client, so that they can
manage all code if they want.

216
00:13:31,880 --> 00:13:34,700
So the idea, this is really that
it should be optional.

217
00:13:35,660 --> 00:13:39,100
So the design here, and you saw
it a bit in the previous slide,

218
00:13:39,440 --> 00:13:43,920
this is that we only reference the
superclass that acts as a factory.

219
00:13:44,760 --> 00:13:46,080
So let's look at it.

220
00:13:48,200 --> 00:13:53,200
So I have the ClassDefinitionPrinter,
which is the root of the hierarchy.

221
00:13:53,420 --> 00:13:59,680
You see it has an instance variable
for the knowing on what class it

222
00:13:59,880 --> 00:14:05,880
should print and some sharedVariable
to be able to know what we should

223
00:14:06,080 --> 00:14:07,520
show or not, depending on the system.

224
00:14:08,580 --> 00:14:13,660
And then the new here,
the new method will check,

225
00:14:13,860 --> 00:14:16,940
oh, if I am configured to display
information in fluid,

226
00:14:17,200 --> 00:14:21,120
then I will return an instance of
my subclass that is the

227
00:14:21,320 --> 00:14:22,860
FluidClassDefinitionPrinter.

228
00:14:23,580 --> 00:14:25,740
Else, I will return the oldPharo
version.

229
00:14:27,580 --> 00:14:33,580
So this means that basically what
you have is that you have your

230
00:14:33,780 --> 00:14:34,540
hierarchy.

231
00:14:34,740 --> 00:14:40,020
All the clients here will only refer
to this guy and never to the instance.

232
00:14:40,220 --> 00:14:46,680
But this guy here, the
ClassDefinitionPrinter will create

233
00:14:46,880 --> 00:14:50,120
instances of each subclass,
either this one or that one,

234
00:14:50,320 --> 00:14:55,480
or even when we ask the legacy,
it will return an instance of the

235
00:14:55,680 --> 00:14:56,440
legacy.

236
00:14:56,880 --> 00:15:01,480
And this means that like that,
I can just plug or unplug,

237
00:15:01,680 --> 00:15:05,180
for example, I can remove the legacy
if I want from the system.

238
00:15:06,940 --> 00:15:10,260
So for example, how this is done,
the oldDefinition, I would say,

239
00:15:10,480 --> 00:15:14,740
okay, ClassDefinitionPrinter legacy
for self class DefinitionString.

240
00:15:15,300 --> 00:15:20,660
It will return me the definition
of the class as in the old version.

241
00:15:21,660 --> 00:15:26,360
But this means that I can remove
these methods and I have no problem.

242
00:15:27,860 --> 00:15:34,680
So as a conclusion, this is another
example of how we can dispatch an

243
00:15:34,880 --> 00:15:42,400
object to avoid condition and what
it adds, it adds also the idea of

244
00:15:43,080 --> 00:15:45,940
how do we manage the creation of
the correct object.

245
00:15:46,740 --> 00:15:49,300
If you want to know more,
what I suggest is that you really

246
00:15:49,500 --> 00:15:54,760
look at the Pharo code because this
is in production and it took us

247
00:15:54,960 --> 00:15:58,320
some time to really get it nicely done.

248
00:16:00,020 --> 00:16:04,760
And this is nice because it already
supports these three different class

249
00:16:04,960 --> 00:16:12,120
definitions and it is helping us
to migrate where we want over the

250
00:16:12,320 --> 00:16:13,080
different versions of Pharo.


1
00:00:04,440 --> 00:00:08,860
Welcome to this lecture about builder
API variations.

2
00:00:09,140 --> 00:00:14,480
We are going to analyze how to build
a nice API for our builders.

3
00:00:15,920 --> 00:00:20,800
The goal for this lecture is to
identify and understand the different

4
00:00:21,000 --> 00:00:25,140
variations that we can have in our
builder API and what are the

5
00:00:25,340 --> 00:00:28,420
consequences of choosing one way
or another.

6
00:00:28,980 --> 00:00:33,200
Let's start with our example of
Microdown.

7
00:00:34,120 --> 00:00:39,700
Microdown is a markdown language,
is a compact subset of it and it

8
00:00:39,900 --> 00:00:42,480
has more extensions or is more
extensible.

9
00:00:42,680 --> 00:00:49,180
We can add specific extensions to
Microdown to allow us for representing

10
00:00:49,380 --> 00:00:51,360
more elements than markdown.

11
00:00:51,560 --> 00:00:57,140
We use it in Pharo for documenting
a lot of elements, especially for

12
00:00:57,340 --> 00:01:01,180
class `comments`, but also is used
outside to generate slides,

13
00:01:01,460 --> 00:01:03,080
books, documentation in general.

14
00:01:04,760 --> 00:01:10,040
As an example here of the writing,
we can see that this is an evolution

15
00:01:10,240 --> 00:01:13,980
of a markdown with some little
additions.

16
00:01:14,180 --> 00:01:15,600
We can see the text.

17
00:01:15,800 --> 00:01:21,280
It generates a text that has a

18
00:01:21,480 --> 00:01:26,940
list that has definitions for slides,
bullets, and so on.

19
00:01:27,140 --> 00:01:33,920
So it's a nice extension to markdown
and we use it in Pharo for generating

20
00:01:34,120 --> 00:01:35,980
our class `comments`.

21
00:01:36,180 --> 00:01:39,180
Like that, we can put rich text
in our class `comments`,

22
00:01:39,440 --> 00:01:46,640
like for example, code blocks or
having a style for our selectors

23
00:01:46,840 --> 00:01:49,980
or having links to other classes,
to other elements.

24
00:01:51,880 --> 00:01:56,020
We have a way of creating default
class `comment`.

25
00:01:56,220 --> 00:02:01,980
We can generate this class `comment`
from the analysis of the class,

26
00:02:02,180 --> 00:02:06,200
for example, showing which are the
messages it understands,

27
00:02:06,400 --> 00:02:07,460
how it is created.

28
00:02:08,460 --> 00:02:14,280
And also we have a way of extending
that and specializing it for some

29
00:02:14,480 --> 00:02:16,300
specific classes.

30
00:02:16,900 --> 00:02:21,660
In this case, we are analyzing the
`comment` of the ButtonPresenter

31
00:02:22,180 --> 00:02:28,460
that is one of the elements of a spec,
our UI framework, and in this one

32
00:02:28,660 --> 00:02:34,120
we are provided different parts
when generating this markdown `comment`.

33
00:02:34,500 --> 00:02:42,620
These `comments` are generated by
our code and it's nice to have different

34
00:02:42,820 --> 00:02:43,580
elements.

35
00:02:43,780 --> 00:02:45,620
In this case, for example,
we have a code block,

36
00:02:46,020 --> 00:02:53,040
we have links, we have examples
and so on that is generated from

37
00:02:53,240 --> 00:02:55,300
the metadata in the class.

38
00:02:57,900 --> 00:03:03,780
Another example, when we have a
baseline that is a description of

39
00:03:03,980 --> 00:03:10,000
our projects, we render the `comment`
in a different way, showing different

40
00:03:10,200 --> 00:03:11,020
information.

41
00:03:12,840 --> 00:03:18,380
This Microdown is generated
programmatically, but with a lot

42
00:03:18,580 --> 00:03:19,880
of nice features.

43
00:03:20,080 --> 00:03:25,480
One of the best features is that
we don't care about doing concatenation

44
00:03:25,680 --> 00:03:26,440
of strings.

45
00:03:26,640 --> 00:03:30,740
Concatenating strings is always
a problem, it's complex to maintain,

46
00:03:30,940 --> 00:03:38,300
it's complex to handle and we always
have issues with syntax and if the

47
00:03:38,500 --> 00:03:41,220
syntax changes in the future,
it's always worse.

48
00:03:41,420 --> 00:03:47,680
And also, when we want the users
to use Microdown, we don't want

49
00:03:47,880 --> 00:03:58,020
them to learn all the syntactic
quirks and the syntactic usage of

50
00:03:58,220 --> 00:03:58,980
Microdown.

51
00:03:59,440 --> 00:04:02,860
So it's better to provide a nice
builder API.

52
00:04:03,300 --> 00:04:04,060
Why?

53
00:04:04,260 --> 00:04:07,980
Because we want to abstract the
users from the details of what is

54
00:04:08,180 --> 00:04:10,740
building and to support future change.

55
00:04:11,820 --> 00:04:19,240
Also, we want to have a way of extending
this so anybody that is implementing

56
00:04:19,440 --> 00:04:26,380
a new hierarchy in Pharo can extend
that, a new class in Pharo can extend

57
00:04:26,580 --> 00:04:33,460
the method build Microdown using
`comment` colon to add a new ways

58
00:04:33,660 --> 00:04:36,500
of generating these `comments`,
this documentation.

59
00:04:38,820 --> 00:04:45,420
We can see that this hook is used
when we want to render a `comment`,

60
00:04:46,080 --> 00:04:51,040
we delegate to the class or the
package and we send the message

61
00:04:51,240 --> 00:04:58,200
to generate this `comment` and then
it is rendered by Microdown to show

62
00:04:58,400 --> 00:05:01,220
it in the tools in Pharo.

63
00:05:01,460 --> 00:05:07,680
The default implementation just
takes the builder, creates a header,

64
00:05:08,380 --> 00:05:14,620
with the class, string class colon,
string and the name of the class.

65
00:05:15,000 --> 00:05:24,900
And then, each puts a horizontal
line and the `comment` written by

66
00:05:25,100 --> 00:05:27,100
the programmer of the class.

67
00:05:27,840 --> 00:05:29,380
This is the basic implementation.

68
00:05:30,500 --> 00:05:32,960
Again, anybody can extend this.

69
00:05:33,160 --> 00:05:36,300
In this example, we are seeing the
extension done by spec,

70
00:05:36,620 --> 00:05:41,740
our UI framework that basically
will do the same that is done in

71
00:05:41,940 --> 00:05:45,160
the superclass, the same that is
done in the base case,

72
00:05:45,360 --> 00:05:48,040
but then it starts adding its own
section.

73
00:05:48,240 --> 00:05:51,200
It will have a section with the
code for the examples,

74
00:05:51,420 --> 00:05:59,440
a section with how to create these
objects and then it has extra sections

75
00:05:59,640 --> 00:06:04,960
and it allows to describe all the
elements that we want in our

76
00:06:05,160 --> 00:06:05,920
documentation.

77
00:06:07,820 --> 00:06:14,720
We see the same is done in the case
of the baseline.

78
00:06:14,920 --> 00:06:20,400
In the baseline, we want to print
the dependencies and it's exactly

79
00:06:20,600 --> 00:06:21,800
the same idea.

80
00:06:22,360 --> 00:06:29,920
We are overriding this method and
adding the specific behavior to

81
00:06:30,120 --> 00:06:32,060
create the documentation that we want.

82
00:06:33,560 --> 00:06:40,440
This builder API for Microdown is
always based in the concepts that

83
00:06:40,640 --> 00:06:45,340
the user wants from a Microdown,
talks about `text`, talks about

84
00:06:45,540 --> 00:06:48,540
the styles, talks about `anchors`,
`codeblocks`, `comments`,

85
00:06:49,060 --> 00:06:49,820
etc.

86
00:06:51,680 --> 00:06:55,700
These concepts are the concepts
that are important for the user

87
00:06:55,900 --> 00:07:00,320
and a concept that are important
to generate the Microdown page.

88
00:07:02,520 --> 00:07:08,560
When we are generating the leaf
element in our document like a text

89
00:07:08,760 --> 00:07:15,780
or a new line or a horizontal line,
we are just passing the argument

90
00:07:15,980 --> 00:07:20,080
and we are just taking the simple
order in which they are created.

91
00:07:20,280 --> 00:07:25,180
We are just accumulating the text
one after the other.

92
00:07:25,380 --> 00:07:29,280
For example, if we do execute in
this order, first in the document

93
00:07:29,480 --> 00:07:33,840
will appear the text `bold` and
then the new line.

94
00:07:35,480 --> 00:07:39,820
The `codeblocks`, of course,
they are also a leaf element and

95
00:07:40,020 --> 00:07:43,800
we can create them directly talking
to the builder.

96
00:07:44,120 --> 00:07:48,580
We want a `codeblock` and we pass
the Pharo code that we want to show.

97
00:07:49,440 --> 00:07:52,940
The most interesting part of the
builder is when we start having

98
00:07:53,140 --> 00:07:58,380
composite and nested elements because
one of the natures of a Microdown

99
00:07:58,580 --> 00:08:02,360
document is that it's a nested model.

100
00:08:02,560 --> 00:08:07,120
We will have a style that is applied
to another style that is applied

101
00:08:07,320 --> 00:08:12,540
to a text or a heading that has
a text inside or a list that has

102
00:08:12,740 --> 00:08:16,360
elements inside and each element
can have text and so on.

103
00:08:16,660 --> 00:08:19,520
So there is a nature of nested elements.

104
00:08:20,080 --> 00:08:24,620
So how does it work, the API of
Microdown of this?

105
00:08:24,820 --> 00:08:31,040
Well, it uses blocks to support
the wrapping of elements,

106
00:08:31,240 --> 00:08:32,780
to support the nesting of elements.

107
00:08:32,980 --> 00:08:36,760
In this case, as we see,
the API is easy to understand that

108
00:08:36,960 --> 00:08:43,460
we are creating an element that
will give the style `bold` and this

109
00:08:43,660 --> 00:08:48,700
`bold` will be applied to all the
content of this block.

110
00:08:48,900 --> 00:08:52,380
In this case, will be applied to
the text that we have inside.

111
00:08:52,580 --> 00:08:56,540
The same happens when we have two
levels of nesting.

112
00:08:56,820 --> 00:09:02,720
We have a `bold` element that will wrap
an italic element that will wrap

113
00:09:02,920 --> 00:09:07,180
the text producing that our text
at the end is in `bold` and `italic`.

114
00:09:08,380 --> 00:09:13,180
This pattern is also used when we
have headers, when we have titles

115
00:09:13,380 --> 00:09:18,700
because we want to put in the title
a text that maybe has `bold` content

116
00:09:18,900 --> 00:09:23,000
and we see in this example,
that is the same idea.

117
00:09:23,380 --> 00:09:28,580
The header will wrap everything
that is inside our block.

118
00:09:32,480 --> 00:09:37,320
We have here a really nice example
again, where we have a cell.

119
00:09:37,520 --> 00:09:44,700
A cell in our table will contain
everything that is in our block.

120
00:09:44,900 --> 00:09:50,140
And in the creation of this cell,
we are going to create a cell wrapping

121
00:09:50,340 --> 00:09:56,380
a text and a ceiling of that will
be a `bold` element wrapping another

122
00:09:56,500 --> 00:09:57,160
text.

123
00:09:57,280 --> 00:10:02,720
And as we see, it generates the text,

124
00:10:03,060 --> 00:10:04,200
but we don't care.

125
00:10:04,540 --> 00:10:09,220
We don't care what is the Microdown
string generated.

126
00:10:09,600 --> 00:10:14,060
For the users, we care about how 
to talk to the builder.

127
00:10:14,260 --> 00:10:20,540
How to talk just in the elements,
in the sense that we want to present

128
00:10:20,740 --> 00:10:21,500
to the users.

129
00:10:23,300 --> 00:10:28,560
Let's see two alternative designs
that we can use in this kind of APIs,

130
00:10:29,280 --> 00:10:30,960
this kind of API for builder.

131
00:10:31,300 --> 00:10:37,220
In this case, we have the same idea
in the two examples, but take a

132
00:10:37,420 --> 00:10:39,680
minute to understand what is the
difference.

133
00:10:41,620 --> 00:10:45,460
In this one, we can see that the
difference between one and the other

134
00:10:45,660 --> 00:10:51,240
is the presence or not of a builder
argument in the block.

135
00:10:52,480 --> 00:10:56,680
Let's analyze the one when we don't
have this builder parameter and

136
00:10:56,880 --> 00:10:58,700
we use exactly the same builder.

137
00:10:59,340 --> 00:11:03,400
As we see, this way of writing is
more compact.

138
00:11:03,600 --> 00:11:10,860
So we are really having an easier
way of writing this API for the user.

139
00:11:11,060 --> 00:11:12,620
That is a really good point.

140
00:11:13,940 --> 00:11:17,200
And the other consequence is that
we are reusing the same builder

141
00:11:17,400 --> 00:11:22,660
object inside and outside the block.

142
00:11:23,120 --> 00:11:29,060
So in this case, if we want to have
specific operations that are only

143
00:11:29,260 --> 00:11:33,740
valid inside a header,
we need to put it always there.

144
00:11:35,860 --> 00:11:41,000
All this builder should understand
all the possible messages that we

145
00:11:41,200 --> 00:11:42,080
can send to it.

146
00:11:43,640 --> 00:11:48,180
Continuing with more detail about
this implementation, if we see how

147
00:11:48,380 --> 00:11:52,900
it works, basically in this
API it's easy when we have `bold`

148
00:11:53,100 --> 00:11:56,840
receiving a block in this case,
remember we have something like

149
00:11:57,040 --> 00:12:00,480
our builder, `bold`, our block.

150
00:12:01,460 --> 00:12:04,200
And then, we have here,
for example, `text`.

151
00:12:06,140 --> 00:12:10,560
In this case, what we are going
to do to wrap it in the correct

152
00:12:10,760 --> 00:12:16,680
generation, we are going to execute
the start of the `BoldMarkup`.

153
00:12:17,220 --> 00:12:22,760
Then we are going to evaluate the
block and execute the content of it.

154
00:12:22,960 --> 00:12:28,660
And then finally, we are going to
finish the block body.

155
00:12:29,660 --> 00:12:36,000
So in this way, the builder is who
is responsible of executing the

156
00:12:36,200 --> 00:12:40,240
content of the block when it's needed,
to evaluate the block when it's

157
00:12:40,440 --> 00:12:41,440
needed in the correct moment.

158
00:12:41,900 --> 00:12:48,440
And the good thing of this is that
it really compacts the syntax,

159
00:12:49,840 --> 00:12:53,840
but as an implication,
there is only one builder.

160
00:12:54,040 --> 00:12:58,460
It's exactly the same builder in
the two parts.

161
00:13:00,020 --> 00:13:04,600
Let's see what happen when we have
a parameter, the builder as parameter

162
00:13:04,800 --> 00:13:05,560
of our blocks.

163
00:13:06,740 --> 00:13:10,700
One first consequence is that we
have to write a little more for

164
00:13:10,900 --> 00:13:16,660
the users have to write a little more,
but the nice part of it is that

165
00:13:16,860 --> 00:13:20,210
we can have two different instances
of builder.

166
00:13:20,950 --> 00:13:25,630
One builder that is the general
builder and one builder that is

167
00:13:25,830 --> 00:13:29,070
only applicable when we are inside
a header.

168
00:13:30,090 --> 00:13:34,030
We can have a header element builder,
for example.

169
00:13:36,750 --> 00:13:42,150
So like this, we can have a hierarchy
of builders and each builder can

170
00:13:42,350 --> 00:13:46,750
have a more refined API that is
only applied in this context.

171
00:13:46,990 --> 00:13:51,450
As I said before, this is more verbose
and for the user requires to write

172
00:13:51,650 --> 00:13:52,410
it more.

173
00:13:54,890 --> 00:13:59,970
If you see how does it work,
it works in the same way.

174
00:14:00,170 --> 00:14:03,150
We are going to do whatever we need
to do before the block.

175
00:14:03,510 --> 00:14:07,270
And then, we are going to evaluate
the block that we receive,

176
00:14:08,370 --> 00:14:14,170
but in this case with a different
builder that we are using and this

177
00:14:14,370 --> 00:14:18,670
special builder will have a special
API depending on the context that

178
00:14:18,870 --> 00:14:19,630
we have.

179
00:14:19,910 --> 00:14:24,210
So like that we can have a hierarchy
of builder and each one can be

180
00:14:24,410 --> 00:14:26,250
specialized for a given task.

181
00:14:27,190 --> 00:14:31,130
Let's analyze a little this,
this variation in the API.

182
00:14:31,490 --> 00:14:37,410
When we can do an explicit argument
builder, when we pass the argument,

183
00:14:37,610 --> 00:14:41,070
the builder as argument,
we can have subclasses and we can

184
00:14:41,270 --> 00:14:44,190
have a more specific APIs in the
subclass.

185
00:14:44,710 --> 00:14:50,850
Also, it allows us to write in a
DSL fashion in a way that the user

186
00:14:51,050 --> 00:14:53,870
cannot produce invalid calls.

187
00:14:54,950 --> 00:14:59,070
Imagine in the Microdown example,
that a list `item` should be always

188
00:14:59,270 --> 00:15:04,710
inside a list, if we are creating
a builder for each context,

189
00:15:04,950 --> 00:15:10,050
we can validate that,
in the case of having it in a single

190
00:15:10,250 --> 00:15:13,830
builder implementation,
we will need to put a more conditional

191
00:15:14,030 --> 00:15:16,090
code and check if we are in the
correct context.

192
00:15:16,810 --> 00:15:21,790
It works in this way,
we can have specific builders to

193
00:15:21,990 --> 00:15:24,150
provide us with more and more features.

194
00:15:24,350 --> 00:15:28,930
For example, we can have specific
builders for some part of the document,

195
00:15:29,130 --> 00:15:32,450
or we can extend them for some part
of the document, like for example,

196
00:15:32,650 --> 00:15:34,030
to generate a table of contents.

197
00:15:34,630 --> 00:15:40,170
And it feels more like a visitor
and we will have different behavior.

198
00:15:41,150 --> 00:15:46,710
The consequences of this design
having the explicit argument is

199
00:15:46,910 --> 00:15:54,170
that we need to write more code
and we have to add an extra parameter

200
00:15:54,370 --> 00:16:00,530
to all the wrapping blocks and the
wrapping APIs.

201
00:16:01,550 --> 00:16:05,890
As a conclusion of this,
none of the solution is better.

202
00:16:06,090 --> 00:16:12,650
It depends on the problem that we
are challenging and we need to decide

203
00:16:12,850 --> 00:16:13,690
which one to use.

204
00:16:13,890 --> 00:16:19,550
As always, the design is a task
that requires to take a trade-off,

205
00:16:19,750 --> 00:16:26,750
that requires to analyze advantages
and disadvantages of a solution.

206
00:16:27,910 --> 00:16:32,490
And we also need to always think
about the extensibility points that

207
00:16:32,690 --> 00:16:34,270
our solution will provide.


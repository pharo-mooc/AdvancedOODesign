{
    "title":"About tree structure and children",
    "subtitle":"",
    "author":"S. Ducasse"
}

${slide:title=Goal}$

- How do we represent children of a tree structure?
- Yes it looks like a dull question but this is not!
- What are the forces in presence?
- What is a generic API to navigate children?
- Should we explicitly list children? 

${slide:title=The case: Documents}$

Imagine a document tree such as Microdown one

- a root document contains elements
- elements contains other elements

For example 
- root component contains an header, a paragraph, an unordered list
- a list contains items 
- an item contains text elements
- bold contain text

${slide:title=Each element provide access to its sub element}$

In microdown implementation, instance variables are for non-children (i.e., elements not "in" the tree)

A code block body and arguments are just holidng strings and mic elements.

[[[
MicAbstractBlock subclass: #MicStartStopMarkupBlock
	instanceVariableNames: 'isClosed body firstLine'
]]]
[[[
MicStartStopMarkupBlock subclass: #MicSameStartStopMarkupBlock
	instanceVariableNames: 'arguments'
]]]

[[[
MicSameStartStopMarkupBlock subclass: #MicCodeBlock
	instanceVariableNames: 'firstTag'
]]]

${slide:title=Each element provide access to its sub element}$

We hold an invariant: 
- sub elements are in children
- There is no need for a specific instance variable, we just provide messages.

[[[
MicParagraphBlock >> textElements
	^ children
]]]

[[[
MicHeaderBlock >>headerElements
	^ self children
]]]


${slide:title=Nothing really new}$

- The domain tree is composed of domain objects (e.g. microdown elements) and 
- extra information are attributes of the elements. 
- Like in XTML DOM

${slide:title=Messages hide implementation}$

- In Microdown, the children instance variable holds the domain tree
- Accessors provide specific access in case

- in Seaside this is the inverse: elements are kept in instance variables and returns by ==children== methods
- The API hides it to clients.


${slide:title=The case: Seaside way}$

In Seaside, Component classes 
- define instance variables
- and a ==children== method returns all the subcomponent

${slide:title=The case: Seaside way}$

[[[
WAComponent subclass: #IAddress
    instanceVariableNames: 'editor'
]]]

[[[
IAddress >> initialize
    super initialize.
    editor := ContactView new.
    editor contact: self contacts first
]]]

[[[
IAddress >> children
    ^ Array with: editor
]]]

{slide:title=Comparing}$

- Explicit use of attributes is good because when the order of children is important changing the list as no impact on specific element access.
- E.g. if access

${slide:title=Conclusion}$

- Let the object decide if it wants to join a process but passing a container

